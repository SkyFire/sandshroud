Index: Trunk/src/Common/Base.cpp
===================================================================
--- Trunk/src/Common/Base.cpp	(revision 896)
+++ Trunk/src/Common/Base.cpp	(working copy)
@@ -76,7 +76,7 @@
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //Class MoonScriptCreatureAI
-MoonScriptCreatureAI::MoonScriptCreatureAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+MoonScriptCreatureAI::MoonScriptCreatureAI(Creature * pCreature) : CreatureAIScript(pCreature)
 {
 	mRunToTargetCache = NULLUNIT;
 	mRunToTargetSpellCache = NULL;
@@ -113,7 +113,7 @@
 	MoveTo( pCreature->_unit, pRangeStatus );
 };
 
-void MoonScriptCreatureAI::MoveTo( UnitPointer pUnit, RangeStatusPair pRangeStatus )
+void MoonScriptCreatureAI::MoveTo( Unit * pUnit, RangeStatusPair pRangeStatus )
 {
 	if ( pRangeStatus.first == RangeStatus_TooClose )
 		_unit->GetAIInterface()->_CalcDestinationAndMove( pUnit, pRangeStatus.second );
@@ -255,7 +255,7 @@
 
 void MoonScriptCreatureAI::AggroNearestUnit(int pInitialThreat)
 {
-	UnitPointer NearestRandomTarget = GetBestUnitTarget(TargetFilter_Closest);
+	Unit * NearestRandomTarget = GetBestUnitTarget(TargetFilter_Closest);
 	if( NearestRandomTarget )
 	{
 		_unit->GetAIInterface()->AttackReaction(NearestRandomTarget, pInitialThreat);
@@ -265,7 +265,7 @@
 
 void MoonScriptCreatureAI::AggroRandomUnit(int pInitialThreat)
 {
-	UnitPointer RandomTarget = GetBestUnitTarget();
+	Unit * RandomTarget = GetBestUnitTarget();
 	if( RandomTarget )
 	{
 		_unit->GetAIInterface()->AttackReaction(RandomTarget, pInitialThreat);
@@ -275,7 +275,7 @@
 
 void MoonScriptCreatureAI::AggroNearestPlayer(int pInitialThreat)
 {
-	UnitPointer NearestRandomPlayer = GetBestPlayerTarget(TargetFilter_Closest);
+	Unit * NearestRandomPlayer = GetBestPlayerTarget(TargetFilter_Closest);
 	if( NearestRandomPlayer )
 	{
 		_unit->GetAIInterface()->AttackReaction(NearestRandomPlayer, pInitialThreat);
@@ -285,7 +285,7 @@
 
 void MoonScriptCreatureAI::AggroRandomPlayer(int pInitialThreat)
 {
-	UnitPointer RandomPlayer = GetBestPlayerTarget();
+	Unit * RandomPlayer = GetBestPlayerTarget();
 	if( RandomPlayer )
 	{
 		_unit->GetAIInterface()->AttackReaction(RandomPlayer, pInitialThreat);
@@ -371,7 +371,7 @@
 	return ( _unit != pCreature->_unit ) ? _unit->CalcDistance(pCreature->_unit) : 0;
 }
 
-float MoonScriptCreatureAI::GetRangeToUnit(UnitPointer pUnit)
+float MoonScriptCreatureAI::GetRangeToUnit(Unit * pUnit)
 {
 	return _unit->CalcDistance(pUnit);
 }
@@ -386,19 +386,19 @@
 	return true;
 };
 
-PlayerPointer MoonScriptCreatureAI::GetNearestPlayer()
+Player * MoonScriptCreatureAI::GetNearestPlayer()
 {
 	return _unit->GetMapMgr()->GetInterface()->GetPlayerNearestCoords( _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ());
 }
 
-GameObjectPointer MoonScriptCreatureAI::GetNearestGameObject(uint32 pGameObjectId)
+GameObject * MoonScriptCreatureAI::GetNearestGameObject(uint32 pGameObjectId)
 {
 	return _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), pGameObjectId);
 }
 
 MoonScriptCreatureAI* MoonScriptCreatureAI::GetNearestCreature(uint32 pCreatureId)
 {
-	CreaturePointer NearestCreature = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), pCreatureId);
+	Creature * NearestCreature = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), pCreatureId);
 	return ( NearestCreature ) ? static_cast<MoonScriptCreatureAI*>(NearestCreature->GetScript()) : NULL;
 }
 
@@ -409,7 +409,7 @@
 
 MoonScriptCreatureAI* MoonScriptCreatureAI::SpawnCreature(uint32 pCreatureId, float pX, float pY, float pZ, float pO, bool pForceSameFaction)
 {
-	CreaturePointer NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(pCreatureId, pX, pY, pZ, pO, true, false, 0, 0);
+	Creature * NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(pCreatureId, pX, pY, pZ, pO, true, false, 0, 0);
 	MoonScriptCreatureAI* CreatureScriptAI = ( NewCreature ) ? static_cast<MoonScriptCreatureAI*>(NewCreature->GetScript()) : NULL;
 	if( pForceSameFaction && NewCreature )
 	{
@@ -419,15 +419,15 @@
 	return CreatureScriptAI;
 }
 
-UnitPointer	MoonScriptCreatureAI::ForceCreatureFind( uint32 pCreatureId )
+Unit *	MoonScriptCreatureAI::ForceCreatureFind( uint32 pCreatureId )
 {
 	return ForceCreatureFind( pCreatureId, _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ() );
 };
 
-UnitPointer MoonScriptCreatureAI::ForceCreatureFind( uint32 pCreatureId, float pX, float pY, float pZ )
+Unit * MoonScriptCreatureAI::ForceCreatureFind( uint32 pCreatureId, float pX, float pY, float pZ )
 {
-	UnitPointer UnitPtr = NULLUNIT; 
-	MapMgrPointer Mgr = _unit->GetMapMgr();
+	Unit * UnitPtr = NULLUNIT; 
+	MapMgr * Mgr = _unit->GetMapMgr();
 	if ( Mgr == NULL )
 		return UnitPtr;
 
@@ -556,7 +556,7 @@
 
 void MoonScriptCreatureAI::RemoveAuraOnPlayers(uint32 pSpellId)
 {
-	for( unordered_set<PlayerPointer>::iterator PlayerIter = _unit->GetInRangePlayerSetBegin(); PlayerIter != _unit->GetInRangePlayerSetEnd(); ++PlayerIter ) 
+	for( unordered_set<Player *>::iterator PlayerIter = _unit->GetInRangePlayerSetBegin(); PlayerIter != _unit->GetInRangePlayerSetEnd(); ++PlayerIter ) 
 	{// need testing
 		(*PlayerIter)->RemoveAura(pSpellId);
 	}
@@ -706,7 +706,7 @@
 	mTimerIdCounter = 0;
 }
 
-void MoonScriptCreatureAI::SetTargetToChannel(UnitPointer pTarget, uint32 pSpellId)
+void MoonScriptCreatureAI::SetTargetToChannel(Unit * pTarget, uint32 pSpellId)
 {
 	if (pTarget == NULL)
 		_unit->SetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT, 0);
@@ -716,7 +716,7 @@
 	_unit->SetUInt32Value(UNIT_CHANNEL_SPELL, pSpellId);
 }
 
-UnitPointer MoonScriptCreatureAI::GetTargetToChannel()
+Unit * MoonScriptCreatureAI::GetTargetToChannel()
 {
 
 	return _unit->GetMapMgr()->GetUnit(_unit->GetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT));
@@ -747,12 +747,12 @@
 	pTable->push_back(loot);
 }
 
-void MoonScriptCreatureAI::ClearLoot(UnitPointer pTarget)
+void MoonScriptCreatureAI::ClearLoot(Unit * pTarget)
 {
 	pTarget->ClearLoot();
 }
 
-void MoonScriptCreatureAI::AddLootFromTable(UnitPointer pTarget, LootTable* pTable, uint32 pCount)
+void MoonScriptCreatureAI::AddLootFromTable(Unit * pTarget, LootTable* pTable, uint32 pCount)
 {
 	uint32 total = 0;
 	for (LootTable::iterator it = pTable->begin(); it != pTable->end(); ++it) total += (*it).mChance;
@@ -772,17 +772,17 @@
 	}
 }
 
-void MoonScriptCreatureAI::SetGoldLoot(UnitPointer pTarget, uint32 pMinGold, uint32 pMaxGold)
+void MoonScriptCreatureAI::SetGoldLoot(Unit * pTarget, uint32 pMinGold, uint32 pMaxGold)
 {
 	pTarget->GetLoot()->gold = RandomUInt(pMaxGold - pMinGold) + pMinGold;
 }
 
-void MoonScriptCreatureAI::AddLoot(UnitPointer pTarget, uint32 pItemID, uint32 pMinCount, uint32 pMaxCount, uint32 pFFA)
+void MoonScriptCreatureAI::AddLoot(Unit * pTarget, uint32 pItemID, uint32 pMinCount, uint32 pMaxCount, uint32 pFFA)
 {
 	LootMgr::getSingleton().AddLoot(pTarget->GetLoot(), pItemID, pMinCount, pMaxCount, pFFA);
 }
 
-void MoonScriptCreatureAI::AddRareLoot(UnitPointer pTarget, uint32 pItemID, float pPercentChance)
+void MoonScriptCreatureAI::AddRareLoot(Unit * pTarget, uint32 pItemID, float pPercentChance)
 {
 	float result = RandomFloat(100.0f);
 	if (result <= pPercentChance)
@@ -884,14 +884,14 @@
 	return _unit->GetAIInterface()->hasWaypoints();
 }
 
-void MoonScriptCreatureAI::OnCombatStart(UnitPointer pTarget)
+void MoonScriptCreatureAI::OnCombatStart(Unit * pTarget)
 {
 	RandomEmote(mOnCombatStartEmotes);
 	SetBehavior(Behavior_Melee);
     RegisterAIUpdateEvent(mAIUpdateFrequency);
 }
 
-void MoonScriptCreatureAI::OnCombatStop(UnitPointer pTarget)
+void MoonScriptCreatureAI::OnCombatStop(Unit * pTarget)
 {
 	CancelAllSpells();
 	CancelAllTimers();
@@ -903,7 +903,7 @@
 	if( mDespawnWhenInactive ) Despawn(DEFAULT_DESPAWN_TIMER);
 }
 
-void MoonScriptCreatureAI::OnTargetDied(UnitPointer pTarget)
+void MoonScriptCreatureAI::OnTargetDied(Unit * pTarget)
 {
 	if( GetHealthPercent() > 0 )	//Prevent double yelling (OnDied and OnTargetDied)
 	{
@@ -911,7 +911,7 @@
 	}
 }
 
-void MoonScriptCreatureAI::OnDied(UnitPointer pKiller)
+void MoonScriptCreatureAI::OnDied(Unit * pKiller)
 {
 	RandomEmote(mOnDiedEmotes);
 	CancelAllSpells();
@@ -1042,7 +1042,7 @@
 	if( pSpell->mLastCastTime + pSpell->mCooldown > CurrentTime ) return false;
 
 	//Check range before casting
-	UnitPointer Target = GetTargetForSpell( pSpell );
+	Unit * Target = GetTargetForSpell( pSpell );
 	if( Target )
 	{
 		RangeStatusPair Status;
@@ -1079,7 +1079,7 @@
 	return true;			//No targets possible? Consider spell casted nonetheless
 }
 
-void MoonScriptCreatureAI::CastSpellOnTarget( UnitPointer pTarget, TargetType pType, SpellEntry* pEntry, bool pInstant )
+void MoonScriptCreatureAI::CastSpellOnTarget( Unit * pTarget, TargetType pType, SpellEntry* pEntry, bool pInstant )
 {
 	switch( pType.mTargetGenerator )
 	{
@@ -1117,7 +1117,7 @@
 #endif
 }
 
-RangeStatusPair MoonScriptCreatureAI::GetSpellRangeStatusToUnit( UnitPointer pTarget, SpellDesc* pSpell )
+RangeStatusPair MoonScriptCreatureAI::GetSpellRangeStatusToUnit( Unit * pTarget, SpellDesc* pSpell )
 {
 	if ( pSpell->mTargetType.mTargetGenerator != TargetGen_Self && pTarget != _unit && (pSpell->mMinRange > 0 || pSpell->mMaxRange > 0) )
 	{
@@ -1131,7 +1131,7 @@
 	return make_pair( RangeStatus_Ok, 0.0f );
 };
 
-UnitPointer MoonScriptCreatureAI::GetTargetForSpell( SpellDesc* pSpell )
+Unit * MoonScriptCreatureAI::GetTargetForSpell( SpellDesc* pSpell )
 {
 	//Check if run-to-target cache and return it if its valid
 	if ( mRunToTargetCache && mRunToTargetSpellCache == pSpell && IsValidUnitTarget( mRunToTargetCache, TargetFilter_None ) )
@@ -1168,11 +1168,11 @@
 	};
 };
 
-UnitPointer MoonScriptCreatureAI::GetBestPlayerTarget( TargetFilter pTargetFilter, float pMinRange, float pMaxRange )
+Unit * MoonScriptCreatureAI::GetBestPlayerTarget( TargetFilter pTargetFilter, float pMinRange, float pMaxRange )
 {
 	//Build potential target list
 	UnitArray TargetArray;
-	for ( unordered_set< PlayerPointer >::iterator PlayerIter = _unit->GetInRangePlayerSetBegin(); PlayerIter != _unit->GetInRangePlayerSetEnd(); ++PlayerIter ) 
+	for ( unordered_set< Player * >::iterator PlayerIter = _unit->GetInRangePlayerSetBegin(); PlayerIter != _unit->GetInRangePlayerSetEnd(); ++PlayerIter ) 
 	{ 
 		if ( IsValidUnitTarget( *PlayerIter, pTargetFilter, pMinRange, pMaxRange ) )
 			TargetArray.push_back( TO_UNIT( *PlayerIter ) );
@@ -1181,13 +1181,13 @@
 	return ChooseBestTargetInArray( TargetArray, pTargetFilter );
 };
 
-UnitPointer MoonScriptCreatureAI::GetBestUnitTarget( TargetFilter pTargetFilter, float pMinRange, float pMaxRange )
+Unit * MoonScriptCreatureAI::GetBestUnitTarget( TargetFilter pTargetFilter, float pMinRange, float pMaxRange )
 {
 	//Build potential target list
 	UnitArray TargetArray;
 	if ( pTargetFilter & TargetFilter_Friendly )
 	{
-		for ( unordered_set< ObjectPointer >::iterator ObjectIter = _unit->GetInRangeSetBegin(); ObjectIter != _unit->GetInRangeSetEnd(); ++ObjectIter )
+		for ( unordered_set< Object * >::iterator ObjectIter = _unit->GetInRangeSetBegin(); ObjectIter != _unit->GetInRangeSetEnd(); ++ObjectIter )
 		{
 			if ( IsValidUnitTarget( *ObjectIter, pTargetFilter, pMinRange, pMaxRange ) )
 				TargetArray.push_back( TO_UNIT( *ObjectIter ) );
@@ -1198,7 +1198,7 @@
 	}
 	else
 	{
-		for ( unordered_set< ObjectPointer >::iterator ObjectIter = _unit->GetInRangeOppFactsSetBegin(); ObjectIter != _unit->GetInRangeOppFactsSetEnd(); ++ObjectIter )
+		for ( unordered_set< Object * >::iterator ObjectIter = _unit->GetInRangeOppFactsSetBegin(); ObjectIter != _unit->GetInRangeOppFactsSetEnd(); ++ObjectIter )
 		{
 			if ( IsValidUnitTarget( *ObjectIter, pTargetFilter, pMinRange, pMaxRange ) )
 				TargetArray.push_back( TO_UNIT( *ObjectIter ) );
@@ -1208,7 +1208,7 @@
 	return ChooseBestTargetInArray( TargetArray, pTargetFilter );
 };
 
-UnitPointer MoonScriptCreatureAI::ChooseBestTargetInArray( UnitArray& pTargetArray, TargetFilter pTargetFilter )
+Unit * MoonScriptCreatureAI::ChooseBestTargetInArray( UnitArray& pTargetArray, TargetFilter pTargetFilter )
 {
 	//If only one possible target, return it
 	if ( pTargetArray.size() == 1 )
@@ -1226,9 +1226,9 @@
 	return ( pTargetArray.size() > 1 ) ? pTargetArray[ RandomUInt( ( uint32 )pTargetArray.size() - 1 ) ] : NULLUNIT;
 };
 
-UnitPointer MoonScriptCreatureAI::GetNearestTargetInArray(UnitArray& pTargetArray)
+Unit * MoonScriptCreatureAI::GetNearestTargetInArray(UnitArray& pTargetArray)
 {
-	UnitPointer NearestUnit = NULLUNIT;
+	Unit * NearestUnit = NULLUNIT;
 	float Distance, NearestDistance = 99999;
 	for ( UnitArray::iterator UnitIter = pTargetArray.begin(); UnitIter != pTargetArray.end(); ++UnitIter )
 	{
@@ -1243,11 +1243,11 @@
 	return NearestUnit;
 };
 
-UnitPointer MoonScriptCreatureAI::GetSecondMostHatedTargetInArray( UnitArray& pTargetArray )
+Unit * MoonScriptCreatureAI::GetSecondMostHatedTargetInArray( UnitArray& pTargetArray )
 {
-	UnitPointer	TargetUnit = NULLUNIT;
-	UnitPointer	MostHatedUnit = NULLUNIT;
-	UnitPointer	CurrentTarget = TO_UNIT( _unit->GetAIInterface()->GetNextTarget() );
+	Unit *	TargetUnit = NULLUNIT;
+	Unit *	MostHatedUnit = NULLUNIT;
+	Unit *	CurrentTarget = TO_UNIT( _unit->GetAIInterface()->GetNextTarget() );
 	uint32	Threat = 0, HighestThreat = 0;
 	for ( UnitArray::iterator UnitIter = pTargetArray.begin(); UnitIter != pTargetArray.end(); ++UnitIter )
 	{
@@ -1266,7 +1266,7 @@
 	return MostHatedUnit;
 };
 
-bool MoonScriptCreatureAI::IsValidUnitTarget( ObjectPointer pObject, TargetFilter pFilter, float pMinRange, float pMaxRange )
+bool MoonScriptCreatureAI::IsValidUnitTarget( Object * pObject, TargetFilter pFilter, float pMinRange, float pMaxRange )
 {
 	//Make sure its a valid unit
 	if ( !pObject->IsUnit() )
@@ -1274,7 +1274,7 @@
 	if ( pObject->GetInstanceID() != _unit->GetInstanceID() )
 		return false;
 
-	UnitPointer UnitTarget = TO_UNIT( pObject );
+	Unit * UnitTarget = TO_UNIT( pObject );
 	//Skip dead ( if required ), feign death or invisible targets
 	if ( pFilter & TargetFilter_Corpse )
 	{
@@ -1335,7 +1335,7 @@
 	return true; //This is a valid unit target
 };
 
-void MoonScriptCreatureAI::PushRunToTargetCache( UnitPointer pTarget, SpellDesc* pSpell, RangeStatusPair pRangeStatus )
+void MoonScriptCreatureAI::PushRunToTargetCache( Unit * pTarget, SpellDesc* pSpell, RangeStatusPair pRangeStatus )
 {
 	if ( mRunToTargetCache != pTarget )
 	{
@@ -1376,7 +1376,7 @@
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //Class MoonScriptBossAI
-MoonScriptBossAI::MoonScriptBossAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+MoonScriptBossAI::MoonScriptBossAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 {
 	mPhaseIndex = -1;
 	mEnrageSpell = NULL;
@@ -1428,7 +1428,7 @@
 	mEnrageTimerDuration = pTriggerMilliseconds;
 }
 
-void MoonScriptBossAI::OnCombatStart(UnitPointer pTarget)
+void MoonScriptBossAI::OnCombatStart(Unit * pTarget)
 {
 	SetPhase(1);
 	if( mEnrageSpell && mEnrageTimerDuration > 0 )
@@ -1439,7 +1439,7 @@
 	MoonScriptCreatureAI::OnCombatStart(pTarget);
 }
 
-void MoonScriptBossAI::OnCombatStop(UnitPointer pTarget)
+void MoonScriptBossAI::OnCombatStop(Unit * pTarget)
 {
 	SetPhase(1);
 	RemoveTimer(mEnrageTimer);
@@ -1460,12 +1460,12 @@
 //Premade Spell Functions
 #define SPELLFUNC_VANISH 24699
 
-void SpellFunc_ClearHateList(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_ClearHateList(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	pCreatureAI->ClearHateList();
 }
 
-void SpellFunc_Disappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Disappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	pCreatureAI->ClearHateList();
 	pCreatureAI->SetCanMove(false);
@@ -1473,7 +1473,7 @@
 	pCreatureAI->ApplyAura(SPELLFUNC_VANISH);
 }
 
-void SpellFunc_Reappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Reappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	pCreatureAI->SetCanMove(true);
 	pCreatureAI->SetCanEnterCombat(true);
Index: Trunk/src/Common/Base.h
===================================================================
--- Trunk/src/Common/Base.h	(revision 896)
+++ Trunk/src/Common/Base.h	(working copy)
@@ -172,10 +172,10 @@
 class MoonScriptCreatureAI;
 class MoonScriptBossAI;
 
-typedef void(*SpellFunc)(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+typedef void(*SpellFunc)(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 typedef std::vector<EmoteDesc*> EmoteArray;
-typedef std::vector<PlayerPointer> PlayerArray;
-typedef std::vector<UnitPointer> UnitArray;
+typedef std::vector<Player *> PlayerArray;
+typedef std::vector<Unit *> UnitArray;
 typedef std::vector<SpellDesc*> SpellDescArray;
 typedef std::list<SpellDesc*> SpellDescList;
 typedef std::pair<int32, SpellDesc*> PhaseSpellPair;
@@ -247,7 +247,7 @@
 	bool		mStrictRange;		//If true, creature won't run to (or away of) target, it will instead skip that attack
 	EmoteArray	mEmotes;			//Emotes (random) shouted on spell cast
 	bool		mEnabled;			//True if the spell is enabled for casting, otherwise it will never be scheduled (useful for bosses with phases, etc.)
-	UnitPointer	mPredefinedTarget;	//Pre-defined Target Unit (Only valid with target type TargetGen_Predefined);
+	Unit *	mPredefinedTarget;	//Pre-defined Target Unit (Only valid with target type TargetGen_Predefined);
 
 	//Those are not properties, they are data member used by the evaluation system
 	uint32		mLastCastTime;		//Last time at which the spell casted (used to implement cooldown), set to 0
@@ -258,14 +258,14 @@
 class MoonScriptCreatureAI : public CreatureAIScript
 {
 public:
-	MoonScriptCreatureAI(CreaturePointer pCreature);
+	MoonScriptCreatureAI(Creature * pCreature);
 	virtual ~MoonScriptCreatureAI();
 
 	//Movement
 	bool					GetCanMove();
 	void					SetCanMove(bool pCanMove);
 	void					MoveTo(MoonScriptCreatureAI* pCreature, RangeStatusPair pRangeStatus = make_pair( RangeStatus_TooFar, 0.0f ) );
-	void					MoveTo(UnitPointer pUnit, RangeStatusPair pRangeStatus = make_pair( RangeStatus_TooFar, 0.0f ) );
+	void					MoveTo(Unit * pUnit, RangeStatusPair pRangeStatus = make_pair( RangeStatus_TooFar, 0.0f ) );
 	void					MoveTo(float pX, float pY, float pZ, bool pRun=true);
 	void					MoveToSpawnOrigin();
 	void					StopMovement();
@@ -310,18 +310,18 @@
 
 	//Environment
 	float					GetRange(MoonScriptCreatureAI* pCreature);
-	float					GetRangeToUnit(UnitPointer pUnit);
+	float					GetRangeToUnit(Unit * pUnit);
 
 	//Instances
 	bool					IsHeroic();
 	
-	PlayerPointer 			GetNearestPlayer();
-	GameObjectPointer		GetNearestGameObject(uint32 pGameObjectId=0);
+	Player * 			GetNearestPlayer();
+	GameObject *		GetNearestGameObject(uint32 pGameObjectId=0);
 	MoonScriptCreatureAI*	GetNearestCreature(uint32 pCreatureId=0);
 	MoonScriptCreatureAI*	SpawnCreature(uint32 pCreatureId, bool pForceSameFaction=false);
 	MoonScriptCreatureAI*	SpawnCreature(uint32 pCreatureId, float pX, float pY, float pZ, float pO=0, bool pForceSameFaction=false);
-	UnitPointer				ForceCreatureFind( uint32 pCreatureId );
-	UnitPointer				ForceCreatureFind( uint32 pCreatureId, float pX, float pY, float pZ );
+	Unit *				ForceCreatureFind( uint32 pCreatureId );
+	Unit *				ForceCreatureFind( uint32 pCreatureId, float pX, float pY, float pZ );
 	void					Despawn(uint32 pDelay=0, uint32 pRespawnTime=0);
 
 	//Spells
@@ -367,8 +367,8 @@
 	bool					HasWaypoints();
 
 	//Others
-	void					SetTargetToChannel(UnitPointer pTarget, uint32 pSpellId);
-	UnitPointer				GetTargetToChannel();
+	void					SetTargetToChannel(Unit * pTarget, uint32 pSpellId);
+	Unit *				GetTargetToChannel();
 
 	//Options
 	void					SetAIUpdateFreq(uint32 pUpdateFreq);
@@ -376,17 +376,17 @@
 
 	//Loot
 	void					AddLootToTable(LootTable* pTable, uint32 pItemID, uint32 pChance, uint32 pMinCount, uint32 pMaxCount, uint32 pFFA);
-	void					ClearLoot(UnitPointer pTarget);
-	void					AddLootFromTable(UnitPointer pTarget, LootTable* pTable, uint32 pCount = 1);
-	void					SetGoldLoot(UnitPointer pTarget, uint32 pMinGold, uint32 pMaxGold);
-	void					AddLoot(UnitPointer pTarget, uint32 pItemID, uint32 pMinCount, uint32 pMaxCount, uint32 pFFA);
-	void					AddRareLoot(UnitPointer pTarget, uint32 pItemID, float pPercentChance);
+	void					ClearLoot(Unit * pTarget);
+	void					AddLootFromTable(Unit * pTarget, LootTable* pTable, uint32 pCount = 1);
+	void					SetGoldLoot(Unit * pTarget, uint32 pMinGold, uint32 pMaxGold);
+	void					AddLoot(Unit * pTarget, uint32 pItemID, uint32 pMinCount, uint32 pMaxCount, uint32 pFFA);
+	void					AddRareLoot(Unit * pTarget, uint32 pItemID, float pPercentChance);
 
 	//Reimplemented Events
-	virtual void			OnCombatStart(UnitPointer pTarget);
-	virtual void			OnCombatStop(UnitPointer pTarget);
-	virtual void			OnTargetDied(UnitPointer pTarget);
-	virtual void			OnDied(UnitPointer pKiller);
+	virtual void			OnCombatStart(Unit * pTarget);
+	virtual void			OnCombatStop(Unit * pTarget);
+	virtual void			OnTargetDied(Unit * pTarget);
+	virtual void			OnDied(Unit * pKiller);
 	virtual void			AIUpdate();
 	virtual void			Destroy();
 
@@ -394,19 +394,19 @@
 
 	bool					IsSpellScheduled(SpellDesc* pSpell);
 	bool					CastSpellInternal(SpellDesc* pSpell, uint32 pCurrentTime=0);
-	void					CastSpellOnTarget(UnitPointer pTarget, TargetType pType, SpellEntry* pEntry, bool pInstant);
+	void					CastSpellOnTarget(Unit * pTarget, TargetType pType, SpellEntry* pEntry, bool pInstant);
 	int32					CalcSpellAttackTime(SpellDesc* pSpell);
 	void					CancelAllSpells();
 
-	RangeStatusPair			GetSpellRangeStatusToUnit( UnitPointer pTarget, SpellDesc* pSpell );
-	UnitPointer				GetTargetForSpell( SpellDesc* pSpell );
-	UnitPointer				GetBestPlayerTarget( TargetFilter pFilter = TargetFilter_None, float pMinRange = 0.0f, float pMaxRange = 0.0f );
-	UnitPointer				GetBestUnitTarget( TargetFilter pFilter = TargetFilter_None, float pMinRange = 0.0f, float pMaxRange = 0.0f );
-	UnitPointer				ChooseBestTargetInArray( UnitArray& pTargetArray, TargetFilter pFilter );
-	UnitPointer				GetNearestTargetInArray( UnitArray& pTargetArray );
-	UnitPointer				GetSecondMostHatedTargetInArray( UnitArray& pTargetArray );
-	bool					IsValidUnitTarget( ObjectPointer pObject, TargetFilter pFilter, float pMinRange = 0.0f, float pMaxRange = 0.0f  );
-	void					PushRunToTargetCache( UnitPointer pTarget, SpellDesc* pSpell, RangeStatusPair pRangeStatus = make_pair( RangeStatus_TooFar, 0.0f ) );
+	RangeStatusPair			GetSpellRangeStatusToUnit( Unit * pTarget, SpellDesc* pSpell );
+	Unit *				GetTargetForSpell( SpellDesc* pSpell );
+	Unit *				GetBestPlayerTarget( TargetFilter pFilter = TargetFilter_None, float pMinRange = 0.0f, float pMaxRange = 0.0f );
+	Unit *				GetBestUnitTarget( TargetFilter pFilter = TargetFilter_None, float pMinRange = 0.0f, float pMaxRange = 0.0f );
+	Unit *				ChooseBestTargetInArray( UnitArray& pTargetArray, TargetFilter pFilter );
+	Unit *				GetNearestTargetInArray( UnitArray& pTargetArray );
+	Unit *				GetSecondMostHatedTargetInArray( UnitArray& pTargetArray );
+	bool					IsValidUnitTarget( Object * pObject, TargetFilter pFilter, float pMinRange = 0.0f, float pMaxRange = 0.0f  );
+	void					PushRunToTargetCache( Unit * pTarget, SpellDesc* pSpell, RangeStatusPair pRangeStatus = make_pair( RangeStatus_TooFar, 0.0f ) );
 	void					PopRunToTargetCache();
 
 	void					RandomEmote(EmoteArray& pEmoteArray);
@@ -415,7 +415,7 @@
 	SpellDescList			mQueuedSpells;
 	SpellDescList			mScheduledSpells;
 
-	UnitPointer				mRunToTargetCache;
+	Unit *				mRunToTargetCache;
 	SpellDesc*				mRunToTargetSpellCache;
 
 	EmoteArray				mOnCombatStartEmotes;
@@ -435,7 +435,7 @@
 class MoonScriptBossAI : public MoonScriptCreatureAI
 {
 public:
-	MoonScriptBossAI(CreaturePointer pCreature);
+	MoonScriptBossAI(Creature * pCreature);
 	virtual ~MoonScriptBossAI();
 
 	//Basic Interface
@@ -445,8 +445,8 @@
 	void			SetEnrageInfo(SpellDesc* pSpell, int32 pTriggerMilliseconds);
 
 	//Reimplemented Events
-	virtual void	OnCombatStart(UnitPointer pTarget);
-	virtual void	OnCombatStop(UnitPointer pTarget);
+	virtual void	OnCombatStart(Unit * pTarget);
+	virtual void	OnCombatStop(Unit * pTarget);
 	virtual void	AIUpdate();
 
 protected:
@@ -459,9 +459,9 @@
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //Premade Spell Functions
-void SpellFunc_ClearHateList(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
-void SpellFunc_Disappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
-void SpellFunc_Reappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_ClearHateList(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
+void SpellFunc_Disappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
+void SpellFunc_Reappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //STL Utilities
Index: Trunk/src/Common/EasyFunctions.h
===================================================================
--- Trunk/src/Common/EasyFunctions.h	(revision 896)
+++ Trunk/src/Common/EasyFunctions.h	(working copy)
@@ -63,7 +63,7 @@
 #endif
   }
   
-  void WaypointCreate(CreaturePointer pCreature , float x, float y, float z, float o, uint32 waittime, uint32 flags, uint32 modelid)
+  void WaypointCreate(Creature * pCreature , float x, float y, float z, float o, uint32 waittime, uint32 flags, uint32 modelid)
   {
     PrintMessage("Function call: WaypointCreate()");
     if(pCreature == NULL)
@@ -101,7 +101,7 @@
 	
   }
 
-  void EnableWaypoints(CreaturePointer creat)
+  void EnableWaypoints(Creature * creat)
   {
 	  if(!creat)
 		  return;
@@ -111,7 +111,7 @@
 	  creat->GetAIInterface()->SetWaypointMap(creat->m_custom_waypoint_map);
   }
   
-  void DeleteWaypoints(CreaturePointer creat)
+  void DeleteWaypoints(Creature * creat)
   {
     PrintMessage("Function call: DeleteWaypoints()");
     if(creat == NULL)
@@ -131,7 +131,7 @@
     creat->m_custom_waypoint_map->clear();
   }
 
-  CreaturePointer SpawnCreature(PlayerPointer pThis, uint32 entry, float posX, float posY, float posZ, float posO, uint32 duration = 0)
+  Creature * SpawnCreature(Player * pThis, uint32 entry, float posX, float posY, float posZ, float posO, uint32 duration = 0)
   {
     PrintMessage("Function call: SpawnCreature()");
     if(pThis == NULLPLR)
@@ -142,7 +142,7 @@
     if(p == NULL)
       return NULLCREATURE;
 
-    CreaturePointer pCreature = pThis->GetMapMgr()->CreateCreature(entry);
+    Creature * pCreature = pThis->GetMapMgr()->CreateCreature(entry);
     pCreature->m_spawn = 0;
     pCreature->Load(p, posX, posY, posZ);
     pCreature->SetMapId(pThis->GetMapId());
@@ -154,7 +154,7 @@
     return pCreature;
   }
   
-  void DeleteSpawned(CreaturePointer creat)
+  void DeleteSpawned(Creature * creat)
   {
     PrintMessage("Function call: DeleteSpawned()");
     if(creat == NULL)
@@ -164,7 +164,7 @@
     creat->SafeDelete();
   }
 
-  CreaturePointer SpawnCreatureExtended(PlayerPointer pThis, uint32 entry, float posX, 
+  Creature * SpawnCreatureExtended(Player * pThis, uint32 entry, float posX, 
                                          float posY, float posZ, float posO, uint32 faction, 
                                          uint32 duration, bool dis_comb = false, bool dis_mel = false, 
                                          bool dis_target = false)
@@ -178,7 +178,7 @@
 	if(p == NULL)
 		return NULLCREATURE;
 
-    CreaturePointer pCreature  = pThis->GetMapMgr()->CreateCreature(entry);
+    Creature * pCreature  = pThis->GetMapMgr()->CreateCreature(entry);
     pCreature->m_spawn = 0;
     pCreature->Load(p, posX, posY, posZ);
     pCreature->SetMapId(pThis->GetMapId());
@@ -195,7 +195,7 @@
     return pCreature;
   }
   
-  void GameobjectDelete(GameObjectPointer pC, uint32 duration)
+  void GameobjectDelete(GameObject * pC, uint32 duration)
   {
     PrintMessage("Function call: GameobjectDelete()");
     if(pC == NULL)
@@ -204,7 +204,7 @@
 	sEventMgr.AddEvent(pC, &GameObject::ExpireAndDelete, EVENT_GMSCRIPT_EVENT, duration, 1, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT); 
   }
 
-  GameObjectPointer SpawnGameobject(PlayerPointer plr, uint32 entry_id, float x, float y, float z, float o, float scale, float orientation1, float orientation2, float orientation3, float orientation4 )
+  GameObject * SpawnGameobject(Player * plr, uint32 entry_id, float x, float y, float z, float o, float scale, float orientation1, float orientation2, float orientation3, float orientation4 )
   {
     PrintMessage("Function call: SpawnGameobject()");
 	if(plr == NULLPLR)
@@ -214,7 +214,7 @@
 	if(goi == NULL)
 		return NULLGOB;
 
-    GameObjectPointer pC = plr->GetMapMgr()->CreateGameObject(entry_id);
+    GameObject * pC = plr->GetMapMgr()->CreateGameObject(entry_id);
     //pC->spawnid=0;
     pC->m_spawn=0;
     pC->CreateFromProto(entry_id, plr->GetMapId(), (float)x, (float)y, (float)z, (float)o, float(orientation1), float(orientation2), float(orientation3), float(orientation4));
@@ -226,7 +226,7 @@
     return pC;
   }
   
-  void MoveToPlayer(PlayerPointer plr, CreaturePointer creat)
+  void MoveToPlayer(Player * plr, Creature * creat)
   {
     PrintMessage("Function call: MoveToPlayer()");
     if(plr == NULL)
@@ -238,7 +238,7 @@
     creat->GetAIInterface()->MoveTo(plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(), plr->GetOrientation());
   }
 
-  void CreateCustomWaypointMap(CreaturePointer creat)
+  void CreateCustomWaypointMap(Creature * creat)
   {
     PrintMessage("Function call: CreateCustomWaypointMap()");
     if(creat == NULL)
@@ -250,13 +250,13 @@
     creat->GetAIInterface()->SetWaypointMap(creat->m_custom_waypoint_map);
   }
   
-	bool AddItem( uint32 pEntry, PlayerPointer pPlayer, uint32 pCount = 1 )
+	bool AddItem( uint32 pEntry, Player * pPlayer, uint32 pCount = 1 )
 	{
 		PrintMessage( "Function call: AddItem( %u )", pEntry );
 		if ( pPlayer == NULLPLR || pEntry == 0 || pCount == 0 )
 			return false;
 
-		ItemPointer ItemStack = pPlayer->GetItemInterface()->FindItemLessMax( pEntry, pCount, false );
+		Item * ItemStack = pPlayer->GetItemInterface()->FindItemLessMax( pEntry, pCount, false );
 		if ( ItemStack == NULLITEM )
 		{
 			ItemPrototype* ItemProto = ItemPrototypeStorage.LookupEntry( pEntry );
@@ -271,7 +271,7 @@
 			}
 			else
 			{
-				ItemPointer NewItem = objmgr.CreateItem( pEntry, pPlayer );
+				Item * NewItem = objmgr.CreateItem( pEntry, pPlayer );
 				if ( NewItem == NULLITEM )
 					return false;
 
@@ -301,39 +301,39 @@
 		return false;
 	};
   
-  void EventCreatureDelete(CreaturePointer creat, uint32 time)  // Creature and time in ms
+  void EventCreatureDelete(Creature * creat, uint32 time)  // Creature and time in ms
   {
 	  sEventMgr.AddEvent(creat, &Creature::SafeDelete, EVENT_CREATURE_SAFE_DELETE, time, 1, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
   }
 
-  void EventCastSpell(UnitPointer caster, UnitPointer target, uint32 spellid, uint32 time)
+  void EventCastSpell(Unit * caster, Unit * target, uint32 spellid, uint32 time)
   {
 	  sEventMgr.AddEvent(TO_UNIT(caster), &Unit::EventCastSpell, TO_UNIT(target), dbcSpell.LookupEntry(spellid), EVENT_UNK, time, 0, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
   }
 
-  void EventPlaySound(CreaturePointer creat, uint32 id, uint32 time)
+  void EventPlaySound(Creature * creat, uint32 id, uint32 time)
   {
 	  sEventMgr.AddEvent(TO_OBJECT(creat), &Object::PlaySoundToSet, id, EVENT_UNK, time, 1, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
   }
 
-  void EventCreatureSay(CreaturePointer creat, string say,  uint32 time)
+  void EventCreatureSay(Creature * creat, string say,  uint32 time)
   {
 	  sEventMgr.AddEvent(TO_UNIT(creat), &Unit::SendChatMessage, (uint8)CHAT_MSG_MONSTER_SAY, (uint32)LANG_UNIVERSAL, say.c_str(), EVENT_UNIT_CHAT_MSG, time, 1, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
   }
 
-  void EventCreatureYell(CreaturePointer creat, string say,  uint32 time)
+  void EventCreatureYell(Creature * creat, string say,  uint32 time)
   {
 	  sEventMgr.AddEvent(TO_UNIT(creat), &Unit::SendChatMessage, (uint8)CHAT_MSG_MONSTER_YELL, (uint32)LANG_UNIVERSAL, say.c_str(), EVENT_UNIT_CHAT_MSG, time, 1, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
   }
 
-  CreaturePointer getNpcQuester(PlayerPointer plr, uint32 npcid)
+  Creature * getNpcQuester(Player * plr, uint32 npcid)
   {
 	  if( plr == NULL || plr->GetMapMgr() == NULL || plr->GetMapMgr()->GetInterface() == NULL )
 		  return NULLCREATURE;
 	  return plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(), npcid);
   }
 
-  GameObjectPointer getGOQuester(PlayerPointer plr, uint32 goid)
+  GameObject * getGOQuester(Player * plr, uint32 goid)
   {
 	  if( plr == NULL || plr->GetMapMgr() == NULL || plr->GetMapMgr()->GetInterface() == NULL )
 		  return NULLGOB;
Index: Trunk/src/Common/Instance_Base.cpp
===================================================================
--- Trunk/src/Common/Instance_Base.cpp	(revision 896)
+++ Trunk/src/Common/Instance_Base.cpp	(working copy)
@@ -19,7 +19,7 @@
 
 #include "Instance_Base.h"
 
-MoonInstanceScript::MoonInstanceScript( MapMgrPointer pMapMgr ) : InstanceScript( pMapMgr )
+MoonInstanceScript::MoonInstanceScript( MapMgr * pMapMgr ) : InstanceScript( pMapMgr )
 {
 	mUpdateFrequency = DEFAULT_UPDATE_FREQUENCY;
 };
@@ -28,7 +28,7 @@
 {
 };
 
-CreaturePointer MoonInstanceScript::GetCreatureBySqlId( uint32 pSqlId )
+Creature * MoonInstanceScript::GetCreatureBySqlId( uint32 pSqlId )
 {
 	if ( pSqlId == 0 )
 		return NULLCREATURE;
@@ -36,7 +36,7 @@
 	return mInstance->GetSqlIdCreature( pSqlId );
 };
 
-CreaturePointer MoonInstanceScript::GetCreatureByGuid( uint32 pGuid )
+Creature * MoonInstanceScript::GetCreatureByGuid( uint32 pGuid )
 {
 	if ( pGuid == 0 )
 		return NULLCREATURE;
@@ -44,7 +44,7 @@
 	return mInstance->GetCreature( pGuid );
 };
 
-CreaturePointer	MoonInstanceScript::FindClosestCreatureOnMap( uint32 pEntry, float pX, float pY, float pZ )
+Creature *	MoonInstanceScript::FindClosestCreatureOnMap( uint32 pEntry, float pX, float pY, float pZ )
 {
 	CreatureSet Creatures = FindCreaturesOnMap( pEntry );
 
@@ -53,7 +53,7 @@
 	if ( Creatures.size() == 1 )
 		return *( Creatures.begin() );
 
-	CreaturePointer NearestCreature = NULLCREATURE;
+	Creature * NearestCreature = NULLCREATURE;
 	float Distance, NearestDistance = 99999;
 	for ( CreatureSet::iterator Iter = Creatures.begin(); Iter != Creatures.end(); ++Iter )
 	{
@@ -68,15 +68,15 @@
 	return NearestCreature;
 };
 
-CreaturePointer MoonInstanceScript::SpawnCreature( uint32 pEntry, float pX, float pY, float pZ, float pO )
+Creature * MoonInstanceScript::SpawnCreature( uint32 pEntry, float pX, float pY, float pZ, float pO )
 {
-	CreaturePointer NewCreature = mInstance->GetInterface()->SpawnCreature( pEntry, pX, pY, pZ, pO, true, true, NULL, NULL);
+	Creature * NewCreature = mInstance->GetInterface()->SpawnCreature( pEntry, pX, pY, pZ, pO, true, true, NULL, NULL);
 	return NewCreature;
 };
 
-CreaturePointer MoonInstanceScript::SpawnCreature( uint32 pEntry, float pX, float pY, float pZ, float pO, uint32 pFactionId )
+Creature * MoonInstanceScript::SpawnCreature( uint32 pEntry, float pX, float pY, float pZ, float pO, uint32 pFactionId )
 {
-	CreaturePointer NewCreature = mInstance->GetInterface()->SpawnCreature( pEntry, pX, pY, pZ, pO, true, true, NULL, NULL);
+	Creature * NewCreature = mInstance->GetInterface()->SpawnCreature( pEntry, pX, pY, pZ, pO, true, true, NULL, NULL);
 	if ( NewCreature != NULLCREATURE )
 		NewCreature->SetUInt32Value(UNIT_FIELD_FACTIONTEMPLATE, pFactionId);
 
@@ -85,7 +85,7 @@
 
 CreatureSet MoonInstanceScript::FindCreaturesOnMap( uint32 pEntry )
 {
-	CreaturePointer CurrentCreature = NULLCREATURE;
+	Creature * CurrentCreature = NULLCREATURE;
 	CreatureSet ReturnSet;
 	for ( uint32 i = 0; i != mInstance->m_CreatureHighGuid; ++i )
 	{
@@ -100,7 +100,7 @@
 	return ReturnSet;
 };
 
-GameObjectPointer MoonInstanceScript::FindClosestGameObjectOnMap( uint32 pEntry, float pX, float pY, float pZ )
+GameObject * MoonInstanceScript::FindClosestGameObjectOnMap( uint32 pEntry, float pX, float pY, float pZ )
 {
 	GameObjectSet GameObjects = FindGameObjectsOnMap( pEntry );
 
@@ -109,7 +109,7 @@
 	if ( GameObjects.size() == 1 )
 		return *( GameObjects.begin() );
 
-	GameObjectPointer NearestObject = NULLGOB;
+	GameObject * NearestObject = NULLGOB;
 	float Distance, NearestDistance = 99999;
 	for ( GameObjectSet::iterator Iter = GameObjects.begin(); Iter != GameObjects.end(); ++Iter )
 	{
@@ -124,15 +124,15 @@
 	return NearestObject;
 };
 
-GameObjectPointer MoonInstanceScript::SpawnGameObject( uint32 pEntry, float pX, float pY, float pZ, float pO )
+GameObject * MoonInstanceScript::SpawnGameObject( uint32 pEntry, float pX, float pY, float pZ, float pO )
 {
-	GameObjectPointer pNewGO = mInstance->GetInterface()->SpawnGameObject( pEntry, pX, pY, pZ, pO, true, NULL, NULL );
+	GameObject * pNewGO = mInstance->GetInterface()->SpawnGameObject( pEntry, pX, pY, pZ, pO, true, NULL, NULL );
 	return pNewGO;
 };
 
 GameObjectSet MoonInstanceScript::FindGameObjectsOnMap( uint32 pEntry )
 {
-	GameObjectPointer CurrentObject = NULLGOB;
+	GameObject * CurrentObject = NULLGOB;
 	GameObjectSet ReturnSet;
 	for ( GameObjectMap::iterator Iter = mInstance->m_gameObjectStorage.begin(); Iter != mInstance->m_gameObjectStorage.end(); ++Iter )
 	{
@@ -147,7 +147,7 @@
 	return ReturnSet;
 };
 
-GameObjectPointer MoonInstanceScript::GetGameObjectBySqlId( uint32 pSqlId )
+GameObject * MoonInstanceScript::GetGameObjectBySqlId( uint32 pSqlId )
 {
 	if ( pSqlId == 0 )
 		return NULLGOB;
@@ -155,7 +155,7 @@
 	return mInstance->GetSqlIdGameObject( pSqlId );
 };
 
-GameObjectPointer MoonInstanceScript::GetGameObjectByGuid( uint32 pGuid )
+GameObject * MoonInstanceScript::GetGameObjectByGuid( uint32 pGuid )
 {
 	if ( pGuid == 0 )
 		return NULLGOB;
@@ -174,7 +174,7 @@
 	else
 		mGameObjects.insert( GameObjectEntryMap::value_type( pEntry, pState ) );
 
-	GameObjectPointer CurrentObject = NULLGOB;
+	GameObject * CurrentObject = NULLGOB;
 	if ( !pUseQuery )
 	{
 		for ( GameObjectMap::iterator Iter = mInstance->m_gameObjectStorage.begin(); Iter != mInstance->m_gameObjectStorage.end(); ++Iter )
@@ -209,7 +209,7 @@
 	if ( pId == 0 )
 		return;
 
-	GameObjectPointer StateObject = GetGameObjectBySqlId( pId );
+	GameObject * StateObject = GetGameObjectBySqlId( pId );
 	GameObjectEntryMap::iterator Iter;
 	if ( StateObject != NULLGOB )
 	{
@@ -237,7 +237,7 @@
 	};
 };
 
-float MoonInstanceScript::GetRangeToObject( ObjectPointer pObjectA, ObjectPointer pObjectB )
+float MoonInstanceScript::GetRangeToObject( Object * pObjectA, Object * pObjectB )
 {
 	if ( pObjectA == NULLOBJ || pObjectB == NULLOBJ )
 		return 0.0f;
@@ -245,7 +245,7 @@
 	return GetRangeToObject( pObjectA->GetPositionX(), pObjectA->GetPositionY(), pObjectA->GetPositionZ(), pObjectB->GetPositionX(), pObjectB->GetPositionY(), pObjectB->GetPositionZ() );
 };
 
-float MoonInstanceScript::GetRangeToObject( ObjectPointer pObject, float pX, float pY, float pZ )
+float MoonInstanceScript::GetRangeToObject( Object * pObject, float pX, float pY, float pZ )
 {
 	if ( pObject == NULL )
 		return 0.0f;
@@ -272,7 +272,7 @@
 	return mInstance->GetPlayerCount();
 };
 
-PlayerPointer MoonInstanceScript::GetPlayerByGuid( uint32 pGuid )
+Player * MoonInstanceScript::GetPlayerByGuid( uint32 pGuid )
 {
 	if ( pGuid == 0 )
 		return NULLPLR;
@@ -398,19 +398,19 @@
 	};
 };
 
-void MoonInstanceScript::OnPlayerDeath( PlayerPointer pVictim, UnitPointer pKiller )
+void MoonInstanceScript::OnPlayerDeath( Player * pVictim, Unit * pKiller )
 {
 };
 
-void MoonInstanceScript::OnPlayerEnter( PlayerPointer pPlayer )
+void MoonInstanceScript::OnPlayerEnter( Player * pPlayer )
 {
 };
 
-void MoonInstanceScript::OnAreaTrigger( PlayerPointer pPlayer, uint32 pAreaId )
+void MoonInstanceScript::OnAreaTrigger( Player * pPlayer, uint32 pAreaId )
 {
 };
 
-void MoonInstanceScript::OnZoneChange( PlayerPointer pPlayer, uint32 pNewZone, uint32 pOldZone )
+void MoonInstanceScript::OnZoneChange( Player * pPlayer, uint32 pNewZone, uint32 pOldZone )
 {
 };
 
@@ -423,19 +423,19 @@
 	return 0;
 };
 
-void MoonInstanceScript::OnCreatureDeath( CreaturePointer pVictim, UnitPointer pKiller )
+void MoonInstanceScript::OnCreatureDeath( Creature * pVictim, Unit * pKiller )
 {
 };
 
-void MoonInstanceScript::OnCreaturePushToWorld( CreaturePointer pCreature )
+void MoonInstanceScript::OnCreaturePushToWorld( Creature * pCreature )
 {
 };
 
-void MoonInstanceScript::OnGameObjectActivate( GameObjectPointer pGameObject, PlayerPointer pPlayer )
+void MoonInstanceScript::OnGameObjectActivate( GameObject * pGameObject, Player * pPlayer )
 {
 };
 
-void MoonInstanceScript::OnGameObjectPushToWorld( GameObjectPointer pGameObject )
+void MoonInstanceScript::OnGameObjectPushToWorld( GameObject * pGameObject )
 {
 	// Dunno how part of those would happen
 	if ( mGameObjects.size() == 0 || pGameObject == NULLGOB )
@@ -446,16 +446,16 @@
 		pGameObject->SetState( ( *Iter ).second );
 };
 
-GameObjectPointer MoonInstanceScript::GetObjectForOpenLock( PlayerPointer pCaster, SpellPointer pSpell, SpellEntry* pSpellEntry )
+GameObject * MoonInstanceScript::GetObjectForOpenLock( Player * pCaster, Spell * pSpell, SpellEntry* pSpellEntry )
 {
 	return NULLGOB;
 };
 
-void MoonInstanceScript::SetLockOptions( uint32 pEntryId, GameObjectPointer pGameObject )
+void MoonInstanceScript::SetLockOptions( uint32 pEntryId, GameObject * pGameObject )
 {
 };
 
-uint32 MoonInstanceScript::GetRespawnTimeForCreature( uint32 pEntryId, CreaturePointer pCreature)
+uint32 MoonInstanceScript::GetRespawnTimeForCreature( uint32 pEntryId, Creature * pCreature)
 {
 	return 240000;
 };
@@ -576,7 +576,7 @@
 
 	uint32 CurrentId = 0;
 	EncounterState State = State_NotStarted;
-	CreaturePointer Boss = NULLCREATURE;
+	Creature * Boss = NULLCREATURE;
 	unordered_set< uint32 >::iterator Iter;
 	EncounterMap::iterator EncounterIter;
 	for ( size_t i = 0; i < pIds.size(); ++i )
Index: Trunk/src/Common/Instance_Base.h
===================================================================
--- Trunk/src/Common/Instance_Base.h	(revision 896)
+++ Trunk/src/Common/Instance_Base.h	(working copy)
@@ -103,46 +103,46 @@
 typedef std::map< uint32, IdVector >							EntryIdMap;
 typedef std::pair< int32, int32 >								TimerPair;
 typedef std::vector< TimerPair >								TimerArray;
-typedef std::tr1::hash_map< uint32, GameObjectPointer >			GameObjectMap;
-typedef std::tr1::unordered_set< UnitPointer >					UnitSet;
-typedef std::tr1::unordered_set< PlayerPointer >				PlayerSet;
-typedef std::tr1::unordered_set< CreaturePointer >				CreatureSet;
-typedef std::tr1::unordered_set< GameObjectPointer >			GameObjectSet;
+typedef std::tr1::hash_map< uint32, GameObject * >			GameObjectMap;
+typedef std::tr1::unordered_set< Unit * >					UnitSet;
+typedef std::tr1::unordered_set< Player * >				PlayerSet;
+typedef std::tr1::unordered_set< Creature * >				CreatureSet;
+typedef std::tr1::unordered_set< GameObject * >			GameObjectSet;
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //Class MoonInstanceScript
 class MoonInstanceScript : public InstanceScript
 {
 public:
-	MoonInstanceScript( MapMgrPointer pMapMgr );
+	MoonInstanceScript( MapMgr * pMapMgr );
 	virtual ~MoonInstanceScript();
 
 	// Creature
-	CreaturePointer				GetCreatureBySqlId( uint32 pSqlId );
-	CreaturePointer				GetCreatureByGuid( uint32 pGuid );
-	CreaturePointer				FindClosestCreatureOnMap( uint32 pEntry, float pX, float pY, float pZ );
-	CreaturePointer				SpawnCreature( uint32 pEntry, float pX, float pY, float pZ, float pO );
-	CreaturePointer				SpawnCreature( uint32 pEntry, float pX, float pY, float pZ, float pO, uint32 pFactionId );
+	Creature *				GetCreatureBySqlId( uint32 pSqlId );
+	Creature *				GetCreatureByGuid( uint32 pGuid );
+	Creature *				FindClosestCreatureOnMap( uint32 pEntry, float pX, float pY, float pZ );
+	Creature *				SpawnCreature( uint32 pEntry, float pX, float pY, float pZ, float pO );
+	Creature *				SpawnCreature( uint32 pEntry, float pX, float pY, float pZ, float pO, uint32 pFactionId );
 	CreatureSet					FindCreaturesOnMap( uint32 pEntry );
 
 	// GameObject
-	GameObjectPointer			GetGameObjectBySqlId( uint32 pSqlId );
-	GameObjectPointer			GetGameObjectByGuid( uint32 pGuid );
-	GameObjectPointer			FindClosestGameObjectOnMap( uint32 pEntry, float pX, float pY, float pZ );
-	GameObjectPointer			SpawnGameObject( uint32 pEntry, float pX, float pY, float pZ, float pO );
+	GameObject *			GetGameObjectBySqlId( uint32 pSqlId );
+	GameObject *			GetGameObjectByGuid( uint32 pGuid );
+	GameObject *			FindClosestGameObjectOnMap( uint32 pEntry, float pX, float pY, float pZ );
+	GameObject *			SpawnGameObject( uint32 pEntry, float pX, float pY, float pZ, float pO );
 	GameObjectSet				FindGameObjectsOnMap( uint32 pEntry );
 	void						AddGameObjectStateByEntry( uint32 pEntry, GameObjectState pState, bool pUseQuery = false );
 	void						AddGameObjectStateById( uint32 pId, GameObjectState pState );
 
 	// Distance calculation
-	float						GetRangeToObject( ObjectPointer pObjectA, ObjectPointer pObjectB );
-	float						GetRangeToObject( ObjectPointer pObject, float pX, float pY, float pZ );
+	float						GetRangeToObject( Object * pObjectA, Object * pObjectB );
+	float						GetRangeToObject( Object * pObject, float pX, float pY, float pZ );
 	float						GetRangeToObject( float pX1, float pY1, float pZ1, float pX2, float pY2, float pZ2 );
 
 	// Player and instance - reimplementation for easier calling
 	bool						HasPlayers();
 	size_t						GetPlayerCount();
-	PlayerPointer				GetPlayerByGuid( uint32 pGuid );
+	Player *				GetPlayerByGuid( uint32 pGuid );
 	bool						IsCombatInProgress();
 
 	// Timers - reimplementation from MoonScriptCreatureAI
@@ -162,27 +162,27 @@
 	void						SetCellForcedStates( float pMinX, float pMaxX, float pMinY, float pMaxY, bool pActivate = true );
 
 	// Player
-	virtual void				OnPlayerDeath( PlayerPointer pVictim, UnitPointer pKiller );
+	virtual void				OnPlayerDeath( Player * pVictim, Unit * pKiller );
 
 	// Area and AreaTrigger
-	virtual void				OnPlayerEnter( PlayerPointer pPlayer );
-	virtual void				OnAreaTrigger( PlayerPointer pPlayer, uint32 pAreaId );
-	virtual void				OnZoneChange( PlayerPointer pPlayer, uint32 pNewZone, uint32 pOldZone );
+	virtual void				OnPlayerEnter( Player * pPlayer );
+	virtual void				OnAreaTrigger( Player * pPlayer, uint32 pAreaId );
+	virtual void				OnZoneChange( Player * pPlayer, uint32 pNewZone, uint32 pOldZone );
 
 	// Data get / set - idea taken from ScriptDev2
 	virtual void				SetInstanceData( uint32 pType, uint32 pIndex, uint32 pData );
 	virtual uint32				GetInstanceData( uint32 pType, uint32 pIndex );
 
 	// Creature / GameObject
-	virtual void				OnCreatureDeath( CreaturePointer pVictim, UnitPointer pKiller );
-	virtual void				OnCreaturePushToWorld( CreaturePointer pCreature );
-	virtual void				OnGameObjectActivate( GameObjectPointer pGameObject, PlayerPointer pPlayer );
-	virtual void				OnGameObjectPushToWorld( GameObjectPointer pGameObject );
+	virtual void				OnCreatureDeath( Creature * pVictim, Unit * pKiller );
+	virtual void				OnCreaturePushToWorld( Creature * pCreature );
+	virtual void				OnGameObjectActivate( GameObject * pGameObject, Player * pPlayer );
+	virtual void				OnGameObjectPushToWorld( GameObject * pGameObject );
 
 	// Reimplemented events
-	virtual GameObjectPointer	GetObjectForOpenLock( PlayerPointer pCaster, SpellPointer pSpell, SpellEntry* pSpellEntry );
-	virtual void				SetLockOptions( uint32 pEntryId, GameObjectPointer pGameObject );
-	virtual uint32				GetRespawnTimeForCreature( uint32 pEntryId, CreaturePointer pCreature);
+	virtual GameObject *	GetObjectForOpenLock( Player * pCaster, Spell * pSpell, SpellEntry* pSpellEntry );
+	virtual void				SetLockOptions( uint32 pEntryId, GameObject * pGameObject );
+	virtual uint32				GetRespawnTimeForCreature( uint32 pEntryId, Creature * pCreature);
 	virtual void				OnLoad();
 	virtual void				UpdateEvent();
 	virtual void				Destroy();
Index: Trunk/src/EventScripts/Event_DarkPortal.cpp
===================================================================
--- Trunk/src/EventScripts/Event_DarkPortal.cpp	(revision 896)
+++ Trunk/src/EventScripts/Event_DarkPortal.cpp	(working copy)
@@ -33,7 +33,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Outlands Instance Script
 
-OutlandScript::OutlandScript( MapMgrPointer pMapMgr ) : MoonInstanceScript( pMapMgr )
+OutlandScript::OutlandScript( MapMgr * pMapMgr ) : MoonInstanceScript( pMapMgr )
 {
 	// I'm lazy... slower, but simpler
 	SetCellForcedStates( -453.933472f, -28.010971f, 882.065369f, 1280.692871f );
@@ -47,7 +47,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Dark Portal Event Trigger AI
 
-DarkPortalEventTriggerAI::DarkPortalEventTriggerAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+DarkPortalEventTriggerAI::DarkPortalEventTriggerAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	// Trigger settings (added MoveTo to prevent situations when unit falls on first cell loading.
 	MoveTo( _unit->GetSpawnX() + 5.0f, _unit->GetSpawnY(), _unit->GetSpawnZ() );
@@ -608,7 +608,7 @@
 	ResetTimer( mHordeSummonTimer, SPAWN_NEW_UNIT_PORTAL );
 }
 
-void DarkPortalEventTriggerAI::AddUnitToChainAggro( UnitPointer pUnit )
+void DarkPortalEventTriggerAI::AddUnitToChainAggro( Unit * pUnit )
 {
 #ifndef DISABLE_CHAIN_AGGRO
 	if ( pUnit == NULL || !pUnit->IsCreature() || !pUnit->isAlive() || !pUnit->IsInWorld() )
@@ -636,7 +636,7 @@
 				mPitCommander = NULL;
 			else
 			{
-				UnitPointer PitCommander = ForceCreatureFind( CN_PIT_COMMANDER, -249.119995f, 1169.209961f, 41.552101f );
+				Unit * PitCommander = ForceCreatureFind( CN_PIT_COMMANDER, -249.119995f, 1169.209961f, 41.552101f );
 				if ( PitCommander != NULL && PitCommander->isAlive() && TO_CREATURE( PitCommander )->GetScript() != NULL )
 				{
 					mPitCommander = static_cast< PitCommanderAI* >( TO_CREATURE( PitCommander )->GetScript() );
@@ -1008,7 +1008,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Mel Gromm Highmountain AI
 
-MelGrommHighmountainAI::MelGrommHighmountainAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+MelGrommHighmountainAI::MelGrommHighmountainAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( MELGROMM_HIGHMOUNTAIN_EARTH_SHOCK, Target_Current, 8, 0, 10, 0, 20 );
 	AddSpell( MELGROMM_HIGHMOUNTAIN_CHAIN_LIGHTNING, Target_Current, 7, 3, 20, 0, 20 );
@@ -1021,7 +1021,7 @@
 	mLastWP = 0;
 };
 
-void MelGrommHighmountainAI::OnCombatStop( UnitPointer pTarget )
+void MelGrommHighmountainAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( RandomUInt( 3 ) == 1 )
@@ -1079,7 +1079,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Orgrimmar Grunt AI
 
-OrgrimmarGruntAI::OrgrimmarGruntAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+OrgrimmarGruntAI::OrgrimmarGruntAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( ORGRIMMAR_GRUNT_IRON_BITE, Target_Current, 15, 0, 5, 0, 5 );	// is 5 enough?
 	SetWieldWeapon( true );
@@ -1088,7 +1088,7 @@
 	mLastWP = 0;
 };
 
-void OrgrimmarGruntAI::OnCombatStop( UnitPointer pTarget )
+void OrgrimmarGruntAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( HasWaypoints() )
@@ -1152,7 +1152,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Orgrimmar Shaman AI
 
-OrgrimmarShamanAI::OrgrimmarShamanAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+OrgrimmarShamanAI::OrgrimmarShamanAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( ORGRIMMAR_SHAMAN_FLAME_SHOCK, Target_Current, 8, 0, 15, 0, 20 );
 	AddSpell( ORGRIMMAR_SHAMAN_BLOODLUST, Target_RandomFriendly, 6, 0, 10 );
@@ -1164,7 +1164,7 @@
 	mLastWP = 0;
 };
 
-void OrgrimmarShamanAI::OnCombatStop( UnitPointer pTarget )
+void OrgrimmarShamanAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( HasWaypoints() )
@@ -1228,7 +1228,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Darkspear Axe Thrower AI
 
-DarkspearAxeThrowerAI::DarkspearAxeThrowerAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+DarkspearAxeThrowerAI::DarkspearAxeThrowerAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( DARKSPEAR_AXE_THROWER_THROW, Target_Current, 100, 0.5f, 0, 8, 35, true );
 	SetWieldWeapon( true );
@@ -1237,7 +1237,7 @@
 	mLastWP = 0;
 };
 
-void DarkspearAxeThrowerAI::OnCombatStart( UnitPointer pTarget )
+void DarkspearAxeThrowerAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	if ( GetRangeToUnit( pTarget ) >= 8.0f && GetRangeToUnit( pTarget ) <= 35.0f )
@@ -1247,7 +1247,7 @@
 	};
 };
 
-void DarkspearAxeThrowerAI::OnCombatStop( UnitPointer pTarget )
+void DarkspearAxeThrowerAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( HasWaypoints() )
@@ -1265,7 +1265,7 @@
 void DarkspearAxeThrowerAI::AIUpdate()
 {
 	ParentClass::AIUpdate();
-	UnitPointer Target = _unit->GetAIInterface()->GetNextTarget();
+	Unit * Target = _unit->GetAIInterface()->GetNextTarget();
 	if ( Target != NULL )
 	{
 		if ( GetRangeToUnit( Target ) >= 8.0f && GetRangeToUnit( Target ) <= 35.0f )
@@ -1324,7 +1324,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Undercity Mage AI
 
-UndercityMageAI::UndercityMageAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+UndercityMageAI::UndercityMageAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( UNDERCITY_MAGE_ICEBOLT, Target_Current, 60, 0, 0, 0, 100 );
 	AddSpell( UNDERCITY_MAGE_FIREBALL, Target_Current, 25, 3, 10, 0, 100 );
@@ -1335,14 +1335,14 @@
 	mLastWP = 0;
 };
 
-void UndercityMageAI::OnCombatStart( UnitPointer pTarget )
+void UndercityMageAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	SetBehavior( Behavior_Spell );
 	SetCanMove( false );
 };
 
-void UndercityMageAI::OnCombatStop( UnitPointer pTarget )
+void UndercityMageAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( HasWaypoints() )
@@ -1360,7 +1360,7 @@
 void UndercityMageAI::AIUpdate()
 {
 	ParentClass::AIUpdate();
-	UnitPointer Target = _unit->GetAIInterface()->GetNextTarget();
+	Unit * Target = _unit->GetAIInterface()->GetNextTarget();
 	if ( Target != NULL )
 	{
 		if ( GetRangeToUnit( Target ) <= 100.0f )
@@ -1422,7 +1422,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Justinius The Harbinger AI
 
-JustiniusTheHarbingerAI::JustiniusTheHarbingerAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+JustiniusTheHarbingerAI::JustiniusTheHarbingerAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( JUSTINIUS_THE_HARBINGER_FLASH_OF_LIGHT, Target_WoundedFriendly, 8, 1.5, 10, 0, 40 );
 	AddSpellFunc( &SpellFunc_Justinius_Consecration, Target_Self, 6, 0, 5 );
@@ -1436,14 +1436,14 @@
 	mLastWP = 0;
 };
 
-void JustiniusTheHarbingerAI::OnCombatStart( UnitPointer pTarget )
+void JustiniusTheHarbingerAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	Emote( "", Text_Yell, 9705 );
 	_unit->SetUInt32Value( UNIT_NPC_EMOTESTATE, 375 );
 };
 
-void JustiniusTheHarbingerAI::OnCombatStop( UnitPointer pTarget )
+void JustiniusTheHarbingerAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( RandomUInt( 3 ) == 1 )
@@ -1464,7 +1464,7 @@
 bool JustiniusTheHarbingerAI::CanCastConsecration()
 {
 	UnitArray TargetArray;
-	for ( unordered_set< ObjectPointer >::iterator Iter = _unit->GetInRangeOppFactsSetBegin(); Iter != _unit->GetInRangeOppFactsSetEnd(); ++Iter )
+	for ( unordered_set< Object * >::iterator Iter = _unit->GetInRangeOppFactsSetBegin(); Iter != _unit->GetInRangeOppFactsSetEnd(); ++Iter )
 	{
 		if ( IsValidUnitTarget( *Iter, TargetFilter_None ) && GetRangeToUnit( TO_UNIT( *Iter ) ) <= 8.0f  )	// Set from 5 to 8 for better effect
 			TargetArray.push_back( TO_UNIT( *Iter ) );
@@ -1513,7 +1513,7 @@
 	delete this;
 };
 
-void SpellFunc_Justinius_Consecration(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Justinius_Consecration(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	JustiniusTheHarbingerAI *pJustiniusAI = ( pCreatureAI ) ? ( JustiniusTheHarbingerAI* )pCreatureAI : NULL;
 	if ( pJustiniusAI != NULL && pJustiniusAI->mConsecration != NULL )
@@ -1531,7 +1531,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Stormwind Soldier AI
 
-StormwindSoldierAI::StormwindSoldierAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+StormwindSoldierAI::StormwindSoldierAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( STORMWIND_SOLDIER_STRIKE, Target_Current, 15, 0, 5, 0, 5 );	// 5 enough?
 	AddSpell( STORMWIND_SOLDIER_DEMORALIZING_SHOUT, Target_Self, 7, 0, 20 );
@@ -1541,7 +1541,7 @@
 	mLastWP = 0;
 };
 
-void StormwindSoldierAI::OnCombatStop( UnitPointer pTarget )
+void StormwindSoldierAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( HasWaypoints() )
@@ -1605,7 +1605,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Ironforge Paladin AI
 
-IronforgePaladinAI::IronforgePaladinAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+IronforgePaladinAI::IronforgePaladinAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( IRONFORGE_PALADIN_SEAL_OF_SACRIFICE, Target_RandomFriendly, 8, 0, 10 );
 	AddSpell( IRONFORGE_PALADIN_EXORCISM, Target_Current, 7, 0, 0 );
@@ -1616,7 +1616,7 @@
 	mLastWP = 0;
 };
 
-void IronforgePaladinAI::OnCombatStop( UnitPointer pTarget )
+void IronforgePaladinAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( HasWaypoints() )
@@ -1680,7 +1680,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Darnassian Archer AI
 
-DarnassianArcherAI::DarnassianArcherAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+DarnassianArcherAI::DarnassianArcherAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( DARNASSIAN_ARCHER_SHOOT, Target_Current, 100, 0.5f, 0, 8, 35, true );
 	SetWieldWeapon( true );
@@ -1689,7 +1689,7 @@
 	mLastWP = 0;
 }
 
-void DarnassianArcherAI::OnCombatStart( UnitPointer pTarget )
+void DarnassianArcherAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	if ( GetRangeToUnit( pTarget ) >= 8.0f && GetRangeToUnit( pTarget ) <= 35.0f )
@@ -1699,7 +1699,7 @@
 	};
 };
 
-void DarnassianArcherAI::OnCombatStop( UnitPointer pTarget )
+void DarnassianArcherAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( HasWaypoints() )
@@ -1717,7 +1717,7 @@
 void DarnassianArcherAI::AIUpdate()
 {
 	ParentClass::AIUpdate();
-	UnitPointer Target = _unit->GetAIInterface()->GetNextTarget();
+	Unit * Target = _unit->GetAIInterface()->GetNextTarget();
 	if ( Target != NULL )
 	{
 		if ( GetRangeToUnit( Target ) >= 8.0f && GetRangeToUnit( Target ) <= 35.0f )
@@ -1776,7 +1776,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Stormwind Mage AI
 
-StormwindMageAI::StormwindMageAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+StormwindMageAI::StormwindMageAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( STORMWIND_MAGE_FIREBALL, Target_Current, 70, 3, 0, 0, 100 );
 	AddSpell( STORMWIND_MAGE_ARCANE_MISSILES, Target_Current, 15, 5, 10, 0, 100 );
@@ -1787,14 +1787,14 @@
 	mLastWP = 0;
 };
 
-void StormwindMageAI::OnCombatStart( UnitPointer pTarget )
+void StormwindMageAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	SetBehavior( Behavior_Spell );
 	SetCanMove( false );
 };
 
-void StormwindMageAI::OnCombatStop( UnitPointer pTarget )
+void StormwindMageAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( HasWaypoints() )
@@ -1812,7 +1812,7 @@
 void StormwindMageAI::AIUpdate()
 {
 	ParentClass::AIUpdate();
-	UnitPointer Target = _unit->GetAIInterface()->GetNextTarget();
+	Unit * Target = _unit->GetAIInterface()->GetNextTarget();
 	if ( Target != NULL )
 	{
 		if ( GetRangeToUnit( Target ) <= 100.0f )
@@ -1874,7 +1874,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Pit Commander AI
 
-PitCommanderAI::PitCommanderAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+PitCommanderAI::PitCommanderAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( PIT_COMMANDER_RAIN_OF_FIRE, Target_RandomDestination, 7, 9, 15 );
 	AddSpell( PIT_COMMANDER_CLEAVE, Target_Current, 9, 0, 15, 0, 10 );			// Added 10 'cause of size of the unit
@@ -1899,13 +1899,13 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Infernal Siegebreaker AI
 
-InfernalSiegebreakerAI::InfernalSiegebreakerAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+InfernalSiegebreakerAI::InfernalSiegebreakerAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	mSuicide = AddSpell( INFERNAL_SIEGEBREAKER_SUICIDE, Target_Self, 5, 0, 0 );
 	mTriggerAI = NULL;
 };
 
-void InfernalSiegebreakerAI::OnCombatStart( UnitPointer pTarget )
+void InfernalSiegebreakerAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	mSuicide->mEnabled = false;
@@ -1942,7 +1942,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Fel Soldier AI
 
-FelSoldierAI::FelSoldierAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+FelSoldierAI::FelSoldierAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( FEL_SOLDIER_CUTDOWN, Target_Current, 8, 0, 15, 0, 8 );
 	AddSpell( FEL_SODLIER_CLEAVE, Target_Current, 8, 0, 20, 0, 8 );
@@ -1952,7 +1952,7 @@
 	mLastWP = 0;
 };
 
-void FelSoldierAI::OnCombatStop( UnitPointer pTarget )
+void FelSoldierAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	MoveTo( _unit->GetPositionX(), _unit->GetPositionY() + 3.0f, _unit->GetPositionZ() );
@@ -2004,7 +2004,7 @@
 //////////////////////////////////////////////////////////////////////////////////////////////////
 ////////// Wrath Master AI
 
-WrathMasterAI::WrathMasterAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+WrathMasterAI::WrathMasterAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	SetWieldWeapon( true );
 
@@ -2012,7 +2012,7 @@
 	mLastWP = 0;
 };
 
-void WrathMasterAI::OnCombatStop( UnitPointer pTarget )
+void WrathMasterAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	MoveTo( _unit->GetPositionX(), _unit->GetPositionY() + 3.0f, _unit->GetPositionZ() );
Index: Trunk/src/EventScripts/Event_DarkPortal.h
===================================================================
--- Trunk/src/EventScripts/Event_DarkPortal.h	(revision 896)
+++ Trunk/src/EventScripts/Event_DarkPortal.h	(working copy)
@@ -363,7 +363,7 @@
 {
 public:
 	MOONSCRIPT_INSTANCE_FACTORY_FUNCTION( OutlandScript, MoonInstanceScript );
-	OutlandScript( MapMgrPointer pMapMgr );
+	OutlandScript( MapMgr * pMapMgr );
 
 	void Destroy();
 };
@@ -381,7 +381,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( DarkPortalEventTriggerAI, MoonScriptCreatureAI );
-    DarkPortalEventTriggerAI( CreaturePointer pCreature );
+    DarkPortalEventTriggerAI( Creature * pCreature );
 	friend class MelGrommHighmountainAI;
 	friend class OrgrimmarGruntAI;
 	friend class OrgrimmarShamanAI;
@@ -413,7 +413,7 @@
 	void SpawnHordeUnit();
 
 	// Function used to add unit to Chain Aggro Container
-	void AddUnitToChainAggro( UnitPointer pUnit );
+	void AddUnitToChainAggro( Unit * pUnit );
 
 	// Function used to check Pit Commander's state
 	void PitCommanderChecks();
@@ -493,9 +493,9 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( MelGrommHighmountainAI, MoonScriptCreatureAI );
-    MelGrommHighmountainAI( CreaturePointer pCreature );
+    MelGrommHighmountainAI( Creature * pCreature );
 
-    void		OnCombatStop( UnitPointer pTarget );
+    void		OnCombatStop( Unit * pTarget );
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
 
@@ -509,9 +509,9 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( OrgrimmarGruntAI, MoonScriptCreatureAI );
-    OrgrimmarGruntAI( CreaturePointer pCreature );
+    OrgrimmarGruntAI( Creature * pCreature );
 
-	void		OnCombatStop( UnitPointer pTarget );
+	void		OnCombatStop( Unit * pTarget );
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
 
@@ -528,9 +528,9 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( OrgrimmarShamanAI, MoonScriptCreatureAI );
-    OrgrimmarShamanAI( CreaturePointer pCreature );
+    OrgrimmarShamanAI( Creature * pCreature );
 
-	void		OnCombatStop( UnitPointer pTarget );
+	void		OnCombatStop( Unit * pTarget );
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
 
@@ -544,10 +544,10 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( DarkspearAxeThrowerAI, MoonScriptCreatureAI );
-    DarkspearAxeThrowerAI( CreaturePointer pCreature );
+    DarkspearAxeThrowerAI( Creature * pCreature );
 
-	void		OnCombatStart( UnitPointer pTarget );
-	void		OnCombatStop( UnitPointer pTarget );
+	void		OnCombatStart( Unit * pTarget );
+	void		OnCombatStop( Unit * pTarget );
     void		AIUpdate();
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
@@ -564,10 +564,10 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(UndercityMageAI, MoonScriptCreatureAI);
-    UndercityMageAI(CreaturePointer pCreature);
+    UndercityMageAI(Creature * pCreature);
 
-    void		OnCombatStart( UnitPointer pTarget );
-    void		OnCombatStop( UnitPointer pTarget );
+    void		OnCombatStart( Unit * pTarget );
+    void		OnCombatStop( Unit * pTarget );
     void		AIUpdate();
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
@@ -586,16 +586,16 @@
 #define JUSTINIUS_THE_HARBINGER_DIVINE_SHIELD				33581
 #define JUSTINIUS_THE_HARBINGER_GREATER_BLESSING_OF_MIGHT	33564
 
-void SpellFunc_Justinius_Consecration( SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType );
+void SpellFunc_Justinius_Consecration( SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType );
 
 class JustiniusTheHarbingerAI : public MoonScriptCreatureAI
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( JustiniusTheHarbingerAI, MoonScriptCreatureAI );
-    JustiniusTheHarbingerAI( CreaturePointer pCreature );
+    JustiniusTheHarbingerAI( Creature * pCreature );
 
-	void		OnCombatStart( UnitPointer pTarget );
-    void		OnCombatStop( UnitPointer pTarget );
+	void		OnCombatStart( Unit * pTarget );
+    void		OnCombatStop( Unit * pTarget );
 	bool		CanCastConsecration();
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
@@ -612,9 +612,9 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( StormwindSoldierAI, MoonScriptCreatureAI );
-    StormwindSoldierAI( CreaturePointer pCreature );
+    StormwindSoldierAI( Creature * pCreature );
 
-	void		OnCombatStop( UnitPointer pTarget );
+	void		OnCombatStop( Unit * pTarget );
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
 
@@ -630,9 +630,9 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( IronforgePaladinAI, MoonScriptCreatureAI );
-    IronforgePaladinAI( CreaturePointer pCreature );
+    IronforgePaladinAI( Creature * pCreature );
 
-	void		OnCombatStop( UnitPointer pTarget );
+	void		OnCombatStop( Unit * pTarget );
 	void		OnReachWP( uint32 iWaypointId, bool pForwards );
 	void		Destroy();
 
@@ -646,10 +646,10 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( DarnassianArcherAI, MoonScriptCreatureAI );
-    DarnassianArcherAI( CreaturePointer pCreature );
+    DarnassianArcherAI( Creature * pCreature );
 
-	void		OnCombatStart( UnitPointer pTarget );
-	void		OnCombatStop( UnitPointer pTarget );
+	void		OnCombatStart( Unit * pTarget );
+	void		OnCombatStop( Unit * pTarget );
     void		AIUpdate();
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
@@ -666,10 +666,10 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( StormwindMageAI, MoonScriptCreatureAI );
-    StormwindMageAI( CreaturePointer pCreature );
+    StormwindMageAI( Creature * pCreature );
 
-    void		OnCombatStart( UnitPointer pTarget );
-    void		OnCombatStop( UnitPointer pTarget );
+    void		OnCombatStart( Unit * pTarget );
+    void		OnCombatStop( Unit * pTarget );
     void		AIUpdate();
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
@@ -690,7 +690,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( PitCommanderAI, MoonScriptCreatureAI );
-    PitCommanderAI( CreaturePointer pCreature );
+    PitCommanderAI( Creature * pCreature );
 
 	void		Destroy();
 
@@ -703,9 +703,9 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( InfernalSiegebreakerAI, MoonScriptCreatureAI );
-    InfernalSiegebreakerAI( CreaturePointer pCreature );
+    InfernalSiegebreakerAI( Creature * pCreature );
 
-	void		OnCombatStart( UnitPointer pTarget );
+	void		OnCombatStart( Unit * pTarget );
 	void		AIUpdate();
 	void		Destroy();
 
@@ -719,9 +719,9 @@
 class FelSoldierAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( FelSoldierAI, MoonScriptCreatureAI );
-	FelSoldierAI( CreaturePointer pCreature );
+	FelSoldierAI( Creature * pCreature );
 
-	void		OnCombatStop( UnitPointer pTarget );
+	void		OnCombatStop( Unit * pTarget );
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
 
@@ -732,9 +732,9 @@
 class WrathMasterAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( WrathMasterAI, MoonScriptCreatureAI );
-	WrathMasterAI( CreaturePointer pCreature );
+	WrathMasterAI( Creature * pCreature );
 
-	void		OnCombatStop( UnitPointer pTarget );
+	void		OnCombatStop( Unit * pTarget );
 	void		OnReachWP( uint32 pWaypointId, bool pForwards );
 	void		Destroy();
 
Index: Trunk/src/EventScripts/Halloween.cpp
===================================================================
--- Trunk/src/EventScripts/Halloween.cpp	(revision 896)
+++ Trunk/src/EventScripts/Halloween.cpp	(working copy)
@@ -13,9 +13,9 @@
 class BlackCat : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BlackCat, MoonScriptCreatureAI);
-	BlackCat(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) {}
+	BlackCat(Creature * pCreature) : MoonScriptCreatureAI(pCreature) {}
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		pKiller->CastSpell( pKiller, 39477, true );
 		ParentClass::OnDied(pKiller);
@@ -66,7 +66,7 @@
 class HeadlessHorsemanAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(HeadlessHorsemanAI, MoonScriptCreatureAI);
-	HeadlessHorsemanAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	HeadlessHorsemanAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		//Scarlet Monastery Boss
 	}
@@ -78,7 +78,7 @@
 class HeadlessHorsemanFireAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(HeadlessHorsemanFireAI, MoonScriptCreatureAI);
-	HeadlessHorsemanFireAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	HeadlessHorsemanFireAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		_unit->CastSpell( _unit, 42971, true );
 	}
@@ -98,7 +98,7 @@
 class ShadeOfTheHorsemanAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ShadeOfTheHorsemanAI, MoonScriptCreatureAI);
-	ShadeOfTheHorsemanAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadeOfTheHorsemanAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		SetCanEnterCombat(false);
 		_unit->SetUInt32Value(UNIT_FIELD_MOUNTDISPLAYID, 22653);
@@ -156,9 +156,9 @@
 		ParentClass::OnReachWP(iWaypointId, bForwards);
 	}
 
-	void OnDied( UnitPointer pKiller )
+	void OnDied( Unit * pKiller )
 	{
-		GameObjectPointer Pumpkin = sEAS.SpawnGameobject( TO_PLAYER(pKiller), 2883, _unit->GetPositionX()+RandomFloat(5.0f), _unit->GetPositionY()+RandomFloat(5.0f), _unit->GetPositionZ(), 0, 1, 0, 0, 0, 0 );
+		GameObject * Pumpkin = sEAS.SpawnGameobject( TO_PLAYER(pKiller), 2883, _unit->GetPositionX()+RandomFloat(5.0f), _unit->GetPositionY()+RandomFloat(5.0f), _unit->GetPositionZ(), 0, 1, 0, 0, 0, 0 );
 		if(Pumpkin != NULL)
 			_unit->CastSpell(Pumpkin->GetGUID(), 42277, true );
 
@@ -176,7 +176,7 @@
 class HeadlessHorsemanWispInvisAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(HeadlessHorsemanWispInvisAI, MoonScriptCreatureAI);
-	HeadlessHorsemanWispInvisAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature){}
+	HeadlessHorsemanWispInvisAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature){}
 
 	void AIUpdate()
 	{
@@ -209,10 +209,10 @@
 class WaterBarrel : public GameObjectAIScript
 {
 public:
-	WaterBarrel(GameObjectPointer  goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new WaterBarrel(GO); }
+	WaterBarrel(GameObject *  goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new WaterBarrel(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		SlotResult slotresult;
 		ItemPrototype *proto = ItemPrototypeStorage.LookupEntry( 32971 );
@@ -230,7 +230,7 @@
 		{
 			if( pPlayer->GetItemInterface()->GetItemCount( 32971, false ) == 0 )
 			{
-				ItemPointer itm = objmgr.CreateItem( 32971, pPlayer );
+				Item * itm = objmgr.CreateItem( 32971, pPlayer );
 				pPlayer->GetItemInterface()->SafeAddItem( itm, slotresult.ContainerSlot, slotresult.Slot);
 			}
 			else
Index: Trunk/src/EventScripts/WinterVeil.cpp
===================================================================
--- Trunk/src/EventScripts/WinterVeil.cpp	(revision 896)
+++ Trunk/src/EventScripts/WinterVeil.cpp	(working copy)
@@ -11,8 +11,8 @@
 class PX238WinterWondervolt : public GameObjectAIScript
 {
 public:
-	PX238WinterWondervolt(GameObjectPointer  goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new PX238WinterWondervolt(GO); }
+	PX238WinterWondervolt(GameObject *  goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new PX238WinterWondervolt(GO); }
 
 	void OnSpawn()
 	{
@@ -21,7 +21,7 @@
 
 	void AIUpdate()
 	{
-		PlayerPointer plr = _gameobject->GetMapMgr()->GetInterface()->GetPlayerNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ() );
+		Player * plr = _gameobject->GetMapMgr()->GetInterface()->GetPlayerNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ() );
 		if( !plr )
 			return;
 
@@ -32,7 +32,7 @@
 	}
 };
 
-void WinterReveler(PlayerPointer pPlayer, UnitPointer pUnit )
+void WinterReveler(Player * pPlayer, Unit * pUnit )
 {
 	if( pUnit->GetEntry() == 15760 )
 	{
@@ -81,7 +81,7 @@
 		}
 		else
 		{
-			ItemPointer itm = objmgr.CreateItem( Winteritem, pPlayer );
+			Item * itm = objmgr.CreateItem( Winteritem, pPlayer );
 			itm->SetUInt32Value(ITEM_FIELD_STACK_COUNT, 5);
 			pPlayer->GetItemInterface()->SafeAddItem( itm, slotresult.ContainerSlot, slotresult.Slot);
 			pUnit->CastSpell( pPlayer, 26218, true );
@@ -89,7 +89,7 @@
 	}
 }
 
-void WinterVeilEmote(PlayerPointer pPlayer, uint32 Emote, UnitPointer pUnit)
+void WinterVeilEmote(Player * pPlayer, uint32 Emote, Unit * pUnit)
 {
 	pUnit = pPlayer->GetMapMgr()->GetUnit(pPlayer->GetSelection());
 	if (!pUnit || !pUnit->isAlive() || pUnit->GetAIInterface()->GetNextTarget())
Index: Trunk/src/ExtraScripts/NeutralGuards.cpp
===================================================================
--- Trunk/src/ExtraScripts/NeutralGuards.cpp	(revision 896)
+++ Trunk/src/ExtraScripts/NeutralGuards.cpp	(working copy)
@@ -5,16 +5,16 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(NeutralGuard);
-	NeutralGuard(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	NeutralGuard(Creature * pCreature) : CreatureAIScript(pCreature) {}
 };
 
 class ShatteredSunSpawner : public CreatureAIScript
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ShatteredSunSpawner);
-	ShatteredSunSpawner(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	ShatteredSunSpawner(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		if (mTarget != NULL && mTarget->IsPlayer())
 		{
@@ -23,7 +23,7 @@
 				float x=mTarget->GetPositionX() + RandomUInt(20) - 10;
 				float y=mTarget->GetPositionY() + RandomUInt(20) - 10;
 				float z=mTarget->GetPositionZ();
-				CreaturePointer guard=_unit->GetMapMgr()->GetInterface()->SpawnCreature(26253, x, y, z, 0, true, false, _unit->GetUInt32Value(UNIT_FIELD_FACTIONTEMPLATE), 50);
+				Creature * guard=_unit->GetMapMgr()->GetInterface()->SpawnCreature(26253, x, y, z, 0, true, false, _unit->GetUInt32Value(UNIT_FIELD_FACTIONTEMPLATE), 50);
 
 				if (guard != NULL)
 				{
Index: Trunk/src/GossipScripts/Gossip_Battlemaster.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Battlemaster.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Battlemaster.cpp	(working copy)
@@ -23,7 +23,7 @@
 class WarsongGulchBattlemaster : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         uint32 Team = plr->GetTeam();
@@ -50,7 +50,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
         // Send battleground list.
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
@@ -68,7 +68,7 @@
 class ArathiBasinBattlemaster : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         uint32 Team = plr->GetTeam();
@@ -95,7 +95,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		// Send battleground list.
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
@@ -113,7 +113,7 @@
 class AlteracValleyBattlemaster : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
         GossipMenu *Menu;
         uint32 Team = plr->GetTeam();
@@ -140,7 +140,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		// Send battleground list.
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
@@ -158,7 +158,7 @@
 class EyeOfTheStormBattlemaster : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         uint32 Team = plr->GetTeam();
@@ -185,7 +185,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
         // Send battleground list.
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
Index: Trunk/src/GossipScripts/Gossip_BoreanTundra.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_BoreanTundra.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_BoreanTundra.cpp	(working copy)
@@ -4,7 +4,7 @@
 class TiareGossipScript : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1, Plr);
@@ -12,9 +12,9 @@
 		Menu->SendTo(Plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
     {
-		CreaturePointer Tiare = TO_CREATURE((pObject));		
+		Creature * Tiare = TO_CREATURE((pObject));		
 		plr->Gossip_Complete();
 		Tiare->CastSpell(plr, dbcSpell.LookupEntry(50135), true);
 	}			
@@ -28,7 +28,7 @@
 class SurristraszGossipScript : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1, plr);
@@ -37,9 +37,9 @@
 		Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
     {
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pCreature==NULLCREATURE)
 			return;
 
Index: Trunk/src/GossipScripts/Gossip_DarkmoonFaire.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_DarkmoonFaire.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_DarkmoonFaire.cpp	(working copy)
@@ -18,7 +18,7 @@
 class SetupCarnies_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
 		int randGossip;
@@ -46,7 +46,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
@@ -69,7 +69,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(SetupCarnies_Bark);
-	SetupCarnies_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	SetupCarnies_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(120000); 			// Start initial update after: 2mins
 	}
@@ -113,7 +113,7 @@
 class ActiveCarnies_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
 		int randGossip;
@@ -141,7 +141,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
@@ -164,7 +164,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ActiveCarnies_Bark);
-	ActiveCarnies_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	ActiveCarnies_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(120000); 			// Start initial update after: 2mins
 	}
@@ -203,7 +203,7 @@
 class Burth_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		GossipMenu *Menu;
 		
@@ -248,7 +248,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
@@ -277,7 +277,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Flik_Bark);
-	Flik_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	Flik_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(180000); 			// Start initial update after: 3mins
 	}
@@ -316,7 +316,7 @@
 class FliksFrog_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		GossipMenu *Menu;
 		
@@ -336,7 +336,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
@@ -365,7 +365,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(GevasGrimegate_Bark);
-	GevasGrimegate_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	GevasGrimegate_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(60000); 			// Start initial update after: 1mins
 	}
@@ -410,7 +410,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Lhara_Bark);
-	Lhara_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	Lhara_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(90000); 			// Start initial update after: 1.5mins
 	}
@@ -449,7 +449,7 @@
 class MaximaBlastenheimer_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		GossipMenu *Menu;
 		
@@ -460,7 +460,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {		
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
@@ -493,7 +493,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Morja_Bark);
-	Morja_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	Morja_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(240000); 			// Start initial update after: 4mins
 	}
@@ -514,7 +514,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(MusicDoodad);
-	MusicDoodad(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	MusicDoodad(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(1000); 			// Get that music playing right away!
 	}
@@ -534,7 +534,7 @@
 class ProfessorThaddeusPaleo_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 60016, plr);
@@ -547,10 +547,10 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		GossipMenu *Menu;
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
 		
@@ -628,7 +628,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ProfessorThaddeusPaleo_Bark);
-	ProfessorThaddeusPaleo_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	ProfessorThaddeusPaleo_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(210000); 			// Start initial update after: 3.5mins
 	}
@@ -672,7 +672,7 @@
 class Sayge_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		GossipMenu *Menu;
 		// Check to see if the player already has a buff from Sayge.
@@ -690,10 +690,10 @@
 			Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		GossipMenu *Menu;
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
 		
@@ -890,7 +890,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Sayge_Bark);
-	Sayge_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	Sayge_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(135000); 			// Start initial update after: 2.25mins
 	}
@@ -929,7 +929,7 @@
 class SelinaDourman_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		GossipMenu *Menu;
 		
@@ -943,10 +943,10 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		GossipMenu * Menu;
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
 		
@@ -1010,7 +1010,7 @@
 class SilasDarkmoon_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		GossipMenu *Menu;
 		
@@ -1021,10 +1021,10 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		GossipMenu * Menu;
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
 		
@@ -1047,7 +1047,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(SilasDarkmoon_Bark);
-	SilasDarkmoon_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	SilasDarkmoon_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(180000); 			// Start initial update after: 3mins
 	}
@@ -1101,7 +1101,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(StampThunderhorn_Bark);
-	StampThunderhorn_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	StampThunderhorn_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(180000); 			// Start initial update after: 3mins
 	}
@@ -1150,7 +1150,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Sylannia_Bark);
-	Sylannia_Bark(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	Sylannia_Bark(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		RegisterAIUpdateEvent(120000); 			// Start initial update after: 2mins
 	}
Index: Trunk/src/GossipScripts/Gossip_Guard.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Guard.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Guard.cpp	(working copy)
@@ -60,7 +60,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 933, Plr);
@@ -85,7 +85,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -344,7 +344,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 3016, Plr);
@@ -366,7 +366,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -548,7 +548,7 @@
             }break;
 		}
 	}
-    void GossipEnd(ObjectPointer pObject, PlayerPointer Plr)
+    void GossipEnd(Object * pObject, Player * Plr)
     {
 
     }
@@ -561,7 +561,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 4259, Plr);
@@ -576,7 +576,7 @@
             Menu->SendTo(Plr);
     }
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -785,7 +785,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 3543, Plr);
@@ -806,7 +806,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -1022,7 +1022,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 4316, Plr);
@@ -1039,7 +1039,7 @@
             Menu->SendTo(Plr);
     }
 	
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -1203,7 +1203,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 9316, Plr);
@@ -1226,7 +1226,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -1503,7 +1503,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 9551, Plr);
@@ -1523,7 +1523,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -1768,7 +1768,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 2593, Plr);
@@ -1789,7 +1789,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -2023,7 +2023,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 3543, Plr);
@@ -2042,7 +2042,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -2245,7 +2245,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 3543, Plr);
@@ -2259,7 +2259,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -2416,7 +2416,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 4037, Plr);
@@ -2430,7 +2430,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -2617,7 +2617,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 2593, Plr);
@@ -2631,7 +2631,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -2810,7 +2810,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 2760, Plr);
@@ -2832,7 +2832,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -3079,7 +3079,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 4287, Plr);
@@ -3094,7 +3094,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -3289,7 +3289,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 2593, Plr);
@@ -3303,7 +3303,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -3499,7 +3499,7 @@
 		delete this;
 	}
 
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 10066, Plr);
@@ -3514,7 +3514,7 @@
             Menu->SendTo(Plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
@@ -3724,7 +3724,7 @@
 	{
 		delete this;
 	}
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 10524, Plr);
@@ -3745,7 +3745,7 @@
             Menu->SendTo(Plr);
     }
 
-   void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+   void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
     {
         GossipMenu * Menu;
         switch(IntId)
Index: Trunk/src/GossipScripts/Gossip_Innkeepers.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Innkeepers.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Innkeepers.cpp	(working copy)
@@ -31,18 +31,18 @@
 class InnkeeperGossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend);
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code);
-    void GossipEnd(ObjectPointer pObject, PlayerPointer Plr);
+    void GossipHello(Object * pObject, Player * Plr, bool AutoSend);
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code);
+    void GossipEnd(Object * pObject, Player * Plr);
 	void Destroy()
 	{
 		delete this;
 	}
 };
 
-void InnkeeperGossip::GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+void InnkeeperGossip::GossipHello(Object * pObject, Player * Plr, bool AutoSend)
 {
-	CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+	Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 	if(pCreature==NULLCREATURE)
 		return;
 
@@ -75,9 +75,9 @@
 #define SendQuickMenu(textid) objmgr.CreateGossipMenuForPlayer(&Menu, pCreature->GetGUID(), textid, Plr); \
     Menu->SendTo(Plr);
 
-void InnkeeperGossip::GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+void InnkeeperGossip::GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
 {
-	CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+	Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 	if(pCreature==NULLCREATURE)
 		return;
 
@@ -150,7 +150,7 @@
     }
 }
 
-void InnkeeperGossip::GossipEnd(ObjectPointer pObject, PlayerPointer Plr)
+void InnkeeperGossip::GossipEnd(Object * pObject, Player * Plr)
 {
     GossipScript::GossipEnd(pObject, Plr);
 }
Index: Trunk/src/GossipScripts/Gossip_Moonglade.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Moonglade.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Moonglade.cpp	(working copy)
@@ -25,7 +25,7 @@
 class SilvaFilnaveth_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         if(plr->getClass() == DRUID && plr->getRace() == RACE_NIGHTELF){
@@ -40,9 +40,9 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pCreature==NULLCREATURE)
 			return;
 
@@ -68,7 +68,7 @@
 class BunthenPlainswind_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
 		if(plr->getClass() == DRUID && plr->getRace() == RACE_TAUREN){
@@ -83,9 +83,9 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pCreature==NULLCREATURE)
 			return;
 
Index: Trunk/src/GossipScripts/Gossip_Mulgore.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Mulgore.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Mulgore.cpp	(working copy)
@@ -25,7 +25,7 @@
 class SkornWhitecloud_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 522, plr);
@@ -35,7 +35,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
Index: Trunk/src/GossipScripts/Gossip_Shattrath.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Shattrath.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Shattrath.cpp	(working copy)
@@ -29,7 +29,7 @@
 class ExarchNasuun_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 12227, plr);
@@ -44,7 +44,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
@@ -86,7 +86,7 @@
 class ZephyrGossipScript : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1, Plr);
@@ -94,9 +94,9 @@
 		Menu->SendTo(Plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
     {
-		CreaturePointer Zephyr = TO_CREATURE((pObject));
+		Creature * Zephyr = TO_CREATURE((pObject));
 		if (Zephyr == NULLCREATURE)
 			return;
 
Index: Trunk/src/GossipScripts/Gossip_Stormwind.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Stormwind.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Stormwind.cpp	(working copy)
@@ -25,7 +25,7 @@
 class ArchmageMalin_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 11469, plr);
@@ -37,9 +37,9 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
 		
Index: Trunk/src/GossipScripts/Gossip_Tanaris.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Tanaris.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Tanaris.cpp	(working copy)
@@ -26,7 +26,7 @@
 class CurgleCranklehop_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1519, plr);
@@ -37,7 +37,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
@@ -70,7 +70,7 @@
 class TrentonLighthammer_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1758, plr);
@@ -80,7 +80,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
Index: Trunk/src/GossipScripts/Gossip_Teldrassil.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Teldrassil.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Teldrassil.cpp	(working copy)
@@ -25,7 +25,7 @@
 class ErelasAmbersky_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 2153, plr);
@@ -36,7 +36,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
Index: Trunk/src/GossipScripts/Gossip_Theramore.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Theramore.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Theramore.cpp	(working copy)
@@ -25,7 +25,7 @@
 class CassaCrimsonwing_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 11224, plr);
@@ -36,9 +36,9 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pCreature==NULLCREATURE)
 			return;
 
@@ -65,7 +65,7 @@
 class CaptainGarranVimes_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1793, plr);
@@ -76,7 +76,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
Index: Trunk/src/GossipScripts/Gossip_Trainer.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_Trainer.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_Trainer.cpp	(working copy)
@@ -26,7 +26,7 @@
 class MasterHammersmith : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 7245, plr);
@@ -38,7 +38,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		GossipMenu * Menu;
 		switch (IntId)	// switch and case 0 can be deleted, but I added it, because in future maybe we will have to expand script with more options.
@@ -85,7 +85,7 @@
 					{
 						//pCreature->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Make good use of this knowledge." );
 						SendQuickMenu(20006);
-						CreaturePointer Trainer = TO_CREATURE(pObject);
+						Creature * Trainer = TO_CREATURE(pObject);
 						Trainer->CastSpell(plr, 39099, true);
 						int32 gold = plr->GetUInt32Value(PLAYER_FIELD_COINAGE);
 						plr->SetUInt32Value(PLAYER_FIELD_COINAGE, gold - 600);
@@ -134,7 +134,7 @@
 class MasterSwordsmith : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 7247, plr);
@@ -146,7 +146,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		GossipMenu * Menu;
 		switch (IntId)	// switch and case 0 can be deleted, but I added it, because in future maybe we will have to expand script with more options.
@@ -193,7 +193,7 @@
 					{
 						//pCreature->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Make good use of this knowledge." );
 						SendQuickMenu(20006);
-						CreaturePointer Trainer = TO_CREATURE(pObject);
+						Creature * Trainer = TO_CREATURE(pObject);
 						Trainer->CastSpell(plr, 39097, true);
 						int32 gold = plr->GetUInt32Value(PLAYER_FIELD_COINAGE);
 						plr->SetUInt32Value(PLAYER_FIELD_COINAGE, gold - 600);
@@ -242,7 +242,7 @@
 class MasterAxesmith : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 7243, plr);
@@ -254,7 +254,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		GossipMenu * Menu;
 		switch (IntId)	// switch and case 0 can be deleted, but I added it, because in future maybe we will have to expand script with more options.
@@ -301,7 +301,7 @@
 					{
 						//pCreature->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Make good use of this knowledge." );
 						SendQuickMenu(20006);
-						CreaturePointer Trainer = TO_CREATURE(pObject);
+						Creature * Trainer = TO_CREATURE(pObject);
 						Trainer->CastSpell(plr, 39098, true);
 						int32 gold = plr->GetUInt32Value(PLAYER_FIELD_COINAGE);
 						plr->SetUInt32Value(PLAYER_FIELD_COINAGE, gold - 600);
Index: Trunk/src/GossipScripts/Gossip_WyrmrestTemple.cpp
===================================================================
--- Trunk/src/GossipScripts/Gossip_WyrmrestTemple.cpp	(revision 896)
+++ Trunk/src/GossipScripts/Gossip_WyrmrestTemple.cpp	(working copy)
@@ -26,7 +26,7 @@
 class SCRIPT_DECL WyrmrestTemple_FlightGossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
 		
@@ -56,9 +56,9 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pCreature==NULLCREATURE)
 			return;
 
Index: Trunk/src/InstanceScripts/Instance_Arcatraz.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_Arcatraz.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_Arcatraz.cpp	(working copy)
@@ -35,7 +35,7 @@
 class ArcatrazDefenderAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION( ArcatrazDefenderAI, MoonScriptCreatureAI );
-	ArcatrazDefenderAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+	ArcatrazDefenderAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 	{
 		AddSpell( ARCATRAZ_DEFENDER_PROTEAN_SUBDUAL, Target_Current, 5, 0, 0, 0, 5 );
 		AddSpell( ARCATRAZ_DEFENDER_FLAMING_WEAPON, Target_Current, 15, 0, 0, 0, 5 );
@@ -52,13 +52,13 @@
 class ArcatrazSentinelAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ArcatrazSentinelAI, MoonScriptCreatureAI);
-	ArcatrazSentinelAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ArcatrazSentinelAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ARCATRAZ_SENTINEL_ENERGY_DISCHARGE, Target_Self, 8, 0, 0);
 		mExplode = AddSpell(ARCATRAZ_SENTINEL_EXPLODE, Target_Self, 0, 0, 0);
 	};
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mExplode->mEnabled = true;
 		ParentClass::OnCombatStart(pTarget);
@@ -96,7 +96,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    ArcatrazWarderAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ArcatrazWarderAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -132,7 +132,7 @@
 		spells[3].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -144,11 +144,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -156,7 +156,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -166,7 +166,7 @@
 	{
 		if (_unit->GetAIInterface()->GetNextTarget())
 		{
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			target = _unit->GetAIInterface()->GetNextTarget();
 			if (_unit->GetDistance2dSq(target) >= 100.0f && _unit->GetDistanceSq(target) <= 900.0f)
 			{
@@ -208,7 +208,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())	// I was too lazy to rewrite it =S
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -269,7 +269,7 @@
 class BlackwingDrakonaarAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(BlackwingDrakonaarAI, MoonScriptCreatureAI);
-	BlackwingDrakonaarAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BlackwingDrakonaarAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BLACKWING_DRAKONAAR_BROOD_POWER_BLACK, Target_Self, 7, 0, 0);
 		AddSpell(BLACKWING_DRAKONAAR_MORTAL_STRIKE, Target_Current, 10, 0, 0, 0, 8, true);
@@ -286,7 +286,7 @@
 class BlackwingTricksterAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(BlackwingTricksterAI, MoonScriptCreatureAI);
-	BlackwingTricksterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BlackwingTricksterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BLACKWING_TRICKSTER_FIREBOLT, Target_Current, 10, 1000, 0, 0, 40, true);
 		AddSpell(BLACKWING_TRICKSTER_FIRE_SHIELD, Target_Self, 7, 0, 0);
@@ -303,14 +303,14 @@
 class DeathWatcherAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(DeathWatcherAI, MoonScriptCreatureAI);
-	DeathWatcherAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	DeathWatcherAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(DEATH_WATCHER_TENTACLE_CLEAVE, Target_Current, 10, 0, 0, 0, 8, true);
 		AddSpell(DEATH_WATCHER_DRAIN_LIFE, Target_Current, 8, 0, 0, 0, 20, true);
 		mDeathCount = AddSpell(DEATH_WATCHER_DEATH_COUNT, Target_Self, 0, 0, 0);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mDeathCount->mEnabled = true;
 		ParentClass::OnCombatStart(pTarget);
@@ -339,13 +339,13 @@
 class DefenderCorpseAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(DefenderCorpseAI, MoonScriptCreatureAI);
-	DefenderCorpseAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	DefenderCorpseAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		mCorpseBurst = AddSpell(DEFENDER_CORPSE_CORPSE_BURST, Target_Self, 0, 0, 0);
 		mBloodyExplosion = AddSpell(DEFENDER_CORPSE_BLOODY_EXPLOSION, Target_Self, 0, 0, 0);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		CastSpellNowNoScheduling(mCorpseBurst);
 		CastSpellNowNoScheduling(mBloodyExplosion);
@@ -371,7 +371,7 @@
 class ProteanSpawnAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ProteanSpawnAI, MoonScriptCreatureAI);
-	ProteanSpawnAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ProteanSpawnAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(PROTEAN_SPAWN_ACIDIC_BITE, Target_Current, 8, 0, 0, 0, 8, true);
 	}
@@ -411,7 +411,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    EntropicEyeAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    EntropicEyeAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -447,7 +447,7 @@
 		spells[3].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		CastTime();
@@ -459,7 +459,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -467,7 +467,7 @@
 		CastTime();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
 		CastTime();
@@ -484,7 +484,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -544,7 +544,7 @@
 class EredarDeathbringerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(EredarDeathbringerAI, MoonScriptCreatureAI);
-	EredarDeathbringerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	EredarDeathbringerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(EREDAR_DEATHBRINGER_DIMINISH_SOUL, Target_Current, 7, 0, 0, 0, 8, true);		// Correct target type?
 		AddSpell(EREDAR_DEATHBRINGER_FORCEFUL_CLEAVE, Target_Current, 13, 0, 0, 0, 8, true);
@@ -567,7 +567,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    EredarSoulEaterAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    EredarSoulEaterAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -596,7 +596,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		CastTime();
@@ -608,7 +608,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -616,7 +616,7 @@
 		CastTime();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
 		CastTime();
@@ -633,7 +633,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -695,7 +695,7 @@
 class EthereumLifeBinderAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(EthereumLifeBinderAI, MoonScriptCreatureAI);
-	EthereumLifeBinderAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	EthereumLifeBinderAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ETHEREUM_LIFE_BINDER_BIND, Target_Self, 8, 1500, 0);
 		AddSpell(ETHEREUM_LIFE_BINDER_SHADOW_WORD_PAIN, Target_Current, 7, 0, 0, 0, 30, true);
@@ -712,7 +712,7 @@
 class EthereumSlayerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(EthereumSlayerAI, MoonScriptCreatureAI);
-	EthereumSlayerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	EthereumSlayerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ETHEREUM_SLAYER_IMPARING_POISON, Target_Current, 7, 0, 0, 0, 40, true);
 		AddSpell(ETHEREUM_SLAYER_SLAYER_STRIKE, Target_Current, 12, 0, 0, 0, 8, true);
@@ -731,7 +731,7 @@
 class EthereumWaveCasterAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(EthereumWaveCasterAI, MoonScriptCreatureAI);
-	EthereumWaveCasterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	EthereumWaveCasterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ETHEREUM_WAVE_CASTER_POLYMORPH, Target_RandomPlayer, 7, 1500, 0, 0, 30, true);
 		AddSpell(ETHEREUM_WAVE_CASTER_ARCANE_HASTE, Target_Self, 5, 0, 0);
@@ -748,7 +748,7 @@
 class GargantuanAbyssalAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(GargantuanAbyssalAI, MoonScriptCreatureAI);
-	GargantuanAbyssalAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	GargantuanAbyssalAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(GARGANTUAN_ABYSSAL_FIRE_SHIELD, Target_Self, 7, 0, 0);
 		AddSpell(GARGANTUAN_ABYSSAL_METEOR, Target_RandomPlayerDestination, 8, 3000, 0, 0, 80, true);
@@ -766,7 +766,7 @@
 class GreaterFireElementalAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(GreaterFireElementalAI, MoonScriptCreatureAI);
-	GreaterFireElementalAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	GreaterFireElementalAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(GREATER_FIRE_ELEMENTAL_FIRE_NOVA, Target_Self, 9, 2000, 0);
 		AddSpell(GREATER_FIRE_ELEMENTAL_FIRE_BLAST, Target_Current, 8, 0, 0, 0, 20, true);
@@ -797,7 +797,7 @@
 	SP_AI_Spell spells[10];
 	bool m_spellcheck[10];
 
-    IronjawAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    IronjawAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 10;
 		for(int i=0;i<nrspells;i++)
@@ -876,7 +876,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -888,7 +888,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -896,7 +896,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -913,7 +913,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -987,7 +987,7 @@
 	SP_AI_Spell spells[11];
 	bool m_spellcheck[11];
 
-    MillhouseManastormAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MillhouseManastormAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 11;
 		for(int i=0;i<nrspells;i++)
@@ -1075,7 +1075,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1087,7 +1087,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {/*
 		CastTime();
 		if (_unit->GetUInt32Value(UNIT_FIELD_POWER1) < _unit->GetUInt32Value(UNIT_FIELD_BASE_MANA))
@@ -1102,7 +1102,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1119,7 +1119,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1204,7 +1204,7 @@
 	SP_AI_Spell spells[19];
 	bool m_spellcheck[19];
 
-    NegatonScreamerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    NegatonScreamerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 19;
 		for(int i=0;i<nrspells;i++)
@@ -1346,7 +1346,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1358,7 +1358,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1366,7 +1366,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1383,7 +1383,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1441,7 +1441,7 @@
 class NegatonWarpMasterAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(NegatonWarpMasterAI, MoonScriptCreatureAI);
-	NegatonWarpMasterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	NegatonWarpMasterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(NEGATON_WARP_MASTER_SUMMON_NEGATION_FIELD, Target_Self, 10, 20000, 0);
 	}
@@ -1455,7 +1455,7 @@
 class NegatonFieldAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(NegatonFieldAI, MoonScriptCreatureAI);
-	NegatonFieldAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	NegatonFieldAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		ApplyAura(NEGATION_FIELD);
 	}
@@ -1472,7 +1472,7 @@
 class PhaseHunterAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(PhaseHunterAI, MoonScriptCreatureAI);
-	PhaseHunterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	PhaseHunterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(PHASE_HUNTER_WARP, Target_Self, 5, 0, 0);
 		AddSpell(PHASE_HUNTER_PHASE_BURST, Target_Self, 5, 0, 0);
@@ -1483,7 +1483,7 @@
 	{
 		if (_unit->GetAIInterface()->GetNextTarget() != NULL && _unit->GetCurrentSpell() == NULL)
 		{
-			UnitPointer pUnit = _unit->GetAIInterface()->GetNextTarget();
+			Unit * pUnit = _unit->GetAIInterface()->GetNextTarget();
 			if (_unit->isInBack(pUnit) && _unit->GetDistance2dSq(pUnit) <= 64.0f && RandomUInt(2) == 0)
 			{
 				this->CastSpellOnTarget(pUnit, Target_Current, dbcSpell.LookupEntry(PHASE_HUNTER_BACK_ATTACK), true);
@@ -1502,7 +1502,7 @@
 class ProteanHorrorAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ProteanHorrorAI, MoonScriptCreatureAI);
-	ProteanHorrorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ProteanHorrorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(PROTEAN_HORROR_TOOTHY_BITE, Target_Current, 10, 0, 0, 0, 8, true);
 	}
@@ -1518,7 +1518,7 @@
 class ProteanNightmareAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ProteanNightmareAI, MoonScriptCreatureAI);
-	ProteanNightmareAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ProteanNightmareAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(PROTEAN_NIGHTMARE_INCUBATION, Target_Current, 6, 0, 0, 0, 8, true);
 		AddSpell(PROTEAN_NIGHTMARE_INFECTIOUS_POISON, Target_Self, 10, 0, 0);
@@ -1542,7 +1542,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SulfuronMagmaThrowerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SulfuronMagmaThrowerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -1580,7 +1580,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1592,7 +1592,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1600,7 +1600,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1617,7 +1617,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1683,7 +1683,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SpitefulTemptressAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SpitefulTemptressAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -1721,7 +1721,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1733,7 +1733,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1741,7 +1741,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1758,7 +1758,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1824,7 +1824,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SoulDevourerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SoulDevourerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -1862,7 +1862,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->CastSpell(_unit, spells[0].info, spells[0].instant);
 		CastTime();
@@ -1875,7 +1875,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1883,7 +1883,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1900,7 +1900,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1966,7 +1966,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SkulkingWitchAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SkulkingWitchAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -2007,7 +2007,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		FIRST_ATTACK = 1;
 		CastTime();
@@ -2020,11 +2020,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
 		FIRST_ATTACK = 1;
@@ -2034,7 +2034,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		FIRST_ATTACK = 1;
 		CastTime();
@@ -2046,7 +2046,7 @@
 		if (FIRST_ATTACK && _unit->GetAIInterface()->GetNextTarget())
 		{
 			FIRST_ATTACK = 0;
-			UnitPointer  target = NULLUNIT;
+			Unit *  target = NULLUNIT;
 			target = _unit->GetAIInterface()->GetNextTarget();
 			_unit->CastSpell(target, spells[1].info, spells[1].instant);
 		}
@@ -2063,7 +2063,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2127,7 +2127,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    SightlessEyeAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SightlessEyeAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -2143,7 +2143,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2155,7 +2155,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2163,7 +2163,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2180,7 +2180,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2245,7 +2245,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    SargeronHellcallerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SargeronHellcallerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2275,7 +2275,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2287,7 +2287,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2295,7 +2295,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2312,7 +2312,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2376,7 +2376,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    UnboundDevastatorAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    UnboundDevastatorAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2399,7 +2399,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2411,7 +2411,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2419,7 +2419,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2436,7 +2436,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2501,7 +2501,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    UnchainedDoombringerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    UnchainedDoombringerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2531,7 +2531,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2543,7 +2543,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2551,7 +2551,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2568,7 +2568,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2634,7 +2634,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    WarderCorpseAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    WarderCorpseAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2656,7 +2656,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->CastSpell(_unit, spells[1].info, spells[1].instant);
 		_unit->CastSpell(_unit, spells[0].info, spells[0].instant);
@@ -2670,7 +2670,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2678,7 +2678,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2695,7 +2695,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2763,7 +2763,7 @@
 	SP_AI_Spell spells[6];
 	bool m_spellcheck[6];
 
-    SargeronArcherAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SargeronArcherAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 6;
 		for(int i=0;i<nrspells;i++)
@@ -2814,7 +2814,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2826,7 +2826,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2834,7 +2834,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2844,7 +2844,7 @@
 	{
 		if (_unit->GetAIInterface()->GetNextTarget())
 		{
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			target = _unit->GetAIInterface()->GetNextTarget();
 			if (_unit->GetDistance2dSq(target) >= 100.0f && _unit->GetDistanceSq(target) <= 900.0f)
 			{
@@ -2906,7 +2906,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())	// I was too lazy to rewrite it =S
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2980,7 +2980,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    ZerekethAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ZerekethAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 
 		nrspells = 2;
@@ -3018,7 +3018,7 @@
 			spells[1].attackstoptimer = 1500;
 		}
 	}
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for(int i=0;i<nrspells;i++)
 			spells[i].casttime = spells[i].cooldown;
@@ -3032,18 +3032,18 @@
 		SpeechTimer = t + RandomUInt(10)+40;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
 	}
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		//despawn voids
-		CreaturePointer creature = NULLCREATURE;
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr)
+		Creature * creature = NULLCREATURE;
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr)
 		{
 			if((*itr)->GetTypeId() == TYPEID_UNIT)
 			{
@@ -3063,7 +3063,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -3109,11 +3109,11 @@
 		if(!cp || !ci)
 			return;
 
-		std::vector<PlayerPointer> TargetTable;
-		unordered_set<PlayerPointer>::iterator Itr = _unit->GetInRangePlayerSetBegin();
+		std::vector<Player *> TargetTable;
+		unordered_set<Player *>::iterator Itr = _unit->GetInRangePlayerSetBegin();
 		for(; Itr != _unit->GetInRangePlayerSetEnd(); Itr++) 
 		{ 
-			PlayerPointer RandomTarget = NULLPLR;
+			Player * RandomTarget = NULLPLR;
 			RandomTarget = TO_PLAYER(*Itr);
 			if(RandomTarget && RandomTarget->isAlive() && isHostile(*Itr, _unit))
 				TargetTable.push_back(RandomTarget);
@@ -3125,7 +3125,7 @@
 
 		size_t RandTarget = rand()%TargetTable.size();
 
-		PlayerPointer  RTarget = TargetTable[RandTarget];
+		Player *  RTarget = TargetTable[RandTarget];
 
 		if (!RTarget)
 			return;
@@ -3133,7 +3133,7 @@
 		float vzX = RandomUInt(5) * cos(RandomFloat(6.28f))+RTarget->GetPositionX();
 		float vzY = RandomUInt(5) * cos(RandomFloat(6.28f))+RTarget->GetPositionY();
 		float vzZ = RTarget->GetPositionZ();
-		CreaturePointer VoidZone = _unit->GetMapMgr()->CreateCreature(cp->Id);
+		Creature * VoidZone = _unit->GetMapMgr()->CreateCreature(cp->Id);
 		VoidZone->Load(cp, vzX, vzY, vzZ);
 		VoidZone->SetInstanceID(_unit->GetInstanceID());
 		VoidZone->SetZoneId(_unit->GetZoneId());
@@ -3170,7 +3170,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -3215,10 +3215,10 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<PlayerPointer > TargetTable;
-			for(unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
+			std::vector<Player * > TargetTable;
+			for(unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 			{ 
-				PlayerPointer RandomTarget = NULLPLR;
+				Player * RandomTarget = NULLPLR;
 				RandomTarget = TO_PLAYER(*itr);
 
 				if (RandomTarget && RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast)
@@ -3231,7 +3231,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -3264,7 +3264,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(VoidZoneARC);
-	VoidZoneARC(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	VoidZoneARC(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->Root();
 		_unit->DisableAI();
@@ -3301,7 +3301,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-	DalliahTheDoomsayerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	DalliahTheDoomsayerAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		if(_unit->GetMapMgr()->iInstanceMode == MODE_HEROIC)
 		{
@@ -3349,7 +3349,7 @@
 			
 	}
 	
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 			CastTime();
 			RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -3363,7 +3363,7 @@
 			spells[i].casttime = spells[i].cooldown;
 		}
 		
-		void OnTargetDied(UnitPointer mTarget)
+		void OnTargetDied(Unit * mTarget)
 	{
 			if (_unit->GetHealthPct() > 0)
 			{
@@ -3383,7 +3383,7 @@
 			}
 		}
 		
-		void OnCombatStop(UnitPointer mTarget)
+		void OnCombatStop(Unit * mTarget)
 		{
 			CastTime();
 			_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -3391,14 +3391,14 @@
 			RemoveAIUpdateEvent();
 		}
 		
-		void OnDied(UnitPointer mKiller)
+		void OnDied(Unit * mKiller)
 		{
 			CastTime();
 			RemoveAIUpdateEvent();
 			_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Now I'm really... angry...");	// verification needed
 			_unit->PlaySoundToSet(11093);
 			
-			GameObjectPointer door2 = NULLGOB;
+			GameObject * door2 = NULLGOB;
 			door2 = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 199.969f, 118.5837f, 22.379f, 184319 );
 			if(door2)
 				door2->SetByte(GAMEOBJECT_BYTES_1, 0, 0);
@@ -3449,7 +3449,7 @@
 			if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 			{
 				float comulativeperc = 0;
-				UnitPointer target = NULLUNIT;
+				Unit * target = NULLUNIT;
 				for(int i=0;i<nrspells;i++)
 				{
 					spells[i].casttime--;
@@ -3531,7 +3531,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 	
-		WrathScryerSoccothratesAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+		WrathScryerSoccothratesAI(Creature * pCreature) : CreatureAIScript(pCreature)
 		{
 			nrspells = 5;
 			for(int i=0;i<nrspells;i++)
@@ -3575,7 +3575,7 @@
 			spells[4].attackstoptimer = 1000;
 		}
 		
-		void OnCombatStart(UnitPointer mTarget)
+		void OnCombatStart(Unit * mTarget)
 		{
 			CastTime();
 			RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -3589,7 +3589,7 @@
 			spells[i].casttime = spells[i].cooldown;
 		}
 		
-		void OnTargetDied(UnitPointer mTarget)
+		void OnTargetDied(Unit * mTarget)
 		{
 			if (_unit->GetHealthPct() > 0)
 			{
@@ -3609,7 +3609,7 @@
 			}
 		}
 		
-		void OnCombatStop(UnitPointer mTarget)
+		void OnCombatStop(Unit * mTarget)
 		{
 			CastTime();
 			_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -3617,14 +3617,14 @@
 			RemoveAIUpdateEvent();
 		}
 		
-		void OnDied(UnitPointer mKiller)
+		void OnDied(Unit * mKiller)
 		{
 			CastTime();
 			RemoveAIUpdateEvent();
 			_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Knew this was... the only way out.");	// verified
 			_unit->PlaySoundToSet(11243);
 			
-			GameObjectPointer door1 = NULLGOB;
+			GameObject * door1 = NULLGOB;
 			door1 = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 199.969f, 118.5837f, 22.379f, 184318 );
 			if(door1)
 				door1->SetByte(GAMEOBJECT_BYTES_1, 0, 0);
@@ -3641,7 +3641,7 @@
 			if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 			{
 				float comulativeperc = 0;
-				UnitPointer target = NULLUNIT;
+				Unit * target = NULLUNIT;
 				for(int i=0;i<nrspells;i++)
 				{
 					spells[i].casttime--;
@@ -3711,7 +3711,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    HarbringerSkyrissAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HarbringerSkyrissAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 
 		IllusionCount = 0;
@@ -3758,7 +3758,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		IllusionCount = 0;
 		CastTime();
@@ -3773,7 +3773,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)
 		{
@@ -3793,7 +3793,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		IllusionCount = 0;
 		CastTime();
@@ -3802,7 +3802,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		IllusionCount = 0;
 		CastTime();
@@ -3875,7 +3875,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -3951,7 +3951,7 @@
 public:
 
 	MOONSCRIPT_FACTORY_FUNCTION( WardenMellicharAI, MoonScriptCreatureAI );
-	WardenMellicharAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+	WardenMellicharAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 	{
 		SetCanMove( false );
 		Phase_Timer = -1;
@@ -3969,7 +3969,7 @@
 		orb4 = NULLGOB;
 	}
 	
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		Phase = 0;
 		Phasepart = 0;
@@ -3995,7 +3995,7 @@
 		ParentClass::OnCombatStart(mTarget);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -4009,7 +4009,7 @@
 
 	}
 	
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		
 		RemoveAIUpdateEvent();
@@ -4098,7 +4098,7 @@
 				}
 				else if ( NPC_orb2 && NPC_orb2->IsAlive() )
 				{
-					UnitPointer millhouse = TO_UNIT(ForceCreatureFind(MILLHOUSE_MANASTORM));
+					Unit * millhouse = TO_UNIT(ForceCreatureFind(MILLHOUSE_MANASTORM));
 					if ( millhouse )
 					{
 						sEventMgr.AddEvent(TO_UNIT(millhouse), &Unit::SendChatMessage, (uint8)CHAT_MSG_MONSTER_YELL, (uint32)LANG_UNIVERSAL,  
@@ -4327,11 +4327,11 @@
 	MoonScriptCreatureAI*	NPC_orb3;
 	MoonScriptCreatureAI*	NPC_orb4;
 	MoonScriptCreatureAI*	NPC_orb5;
-	GameObjectPointer shield;
-	GameObjectPointer orb1;
-	GameObjectPointer orb2;
-	GameObjectPointer orb3;
-	GameObjectPointer orb4;
+	GameObject * shield;
+	GameObject * orb1;
+	GameObject * orb2;
+	GameObject * orb3;
+	GameObject * orb4;
 	
 	
 };
Index: Trunk/src/InstanceScripts/Instance_AuchenaiCrypts.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_AuchenaiCrypts.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_AuchenaiCrypts.cpp	(working copy)
@@ -48,7 +48,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SHIRRAKTHEDEADWATCHERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHIRRAKTHEDEADWATCHERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -87,7 +87,7 @@
 		spells[3].cooldown = 15;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -95,14 +95,14 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -118,7 +118,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -167,13 +167,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -191,7 +191,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -235,7 +235,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    AvatarOfTheMartyredAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AvatarOfTheMartyredAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -272,19 +272,19 @@
 		Appear = true;
 	} 
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         //RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -308,7 +308,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -372,7 +372,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    EXARCHMALADAARAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    EXARCHMALADAARAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -419,7 +419,7 @@
 		Avatar = false;
 	} 
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < 4; i++)
 			spells[i].casttime = 0;
@@ -446,7 +446,7 @@
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -466,7 +466,7 @@
 
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -476,7 +476,7 @@
 		Avatar = false;
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "This is... Where... I belong...");
 		_unit->PlaySoundToSet(10518);
@@ -510,7 +510,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -559,13 +559,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -583,7 +583,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
Index: Trunk/src/InstanceScripts/Instance_AzjolNerub.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_AzjolNerub.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_AzjolNerub.cpp	(working copy)
@@ -42,7 +42,7 @@
 class KrikthirAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(KrikthirAI, MoonScriptCreatureAI);
-	KrikthirAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	KrikthirAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		if( !IsHeroic() )
 		{
@@ -74,9 +74,9 @@
 		ParentClass::AIUpdate();
 	};
 	
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
-		GameObjectPointer Doors = GetNearestGameObject(192395);
+		GameObject * Doors = GetNearestGameObject(192395);
 		if( Doors != NULL )
 			Doors->Despawn(0);
 
@@ -106,7 +106,7 @@
 class HadronoxAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(HadronoxAI, MoonScriptCreatureAI);
-	HadronoxAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	HadronoxAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		if( !IsHeroic() )
 		{
@@ -140,7 +140,7 @@
 class GashraAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(GashraAI, MoonScriptCreatureAI);
-	GashraAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	GashraAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(GASHRA_WEBWRAP, Target_RandomPlayer, 22, 0, 35, 0, 0);
 		AddSpell(GASHRA_INFECTEDBITE, Target_ClosestPlayer, 35, 0, 12, 0, 0);
@@ -162,7 +162,7 @@
 class NarjilAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(NarjilAI, MoonScriptCreatureAI);
-	NarjilAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	NarjilAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(NARJIL_WEBWRAP, Target_RandomPlayer, 22, 0, 35, 0, 0);
 		AddSpell(NARJIL_INFECTEDBITE, Target_ClosestPlayer, 35, 0, 12, 0, 0);
@@ -185,7 +185,7 @@
 class SilthikAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(SilthikAI, MoonScriptCreatureAI);
-	SilthikAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	SilthikAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(NARJIL_WEBWRAP, Target_RandomPlayer, 22, 0, 35, 0, 0);
 		AddSpell(NARJIL_INFECTEDBITE, Target_ClosestPlayer, 35, 0, 12, 0, 0);
@@ -207,7 +207,7 @@
 class AnubShadowcasterAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(AnubShadowcasterAI, MoonScriptCreatureAI);
-	AnubShadowcasterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AnubShadowcasterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWCASTER_SHADOWBOLT, Target_RandomPlayer, 36, 0, 8);
 		AddSpell(SHADOWCASTER_SHADOW_NOVA, Target_Self, 22, 0, 15);
@@ -227,7 +227,7 @@
 class AnubSkirmisherAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(AnubSkirmisherAI, MoonScriptCreatureAI);
-	AnubSkirmisherAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AnubSkirmisherAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SKIRMISHER_BACKSTAB, Target_ClosestPlayer, 36, 0, 8);
 	};
@@ -246,7 +246,7 @@
 class AnubVenomancerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(AnubVenomancerAI, MoonScriptCreatureAI);
-	AnubVenomancerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AnubVenomancerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(VENOMANCER_POISONBOLT, Target_RandomPlayer, 25, 0, 6);
 	};
@@ -266,7 +266,7 @@
 class AnubWarriorAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(AnubWarriorAI, MoonScriptCreatureAI);
-	AnubWarriorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AnubWarriorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(WARRIOR_CLAVE, Target_ClosestPlayer, 35, 0, 7);
 		AddSpell(WARRIOR_STRIKE, Target_ClosestPlayer, 10, 0, 10);
@@ -287,7 +287,7 @@
 class AnubWebspinnerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(AnubWebspinnerAI, MoonScriptCreatureAI);
-	AnubWebspinnerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AnubWebspinnerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(WEBSPINNER_WEBSHOT, Target_RandomPlayer, 30, 0, 5);
 		AddSpell(WEBSPINNER_WEBWRAP, Target_RandomPlayer, 20, 0, 12);
Index: Trunk/src/InstanceScripts/Instance_BlackfathomDeeps.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_BlackfathomDeeps.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_BlackfathomDeeps.cpp	(working copy)
@@ -25,7 +25,7 @@
 class GhamooraAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(GhamooraAI, MoonScriptCreatureAI);
-    GhamooraAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    GhamooraAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Trample
 		AddSpell(5568, Target_Self, 12, 0, 0);
@@ -36,7 +36,7 @@
 class LadySarevessAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(LadySarevessAI, MoonScriptCreatureAI);
-    LadySarevessAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    LadySarevessAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Forked Lightning
 		AddSpell(8435, Target_Current, 10, 2, 0);
@@ -52,7 +52,7 @@
 class GelihastAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(GelihastAI, MoonScriptCreatureAI);
-    GelihastAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    GelihastAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Net
 		AddSpell(6533, Target_RandomPlayer, 10, 0, 0);
@@ -63,7 +63,7 @@
 class LorgusJettAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(LorgusJettAI, MoonScriptCreatureAI);
-    LorgusJettAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    LorgusJettAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Lightning Bolt
 		AddSpell(12167, Target_Current, 20, 3, 0);
@@ -74,7 +74,7 @@
 class BaronAquanisAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BaronAquanisAI, MoonScriptCreatureAI);
-    BaronAquanisAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    BaronAquanisAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Frostbolt
 		AddSpell(15043, Target_Current, 20, 3, 0);
@@ -87,10 +87,10 @@
 class FathomStone : public GameObjectAIScript
 {
 public:
-	FathomStone(GameObjectPointer  goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer  GO) { return new FathomStone(GO); }
+	FathomStone(GameObject *  goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject *  GO) { return new FathomStone(GO); }
 
-	void OnActivate(PlayerPointer  pPlayer)
+	void OnActivate(Player *  pPlayer)
 	{
 		if(pPlayer->GetTeam() == 1 && !BaronAquanis) // Horde
 		{
@@ -109,7 +109,7 @@
 class KelrisAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(KelrisAI, MoonScriptCreatureAI);
-    KelrisAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    KelrisAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddEmote(Event_OnCombatStart, "Who dares disturb my meditation?!", Text_Yell, 5802);
 		AddEmote(Event_OnTargetDied, "Dust to dust.", Text_Yell, 5803);
@@ -125,7 +125,7 @@
 class AkumaiAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AkumaiAI, MoonScriptCreatureAI);
-    AkumaiAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    AkumaiAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddEmote(Event_OnCombatStart, "Who dares disturb my meditation?!", Text_Yell); // Should this really be here?
 		AddEmote(Event_OnTargetDied, "Dust to dust.", Text_Yell); // Should this really be here?
@@ -140,7 +140,7 @@
 class MorriduneGossip : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer  plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player *  plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 7247, plr);
@@ -153,7 +153,7 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer  plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player *  plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		switch (IntId)
 		{
Index: Trunk/src/InstanceScripts/Instance_BlackMorass.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_BlackMorass.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_BlackMorass.cpp	(working copy)
@@ -38,7 +38,7 @@
    SP_AI_Spell spells[2];
    bool m_spellcheck[2];
 
-     CHRONOLORDDEJAAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+     CHRONOLORDDEJAAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
       nrspells = 2;
       for(int i=0;i<nrspells;i++)
@@ -67,7 +67,7 @@
       spells[2].attackstoptimer = 1000;*/
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "If you will not cease this foolish quest, then you will die!");
@@ -81,7 +81,7 @@
          spells[i].casttime = spells[i].cooldown;
    }
 
-   void OnTargetDied(UnitPointer mTarget)
+   void OnTargetDied(Unit * mTarget)
     {
       if(_unit->GetHealthPct() > 0)
       {
@@ -103,7 +103,7 @@
       }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
       CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -111,7 +111,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Time ... is on our side.");
@@ -130,7 +130,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
          float comulativeperc = 0;
-          UnitPointer target = NULLUNIT;
+          Unit * target = NULLUNIT;
          for(int i=0;i<nrspells;i++)
          {
             spells[i].casttime--;
@@ -193,7 +193,7 @@
    SP_AI_Spell spells[2];
    bool m_spellcheck[2];
 
-     TEMPORUSAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+     TEMPORUSAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
       nrspells = 2;
       for(int i=0;i<nrspells;i++)
@@ -222,7 +222,7 @@
       spells[2].attackstoptimer = 1000;*/
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "So be it ... you have been warned.");
@@ -236,7 +236,7 @@
          spells[i].casttime = spells[i].cooldown;
    }
 
-   void OnTargetDied(UnitPointer mTarget)
+   void OnTargetDied(Unit * mTarget)
     {
       if(_unit->GetHealthPct() > 0)
       {
@@ -258,7 +258,7 @@
       }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
       CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -266,7 +266,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "My death means ... little.");
@@ -285,7 +285,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
          float comulativeperc = 0;
-          UnitPointer target = NULLUNIT;
+          Unit * target = NULLUNIT;
          for(int i=0;i<nrspells;i++)
          {
             spells[i].casttime--;
@@ -348,7 +348,7 @@
    SP_AI_Spell spells[3];
    bool m_spellcheck[3];
 
-     AEONUSAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+     AEONUSAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
       nrspells = 3;
       for(int i=0;i<nrspells;i++)
@@ -377,7 +377,7 @@
       spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Let us see what fate lays in store...");
@@ -391,7 +391,7 @@
          spells[i].casttime = spells[i].cooldown;
    }
 
-   void OnTargetDied(UnitPointer mTarget)
+   void OnTargetDied(Unit * mTarget)
     {
       if(_unit->GetHealthPct() > 0)
       {
@@ -413,7 +413,7 @@
       }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
       CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -421,7 +421,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "It is only a matter...of time.");
@@ -440,7 +440,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
          float comulativeperc = 0;
-          UnitPointer target = NULLUNIT;
+          Unit * target = NULLUNIT;
          for(int i=0;i<nrspells;i++)
          {
             spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Instance_BlackrockDepths.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_BlackrockDepths.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_BlackrockDepths.cpp	(working copy)
@@ -32,7 +32,7 @@
 	SP_AI_Spell spells[1];
  bool m_spellcheck[1];
 
-    AmbassadorFlamelash(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AmbassadorFlamelash(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -50,7 +50,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -62,11 +62,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -74,7 +74,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -91,7 +91,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -150,7 +150,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    AnubShiah(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AnubShiah(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -177,7 +177,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -189,11 +189,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -201,7 +201,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -218,7 +218,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -276,7 +276,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    BaelGar(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BaelGar(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -303,7 +303,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -315,11 +315,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -327,7 +327,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -344,7 +344,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -402,7 +402,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    EmperorDagranThaurissan(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    EmperorDagranThaurissan(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -438,7 +438,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -450,11 +450,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -462,7 +462,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -479,7 +479,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -537,7 +537,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    Eviscerator(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Eviscerator(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -564,7 +564,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -576,11 +576,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -588,7 +588,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -605,7 +605,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -663,7 +663,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    FineousDarkvire(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FineousDarkvire(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -690,7 +690,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -702,11 +702,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -714,7 +714,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -731,7 +731,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -789,7 +789,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    GeneralAngerforge(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GeneralAngerforge(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -825,7 +825,7 @@
 
       }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -837,11 +837,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -849,7 +849,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -866,7 +866,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -924,7 +924,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    GolemLordArgelmach(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GolemLordArgelmach(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -960,7 +960,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -972,11 +972,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -984,7 +984,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1001,7 +1001,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1059,7 +1059,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    GoroshTheDervish(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GoroshTheDervish(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1086,7 +1086,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1098,11 +1098,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1110,7 +1110,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1127,7 +1127,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1185,7 +1185,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    Grizzle(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Grizzle(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1212,7 +1212,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1224,11 +1224,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1236,7 +1236,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1253,7 +1253,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1311,7 +1311,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    HedrumTheCreeper(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HedrumTheCreeper(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1347,7 +1347,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1359,11 +1359,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1371,7 +1371,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1388,7 +1388,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1445,7 +1445,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    HighInterrogatorGerstahn(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HighInterrogatorGerstahn(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1481,7 +1481,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1493,11 +1493,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1505,7 +1505,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1522,7 +1522,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1579,7 +1579,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    HoundmasterGrebmar(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HoundmasterGrebmar(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1606,7 +1606,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1618,11 +1618,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1630,7 +1630,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1647,7 +1647,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1705,7 +1705,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    HurleyBlackbreath(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HurleyBlackbreath(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1741,7 +1741,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1753,11 +1753,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1765,7 +1765,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1782,7 +1782,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1840,7 +1840,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    LordIncendius(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LordIncendius(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1876,7 +1876,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1888,11 +1888,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1900,7 +1900,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1917,7 +1917,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1975,7 +1975,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    LordRoccor(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LordRoccor(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2011,7 +2011,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2023,11 +2023,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2035,7 +2035,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2052,7 +2052,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2110,7 +2110,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    Magmus(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Magmus(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2136,7 +2136,7 @@
 		     m_spellcheck[1] = true;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2148,11 +2148,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2160,7 +2160,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2177,7 +2177,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2234,7 +2234,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    OkThorTheBreaker(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    OkThorTheBreaker(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2261,7 +2261,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2273,11 +2273,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2285,7 +2285,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2302,7 +2302,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2359,7 +2359,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    Phalanx(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Phalanx(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2395,7 +2395,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2407,11 +2407,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2419,7 +2419,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2436,7 +2436,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2493,7 +2493,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    PrincessMoiraBronzebeard(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PrincessMoiraBronzebeard(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2520,7 +2520,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2532,11 +2532,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2544,7 +2544,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2561,7 +2561,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2618,7 +2618,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    PyromancerLoregrain(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PyromancerLoregrain(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2645,7 +2645,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2657,11 +2657,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2669,7 +2669,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2686,7 +2686,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Instance_BlackrockSpire.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_BlackrockSpire.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_BlackrockSpire.cpp	(working copy)
@@ -42,7 +42,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    GeneralDrakkisathAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GeneralDrakkisathAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 4;
@@ -80,19 +80,19 @@
 		spells[3].attackstoptimer = 1000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -108,7 +108,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -169,7 +169,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    PyroguardEmbersserAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PyroguardEmbersserAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 3;
@@ -201,19 +201,19 @@
 		spells[2].attackstoptimer = 1000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -229,7 +229,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -290,7 +290,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    RendBlackhandAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    RendBlackhandAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 3;
@@ -322,19 +322,19 @@
 		spells[2].attackstoptimer = 1000; // 1sec	
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -350,7 +350,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -410,7 +410,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    GythAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GythAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 3;
@@ -444,21 +444,21 @@
 		HasSummoned = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 
 		HasSummoned = false;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -467,7 +467,7 @@
     {
 		if (!HasSummoned && _unit->GetHealthPct() <= 8)
 		{
-			UnitPointer Warchief = NULLUNIT;
+			Unit * Warchief = NULLUNIT;
 			Warchief =_unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_REND_BLACKHAND, 157.366516f, -419.779358f, 110.472336f, 3.056772f, true, false, 0, 0);
 			if (Warchief != NULL)
 			{
@@ -489,7 +489,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -550,7 +550,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    TheBeastAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TheBeastAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 3;
@@ -582,19 +582,19 @@
 		spells[2].attackstoptimer = 1000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -610,7 +610,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -674,7 +674,7 @@
 	SP_AI_Spell spells[7];
 	bool m_spellcheck[7];
 
-    HighlordOmokkAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HighlordOmokkAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 7;
@@ -730,19 +730,19 @@
 		spells[6].attackstoptimer = 1000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -758,7 +758,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -818,7 +818,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    ShadowHunterVoshAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ShadowHunterVoshAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 3;
@@ -850,19 +850,19 @@
 		spells[2].attackstoptimer = 1000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -878,7 +878,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -941,7 +941,7 @@
 	SP_AI_Spell spells[6];
 	bool m_spellcheck[6];
 
-    WarMasterVooneAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    WarMasterVooneAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 6;
@@ -991,19 +991,19 @@
 		spells[5].attackstoptimer = 1000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -1019,7 +1019,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1080,7 +1080,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    MotherSmolderwebAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MotherSmolderwebAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 4;
@@ -1118,19 +1118,19 @@
 		spells[3].attackstoptimer = 1000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -1146,7 +1146,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1210,7 +1210,7 @@
 	SP_AI_Spell spells[7];
 	bool m_spellcheck[7];
 
-    UrokDoomhowlAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    UrokDoomhowlAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 7;
@@ -1266,19 +1266,19 @@
 		spells[6].attackstoptimer = 1000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -1294,7 +1294,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1354,7 +1354,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    QuartermasterZigrisAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    QuartermasterZigrisAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 3;
@@ -1386,19 +1386,19 @@
 		spells[2].attackstoptimer = 1000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -1414,7 +1414,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1473,7 +1473,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    HalyconAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HalyconAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -1501,21 +1501,21 @@
 		HasSummoned = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 
 		HasSummoned = false;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -1524,7 +1524,7 @@
     {
 		if (!HasSummoned && _unit->GetHealthPct() <= 25)
 		{
-			UnitPointer cGizrul = NULLUNIT;
+			Unit * cGizrul = NULLUNIT;
 			cGizrul =_unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_GIZRUL, -195.100006f, -321.970001f, 65.424400f, 0.016500f, true, false, 0, 0);
 			if (cGizrul != NULL)
 			{
@@ -1546,7 +1546,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1609,7 +1609,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    OverlordWyrmthalakAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    OverlordWyrmthalakAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 4;
@@ -1649,21 +1649,21 @@
 		HasSummoned = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 
 		HasSummoned = false;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -1672,8 +1672,8 @@
     {
 		if (!HasSummoned && _unit->GetHealthPct() <= 50)
 		{
-			UnitPointer Warlord1 = NULLUNIT;
-			UnitPointer Warlord2 = NULLUNIT;
+			Unit * Warlord1 = NULLUNIT;
+			Unit * Warlord2 = NULLUNIT;
 			Warlord1 =_unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_SPIRESTONE_WARLORD, -30.675352f, -493.231750f, 90.610725f, 3.123542f, true, false, 0, 0);//This line makes the unit spawn a creature
 			Warlord2 =_unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_SPIRESTONE_WARLORD, -30.433489f, -479.833923f, 90.535606f, 3.123542f, true, false, 0, 0);//This line makes the unit spawn a creature
 			if (_unit->GetAIInterface()->GetNextTarget() != NULL)
@@ -1700,7 +1700,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
Index: Trunk/src/InstanceScripts/Instance_BloodFurnace.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_BloodFurnace.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_BloodFurnace.cpp	(working copy)
@@ -40,7 +40,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    BILLAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BILLAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -62,7 +62,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -74,7 +74,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -82,7 +82,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -99,7 +99,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -165,7 +165,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SHADOWMOONWARLOCKAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHADOWMOONWARLOCKAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -201,7 +201,7 @@
 		spells[3].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -213,7 +213,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -221,7 +221,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -238,7 +238,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -303,7 +303,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    SHADOWMOONTECHNICIANAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHADOWMOONTECHNICIANAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -333,7 +333,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -345,7 +345,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -353,7 +353,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -370,7 +370,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -436,7 +436,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SHADOWMOONSUMMONERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHADOWMOONSUMMONERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -473,7 +473,7 @@
 		spells[3].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -485,7 +485,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -493,7 +493,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -510,7 +510,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -577,7 +577,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    SHADOWMOONCHANNELERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHADOWMOONCHANNELERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -607,7 +607,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -619,7 +619,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -627,7 +627,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -644,7 +644,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -708,7 +708,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    SHADOWMOONADEPTAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHADOWMOONADEPTAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -730,7 +730,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -742,7 +742,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -750,7 +750,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -767,7 +767,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -831,7 +831,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    SEDUCTRESSAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SEDUCTRESSAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -854,7 +854,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -866,7 +866,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -874,7 +874,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -891,7 +891,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -955,7 +955,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    NASCENTFELORCAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    NASCENTFELORCAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -977,7 +977,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -989,7 +989,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -997,7 +997,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1014,7 +1014,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1079,7 +1079,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    HELLFIREIMPAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HELLFIREIMPAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1108,7 +1108,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1120,7 +1120,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1128,7 +1128,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1145,7 +1145,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1208,7 +1208,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    HELLFIREFAMILIARAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HELLFIREFAMILIARAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1223,7 +1223,7 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1235,11 +1235,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1247,7 +1247,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1264,7 +1264,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1328,7 +1328,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    FELHOUNDMANASTALKERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FELHOUNDMANASTALKERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1351,7 +1351,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1363,7 +1363,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1371,7 +1371,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1388,7 +1388,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1452,7 +1452,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    FELGUARDBRUTEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FELGUARDBRUTEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1475,7 +1475,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1487,7 +1487,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1495,7 +1495,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1512,7 +1512,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1577,7 +1577,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    FELGUARDANNIHILATORAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FELGUARDANNIHILATORAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1609,7 +1609,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1621,7 +1621,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1629,7 +1629,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1646,7 +1646,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1710,7 +1710,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    FELORCNEOPHYTEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FELORCNEOPHYTEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1733,7 +1733,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1746,11 +1746,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1758,7 +1758,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1775,7 +1775,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1838,7 +1838,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    LAUGHINGSKULLWARDENAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LAUGHINGSKULLWARDENAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1854,7 +1854,7 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1867,7 +1867,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1875,7 +1875,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1892,7 +1892,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1958,7 +1958,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    LAUGHINGSKULLROGUEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LAUGHINGSKULLROGUEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -1997,7 +1997,7 @@
 		_unit->CastSpell(_unit, spells[3].info, spells[3].instant);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2012,7 +2012,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->CastSpell(_unit, spells[3].info, spells[3].instant);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2023,7 +2023,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -2040,7 +2040,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2105,7 +2105,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    LAUGHINGSKULLLEGIONNAIREAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LAUGHINGSKULLLEGIONNAIREAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2135,7 +2135,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2151,7 +2151,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2159,7 +2159,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -2176,7 +2176,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2240,7 +2240,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    LAUGHINGSKULLENFORCERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LAUGHINGSKULLENFORCERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2263,7 +2263,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2275,7 +2275,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2283,7 +2283,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -2300,7 +2300,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2371,7 +2371,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    KELIDANTHEBREAKERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    KELIDANTHEBREAKERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2407,7 +2407,7 @@
 		BlastWave = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		spells[2].casttime = (uint32)time(NULL) + 30;
@@ -2439,7 +2439,7 @@
 			spells[i].casttime = 0;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -2458,25 +2458,25 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Good luck... You'll need it.");
 		_unit->PlaySoundToSet(10171);
 		RemoveAIUpdateEvent();
 
-		GameObjectPointer pDoor = NULLGOB;
+		GameObject * pDoor = NULLGOB;
 		pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(263.873871f, -128.438812f, -25.098160f, 181823);
 		if(pDoor)
 			pDoor->SetState(0);
 
-		GameObjectPointer pDoor2 = NULLGOB;
+		GameObject * pDoor2 = NULLGOB;
 		pDoor2 = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-2.067811f, -111.613785f, -41.340549f, 181766);
 		if(pDoor2)
 			pDoor2->SetState(0);
@@ -2490,7 +2490,7 @@
 			_unit->GetAIInterface()->StopMovement(1);
 			_unit->setAttackTimer(3000, false);
 
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			target = _unit->GetAIInterface()->GetNextTarget();
 			if (_unit->GetDistance2dSq(target) <= 100.0f)
 			{
@@ -2528,7 +2528,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2574,13 +2574,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -2598,7 +2598,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2640,16 +2640,16 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(BroggokAI);
-	BroggokAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BroggokAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(POISON_BOLT, Target_Self, 12.0f, 0, 15);
 		AddSpell(POISON_CLOUD, Target_RandomPlayerDestination, 8.0f, 0, 40, 0, 40);
 		AddSpell(SLIME_SPRAY, Target_Self, 10.0f, 0, 25);
 	}
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
-		GameObjectPointer pDoor = NULLGOB;
+		GameObject * pDoor = NULLGOB;
 		pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(456.157349f, 34.248005f, 9.559463f, 181819);
 		if(pDoor)
 			pDoor->SetState(0);
@@ -2671,7 +2671,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(TheMakerAI);
-	TheMakerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	TheMakerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddEmote(Event_OnCombatStart, "My work must not be interrupted.", Text_Yell, 10286);
 		AddEmote(Event_OnCombatStart, "Perhaps I can find a use for you.", Text_Yell, 10287);
@@ -2685,9 +2685,9 @@
 		AddSpell(THROW_BEAKER, Target_RandomPlayerDestination, 20.0f, 0, 0, 0, 40);
 	}
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
-		GameObjectPointer pDoor = NULLGOB;
+		GameObject * pDoor = NULLGOB;
 		pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(327.155487f, 149.753418f, 9.559869f, 181812);
 		if(pDoor)
 			pDoor->SetState(0);
Index: Trunk/src/InstanceScripts/Instance_Botanica.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_Botanica.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_Botanica.cpp	(working copy)
@@ -38,7 +38,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    BloodProtectorAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BloodProtectorAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 1;
@@ -59,19 +59,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -87,7 +87,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -152,7 +152,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    BloodGreenkeeperAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BloodGreenkeeperAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 1;
@@ -173,19 +173,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -201,7 +201,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -257,7 +257,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    SunchemistAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SunchemistAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -283,19 +283,19 @@
 		spells[1].attackstoptimer = 2000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -311,7 +311,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -370,7 +370,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SunResearcherAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SunResearcherAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 4;
@@ -408,20 +408,20 @@
 		spells[3].attackstoptimer = 2000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->CastSpell(_unit, spells[0].info, spells[0].instant);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -437,7 +437,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -500,7 +500,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    CommanderSarannisAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CommanderSarannisAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		GuardAdds = false;
 		nrspells = 3;
@@ -532,7 +532,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		GuardAdds = false;
 		CastTime();
@@ -547,7 +547,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		GuardAdds = false;
 		CastTime();
@@ -556,7 +556,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -577,7 +577,7 @@
 		}
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		GuardAdds = false;
 		CastTime();
@@ -620,7 +620,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -692,7 +692,7 @@
 	SP_AI_Spell spells[7];
 	bool m_spellcheck[7];
 
-    HighBotanistFreywinnAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HighBotanistFreywinnAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		PlantTimer = 10;
 		nrspells = 7;
@@ -753,7 +753,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		PlantTimer = 10;
 		CastTime();
@@ -768,7 +768,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		PlantTimer = 10;
 		CastTime();
@@ -777,7 +777,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -798,7 +798,7 @@
 		}
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		PlantTimer = 10;
 		CastTime();
@@ -869,7 +869,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -941,7 +941,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    ThorngrinTheTenderAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ThorngrinTheTenderAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		Enraged = false;
 		nrspells = 3;
@@ -973,7 +973,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		Enraged = false;
 		CastTime();
@@ -988,7 +988,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		Enraged = false;
 		CastTime();
@@ -997,7 +997,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1018,7 +1018,7 @@
 		}
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		Enraged = false;
 		CastTime();
@@ -1078,7 +1078,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1155,7 +1155,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    LajAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LajAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		TeleportTimer = 20;	// It's sth about that
 		nrspells = 4;
@@ -1194,7 +1194,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		TeleportTimer = 20;
 		CastTime();
@@ -1207,7 +1207,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		TeleportTimer = 20;
 		CastTime();
@@ -1216,11 +1216,11 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		TeleportTimer = 20;
 		CastTime();
@@ -1247,7 +1247,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1314,7 +1314,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    WarpSplinterAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    WarpSplinterAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 
 		SummonTimer = 20;	// It's sth about that
@@ -1347,7 +1347,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		SummonTimer = 20;
 		CastTime();
@@ -1362,7 +1362,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		SummonTimer = 20;
 		CastTime();
@@ -1371,7 +1371,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1392,7 +1392,7 @@
 		}
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		SummonTimer = 20;
 		CastTime();
@@ -1442,7 +1442,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Instance_CullingOfStratholme.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_CullingOfStratholme.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_CullingOfStratholme.cpp	(working copy)
@@ -25,7 +25,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(MEATHOOK_AI);
 
-    MEATHOOK_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MEATHOOK_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		spells.clear();
@@ -58,13 +58,13 @@
 		spells.push_back(Frenzy);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "New toys!");
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -72,13 +72,13 @@
 		_unit->RemoveAllAuras();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "This not fun...");
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		switch(rand()%3)
 		{
@@ -112,10 +112,10 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -132,7 +132,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -196,7 +196,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(SALRAMM_THE_FLESHCRAFTER_AI);
 
-    SALRAMM_THE_FLESHCRAFTER_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SALRAMM_THE_FLESHCRAFTER_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		spells.clear();
@@ -247,13 +247,13 @@
 		spells.push_back(ExplodeGhoul);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Ah, the entertainment has arrived!");
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -261,13 +261,13 @@
 		_unit->RemoveAllAuras();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "You only advance... the master's plan...");
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		switch(rand()%3)
 		{
@@ -301,10 +301,10 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -323,7 +323,7 @@
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
 		if( spellid == 0 )
 			return;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -375,7 +375,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CHRONO_LORD_EPOCH_AI);
 
-    CHRONO_LORD_EPOCH_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CHRONO_LORD_EPOCH_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		spells.clear();
@@ -417,13 +417,13 @@
 		spells.push_back(TimeStop);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "We'll see about that, young prince.");
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -431,12 +431,12 @@
 		_unit->RemoveAllAuras();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		switch(rand()%3)
 		{
@@ -470,10 +470,10 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -492,7 +492,7 @@
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
 		if( spellid == 0 )
 			return;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -540,7 +540,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(INFINITE_CORRUPTOR_AI);
 
-    INFINITE_CORRUPTOR_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    INFINITE_CORRUPTOR_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		spells.clear();
@@ -563,13 +563,13 @@
 		spells.push_back(CorruptingBlight);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "How dare you interfere with our work here!");
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -577,7 +577,7 @@
 		_unit->RemoveAllAuras();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -600,10 +600,10 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -622,7 +622,7 @@
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
 		if( spellid == 0 )
 			return;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -670,7 +670,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(MALGANIS_AI);
 
-    MALGANIS_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MALGANIS_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		scene = true;
@@ -712,14 +712,14 @@
 		spells.push_back(VampiricTouch);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "This will be a fine test, Prince Arthas.");
 		_unit->PlaySoundToSet(14413);
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -727,7 +727,7 @@
 		_unit->RemoveAllAuras();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		switch(rand()%3)
 		{
@@ -743,7 +743,7 @@
 		}
 	}
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if( _unit->HasAura( 52723 ) )//handling a dummy :)
 		{
@@ -759,7 +759,7 @@
 			_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Your journey has just begun, young prince. Gather your forces, and meet me in the arctic land of Northrend. It is there we shall settle the score between us. It is there that your true destiny will unfold.");
 			_unit->PlaySoundToSet(14412);
 			//spawn a chest and go
-			GameObjectPointer go = _unit->GetMapMgr()->CreateGameObject(190663);
+			GameObject * go = _unit->GetMapMgr()->CreateGameObject(190663);
 			go->CreateFromProto(190663, _unit->GetMapMgr()->GetMapId(), _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), _unit->GetOrientation(), 0.0f, 0.0f, 0.0f, 0.0f);
 			go->SetInstanceID(_unit->GetMapMgr()->GetInstanceID());
 			go->PushToWorld(_unit->GetMapMgr());
@@ -767,7 +767,7 @@
 		}
 	}
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -790,7 +790,7 @@
 		}else
 		{//this is ugly, better ideas?
 			scene = false;
-			CreaturePointer citizen = NULLCREATURE;
+			Creature * citizen = NULLCREATURE;
 			uint32 entry = 0;
 			for (int i = 0; i != _unit->GetMapMgr()->m_CreatureHighGuid; ++i)
 			{
@@ -802,7 +802,7 @@
 						citizen = _unit->GetMapMgr()->m_CreatureStorage[i];
 						CreatureProto *cp = CreatureProtoStorage.LookupEntry(27737);//risen zombie
 						CreatureInfo *ci = CreatureNameStorage.LookupEntry(27737);
-						CreaturePointer c = NULLCREATURE;
+						Creature * c = NULLCREATURE;
 						if (cp && ci)
 						{
 							c = _unit->GetMapMgr()->CreateCreature( 27737 );
@@ -819,10 +819,10 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -841,7 +841,7 @@
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
 		if( spellid == 0 )
 			return;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -887,14 +887,14 @@
 class Quest_Dispelling_Illusions : public QuestScript
 {
 public:
-	void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
 		for( uint8 i=0; i<5; i++)
 			SpawnCrates(i, mTarget->GetMapMgr());
 	}
-	void SpawnCrates(uint32 id, MapMgrPointer pMapMgr)
+	void SpawnCrates(uint32 id, MapMgr * pMapMgr)
 	{
 		uint32 entry = 190094;
 		float x=0.0f, y=0.0f, z=0.0f, o=0.0f;
@@ -936,29 +936,29 @@
 				o = 0.436332f;
 			}break;
 		}
-		GameObjectPointer crate = pMapMgr->GetInterface()->GetGameObjectNearestCoords(x, y, z, 190094, 1.0f);
+		GameObject * crate = pMapMgr->GetInterface()->GetGameObjectNearestCoords(x, y, z, 190094, 1.0f);
 		if( crate )
 			crate->Despawn(0);
-		GameObjectPointer go = pMapMgr->CreateGameObject(entry);
+		GameObject * go = pMapMgr->CreateGameObject(entry);
 		go->CreateFromProto(entry, pMapMgr->GetMapId(), x, y, z, o, 0.0f, 0.0f, 0.0f, 0.0f);
 		go->SetInstanceID(pMapMgr->GetInstanceID());
 		go->PushToWorld(pMapMgr);
 	}
 };
 
-bool ArcaneDisruption(uint32 i, SpellPointer pSpell)
+bool ArcaneDisruption(uint32 i, Spell * pSpell)
 {
 	if( !pSpell->p_caster )
 		return false;
 
-	PlayerPointer plr = pSpell->p_caster;
+	Player * plr = pSpell->p_caster;
 	QuestLogEntry* pQuest = plr->GetQuestLogForEntry(13149);
 	if( !pQuest )
 		return false;
-	GameObjectPointer crate = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(), 190094, 10.0f);
+	GameObject * crate = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(), 190094, 10.0f);
 	if( crate )
 	{
-		GameObjectPointer go = plr->GetMapMgr()->CreateGameObject(190095);
+		GameObject * go = plr->GetMapMgr()->CreateGameObject(190095);
 		go->CreateFromProto(190095, crate->GetMapMgr()->GetMapId(), crate->GetPositionX(), crate->GetPositionY(), crate->GetPositionZ(), crate->GetOrientation(), 0.0f, 0.0f, 0.0f, 0.0f);
 		go->SetInstanceID(crate->GetMapMgr()->GetInstanceID());
 		go->PushToWorld(crate->GetMapMgr());
@@ -970,7 +970,7 @@
 		{//weee, Uther
 			CreatureProto *cp = CreatureProtoStorage.LookupEntry(26528);
 			CreatureInfo *ci = CreatureNameStorage.LookupEntry(26528);
-			CreaturePointer c = NULLCREATURE;
+			Creature * c = NULLCREATURE;
 			if (cp && ci)
 			{
 				c = plr->GetMapMgr()->CreateCreature( 26528 );
@@ -1006,7 +1006,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(UTHER_AI);
 
-    UTHER_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    UTHER_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->GetAIInterface()->addWayPoint(CreateWaypoint(1, 0, RUN));
 		_unit->GetAIInterface()->addWayPoint(CreateWaypoint(2, 0, RUN));
@@ -1019,8 +1019,8 @@
 		if( i == 3 && check )
 		{
 			check = false;
-			CreaturePointer Arthas = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 26499);
-			CreaturePointer Jaina = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 26497);
+			Creature * Arthas = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 26499);
+			Creature * Jaina = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 26497);
 			if( Arthas && Jaina )//Show must go on!
 			{
 				//we add 0,5s per speech
@@ -1160,7 +1160,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(ARTHAS_AI);
 
-    ARTHAS_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ARTHAS_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->GetAIInterface()->addWayPoint(CreateWaypoint(1, 10500, RUN));
 		_unit->GetAIInterface()->addWayPoint(CreateWaypoint(2, 0, RUN));
@@ -1229,7 +1229,7 @@
 				"I can only help you with a clean death.", 
 				EVENT_UNIT_CHAT_MSG, 300, 1, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
 				sEventMgr.AddEvent(TO_OBJECT(_unit), &Object::PlaySoundToSet, (uint32)14294, EVENT_UNK, 100, 1, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
-				CreaturePointer citizen = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 28167);
+				Creature * citizen = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 28167);
 				if( citizen )
 				{
 					_unit->GetAIInterface()->MoveTo( citizen->GetPositionX(),citizen->GetPositionY(),citizen->GetPositionZ(),citizen->GetOrientation());
@@ -1254,7 +1254,7 @@
 				//spawn Mal'Ganis
 				CreatureProto *cp = CreatureProtoStorage.LookupEntry(26533);
 				CreatureInfo *ci = CreatureNameStorage.LookupEntry(26533);
-				CreaturePointer c = NULLCREATURE;
+				Creature * c = NULLCREATURE;
 				if (cp && ci)
 				{
 					c = _unit->GetMapMgr()->CreateCreature( 26533 );
@@ -1328,7 +1328,7 @@
 class ArthasGossip : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer  Plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player *  Plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1, Plr);
@@ -1339,7 +1339,7 @@
 			Menu->SendTo(Plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer  Plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player *  Plr, uint32 Id, uint32 IntId, const char * Code)
 	{
 		switch (IntId)
 		{
Index: Trunk/src/InstanceScripts/Instance_Deadmines.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_Deadmines.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_Deadmines.cpp	(working copy)
@@ -49,7 +49,7 @@
 class NobleAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(NobleAI, MoonScriptCreatureAI);
-    NobleAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    NobleAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Fireball
 		AddSpell(9053, Target_Current, 12, 3, 0);
@@ -65,7 +65,7 @@
 class MarisaAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(MarisaAI, MoonScriptCreatureAI);
-    MarisaAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    MarisaAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Fireball
 		AddSpell(9053, Target_Current, 12, 3, 0);
@@ -75,7 +75,7 @@
 class ThistlenettleAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ThistlenettleAI, MoonScriptCreatureAI);
-    ThistlenettleAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    ThistlenettleAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Draw of Thistlenettle
 		AddSpell(5219, Target_Current, 12, 2, 0);
@@ -86,7 +86,7 @@
 class DefiasEvokerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DefiasEvokerAI, MoonScriptCreatureAI);
-    DefiasEvokerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DefiasEvokerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Flamestrike
 		AddSpell(11829, Target_Destination, 12, 3, 0);
@@ -100,7 +100,7 @@
 class DefiasTaskmasterAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DefiasTaskmasterAI, MoonScriptCreatureAI);
-    DefiasTaskmasterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DefiasTaskmasterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Piercing Shot
 		AddSpell(6685, Target_Current, 12, 0, 30, 5, 30, true);
@@ -113,7 +113,7 @@
 class DefiasBlackguardAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DefiasBlackguardAI, MoonScriptCreatureAI);
-    DefiasBlackguardAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DefiasBlackguardAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Faded
 		AddSpell(6408, Target_Self, 0, 0, 0);
@@ -124,7 +124,7 @@
 class RhahkZorAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(RhahkZorAI, MoonScriptCreatureAI);
-    RhahkZorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    RhahkZorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Rhahk'Zor Slam
 		AddSpell(6304, Target_Current, 8, 0, 3);
@@ -137,10 +137,10 @@
 		Added a random spawn chance for Miner Johnson
 			sql: DELETE FROM `creature_spawns` WHERE `entry` = '3586';
 	*/
-    void OnDied(UnitPointer  pKiller)
+    void OnDied(Unit *  pKiller)
     {
         // Find "Factory Door"
-        GameObjectPointer  pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(
+        GameObject *  pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(
            -190.860092f, -456.332184f, 54.496822f, 13965);
 		
 		if(pDoor)
@@ -178,7 +178,7 @@
 class SneedsShredderAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SneedsShredderAI, MoonScriptCreatureAI);
-    SneedsShredderAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    SneedsShredderAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Distracting Pain
 		AddSpell(3603, Target_Current, 8, 0, 45);
@@ -186,7 +186,7 @@
 		AddSpell(7399, Target_Current, 8, 0, 15);
 	}
 
-    void OnDied(UnitPointer  pKiller)
+    void OnDied(Unit *  pKiller)
     {
 		// Spawn Sneed
 		SpawnCreature(643);
@@ -198,7 +198,7 @@
 class SneedAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SneedAI, MoonScriptCreatureAI);
-	SneedAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	SneedAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		// Disarm
 		AddSpell(6713, Target_Current, 8, 0, 5);
@@ -207,10 +207,10 @@
 	/*
 		OnDied: Mast Room Door opens, 3 Patrols are spawned.
 	*/
-	void OnDied(UnitPointer  pKiller)
+	void OnDied(Unit *  pKiller)
     {
         // Find "Mast Room Door"
-        GameObjectPointer  pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(
+        GameObject *  pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(
             -289.691650f, -535.988953f, 49.440678f, 16400);
         if(pDoor)
 			pDoor->SetState(0);
@@ -242,7 +242,7 @@
 class GilnidAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(GilnidAI, MoonScriptCreatureAI);
-	GilnidAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+	GilnidAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Molten Metal
 		AddSpell(5213, Target_Current, 30, 2, 15);
@@ -253,10 +253,10 @@
 	/*
 		OnDied: Foundry Door opens, 4 Patrols are spawned.
 	*/
-    void OnDied(UnitPointer  pKiller)
+    void OnDied(Unit *  pKiller)
     {		
 		// Find "Foundry Door"
-		GameObjectPointer  pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-176.569f, -577.640991f, 19.311600f, 16399);
+		GameObject *  pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-176.569f, -577.640991f, 19.311600f, 16399);
         if(pDoor)
 			pDoor->SetState(0);
 
@@ -293,7 +293,7 @@
 class MrSmiteAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( MrSmiteAI, MoonScriptBossAI );
-	MrSmiteAI( CreaturePointer pCreature ) : MoonScriptBossAI( pCreature )
+	MrSmiteAI( Creature * pCreature ) : MoonScriptBossAI( pCreature )
 	{
 		AddSpell( SMITE_SLAM, Target_Current, 25, 0.0f, 15, 0.0f, 8.0f, true );
 		mStomp = AddSpell( SMITE_STOMP, Target_Self, 0, 0, 0 );
@@ -301,7 +301,7 @@
 		SetWieldWeapon( true );
 	};
 
-	void OnCombatStop( UnitPointer pTarget )
+	void OnCombatStop( Unit * pTarget )
     {
 		if ( GetPhase() == 4 )
 			RemoveAura( SMITES_HAMMER );
@@ -415,7 +415,7 @@
 class GreenskinAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(GreenskinAI, MoonScriptBossAI);
-    GreenskinAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+    GreenskinAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
     {
 		// Poisoned Harpoon
 		AddSpell(5208, Target_Current, 12, 2, 0);
@@ -428,12 +428,12 @@
 class VanCleefAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(VanCleefAI, MoonScriptBossAI);
-    VanCleefAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+    VanCleefAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
     {
 		AddEmote(Event_OnCombatStart, "None may challenge the brotherhood.", Text_Yell, 5780);
     }
 
-    void OnTargetDied(UnitPointer pTarget)
+    void OnTargetDied(Unit * pTarget)
     {
         char msg[200];
         if(pTarget->GetTypeId() == TYPEID_PLAYER)
@@ -486,7 +486,7 @@
 class CookieAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(CookieAI, MoonScriptCreatureAI);
-    CookieAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    CookieAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		// Acid Splash
 		AddSpell(6306, Target_Current, 20, 1, 30);
@@ -504,12 +504,12 @@
 class DefiasCannon : public GameObjectAIScript
 {
 public:
-	DefiasCannon(GameObjectPointer  goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer  GO) { return new DefiasCannon(GO); }
+	DefiasCannon(GameObject *  goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject *  GO) { return new DefiasCannon(GO); }
 
-	void OnActivate(PlayerPointer  pPlayer)
+	void OnActivate(Player *  pPlayer)
 	{
-		CreaturePointer Smite = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-22.8471f, -797.283f, 20.3745f, 646);
+		Creature * Smite = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-22.8471f, -797.283f, 20.3745f, 646);
 		if(Smite)
 		{
 			Smite->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "You there, check out that noise!");
Index: Trunk/src/InstanceScripts/Instance_DireMaul.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_DireMaul.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_DireMaul.cpp	(working copy)
@@ -32,7 +32,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    AlzzinTheWildshaper(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AlzzinTheWildshaper(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -68,7 +68,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -80,11 +80,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -92,7 +92,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -109,7 +109,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -168,7 +168,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    CaptainKromcrush(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CaptainKromcrush(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -195,7 +195,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -207,11 +207,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -219,7 +219,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -236,7 +236,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -295,7 +295,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    ChoRushTheObserver(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ChoRushTheObserver(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -322,7 +322,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -334,11 +334,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -346,7 +346,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -363,7 +363,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -422,7 +422,7 @@
 	SP_AI_Spell spells[4];
  bool m_spellcheck[4];
 
-    GuardFengus(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GuardFengus(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -467,7 +467,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -479,11 +479,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -491,7 +491,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -508,7 +508,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -567,7 +567,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    GuardMolDar(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GuardMolDar(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -603,7 +603,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -615,11 +615,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -627,7 +627,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -644,7 +644,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -702,7 +702,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    GuardSlipKik(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GuardSlipKik(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -738,7 +738,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -750,11 +750,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -762,7 +762,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -779,7 +779,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -837,7 +837,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    Hydrospawn(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Hydrospawn(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -873,7 +873,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -885,11 +885,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -897,7 +897,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -914,7 +914,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -973,7 +973,7 @@
 	SP_AI_Spell spells[1];
  bool m_spellcheck[1];
 
-    MassiveGeyser(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MassiveGeyser(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -991,7 +991,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1003,11 +1003,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1015,7 +1015,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1032,7 +1032,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1091,7 +1091,7 @@
 	SP_AI_Spell spells[4];
  bool m_spellcheck[4];
 
-    IllyanaRavenoak(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    IllyanaRavenoak(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -1136,7 +1136,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1148,11 +1148,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1160,7 +1160,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1177,7 +1177,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1236,7 +1236,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    Immolthar(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Immolthar(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1272,7 +1272,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1284,11 +1284,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1296,7 +1296,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1313,7 +1313,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1372,7 +1372,7 @@
 	SP_AI_Spell spells[1];
  bool m_spellcheck[1];
 
-    EyeOfImmolThar(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    EyeOfImmolThar(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1390,7 +1390,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1402,11 +1402,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1414,7 +1414,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1431,7 +1431,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1490,7 +1490,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    KingGordok(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    KingGordok(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1517,7 +1517,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1529,11 +1529,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1541,7 +1541,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1558,7 +1558,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1617,7 +1617,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    Lethtendris(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Lethtendris(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1644,7 +1644,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1656,11 +1656,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1668,7 +1668,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1685,7 +1685,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1744,7 +1744,7 @@
 	SP_AI_Spell spells[1];
  bool m_spellcheck[1];
 
-    LordHelNurath(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LordHelNurath(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1762,7 +1762,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1774,11 +1774,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1786,7 +1786,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1803,7 +1803,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1862,7 +1862,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    MagisterKalendris(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MagisterKalendris(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1898,7 +1898,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1910,11 +1910,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1922,7 +1922,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1939,7 +1939,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1997,7 +1997,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    PrinceTortheldrin(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PrinceTortheldrin(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2024,7 +2024,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2036,11 +2036,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2048,7 +2048,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2065,7 +2065,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2123,7 +2123,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    Pusillin(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Pusillin(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2159,7 +2159,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2171,11 +2171,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2183,7 +2183,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2200,7 +2200,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2259,7 +2259,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    SkarrTheUnbreakable(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SkarrTheUnbreakable(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2286,7 +2286,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2298,11 +2298,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2310,7 +2310,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2327,7 +2327,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2386,7 +2386,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    TendrisWarpwood(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TendrisWarpwood(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2422,7 +2422,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2434,11 +2434,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2446,7 +2446,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2466,7 +2466,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2525,7 +2525,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    ZevrimThornhoof(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ZevrimThornhoof(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2552,7 +2552,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2564,11 +2564,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2576,7 +2576,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2593,7 +2593,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2652,7 +2652,7 @@
 	SP_AI_Spell spells[4];
  bool m_spellcheck[4];
 
-    GordokMageLord(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GordokMageLord(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -2697,7 +2697,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2709,11 +2709,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2721,7 +2721,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2738,7 +2738,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2797,7 +2797,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    GordokReaver(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GordokReaver(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2824,7 +2824,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2836,11 +2836,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2848,7 +2848,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2865,7 +2865,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2924,7 +2924,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    GordokBrute(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GordokBrute(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2960,7 +2960,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2972,11 +2972,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2984,7 +2984,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -3001,7 +3001,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -3060,7 +3060,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    FelLash(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FelLash(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -3087,7 +3087,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -3099,11 +3099,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -3111,7 +3111,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -3128,7 +3128,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Instance_DrakTharonKeep.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_DrakTharonKeep.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_DrakTharonKeep.cpp	(working copy)
@@ -42,7 +42,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(TROLLGORE_AI);
 
-    TROLLGORE_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TROLLGORE_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		invastion_timer = 0;
@@ -76,24 +76,24 @@
 		spells.push_back(Consume);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer  mKiller)
+    void OnDied(Unit *  mKiller)
     {
 		RemoveAIUpdateEvent();
     }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		/*if( mAttacker->IsCreature() && TO_CREATURE( mAttacker )->GetProto()->Id == DRAKKARI_INVADER_ENTRY )
 		{
@@ -128,7 +128,7 @@
 			{
 				CreatureProto *cp = CreatureProtoStorage.LookupEntry(DRAKKARI_INVADER_ENTRY);
 				CreatureInfo *ci = CreatureNameStorage.LookupEntry(DRAKKARI_INVADER_ENTRY);
-				CreaturePointer c = NULLCREATURE;
+				Creature * c = NULLCREATURE;
 				if (cp && ci)
 				{
 					c = _unit->GetMapMgr()->CreateCreature( DRAKKARI_INVADER_ENTRY );
@@ -145,10 +145,10 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -165,7 +165,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -232,7 +232,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(NOVOS_THE_SUMMONER_AI);
 
-    NOVOS_THE_SUMMONER_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    NOVOS_THE_SUMMONER_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		phase = 0;
@@ -277,7 +277,7 @@
 		spells.push_back(WrathOfMisery);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		//these texts shouldn't be like this
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "The chill that you feel is the herald of your doom!");
@@ -302,7 +302,7 @@
 		_unit->Root();
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -311,7 +311,7 @@
 		{
 			if( _unit->m_ObjectSlots[i] )
 			{
-				GameObjectPointer Crystal = _unit->GetMapMgr()->GetGameObject( _unit->m_ObjectSlots[i] );
+				GameObject * Crystal = _unit->GetMapMgr()->GetGameObject( _unit->m_ObjectSlots[i] );
 				if( Crystal && Crystal->IsInWorld() )
 					Crystal->Despawn(0);
 			}
@@ -321,13 +321,13 @@
 		_unit->RemoveAllAuras();
 	   }
 
-    void OnDied(UnitPointer  mKiller)
+    void OnDied(Unit *  mKiller)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Your efforts... are in vain.");
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		//BUAHAHAHAH
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Such is the fate of all who oppose the Lich King.");
@@ -367,7 +367,7 @@
 			{
 				if( _unit->m_ObjectSlots[i] )
 				{
-					GameObjectPointer Crystal = _unit->GetMapMgr()->GetGameObject( _unit->m_ObjectSlots[i] );
+					GameObject * Crystal = _unit->GetMapMgr()->GetGameObject( _unit->m_ObjectSlots[i] );
 					if( Crystal && Crystal->IsInWorld() )
 						new_phase = false;
 				}
@@ -385,11 +385,11 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -406,7 +406,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -442,7 +442,7 @@
 			mob_entry = 26627;
 			CreatureProto *cp = CreatureProtoStorage.LookupEntry(mob_entry);
 			CreatureInfo *ci = CreatureNameStorage.LookupEntry(mob_entry);
-			CreaturePointer c = NULLCREATURE;
+			Creature * c = NULLCREATURE;
 			if (cp && ci)
 			{
 				c = _unit->GetMapMgr()->CreateCreature( mob_entry );
@@ -452,7 +452,7 @@
 					c->PushToWorld(_unit->GetMapMgr());
 					c->SetUInt64Value( UNIT_FIELD_SUMMONEDBY, _unit->GetGUID() );
 					//path finding would be usefull :)
-					PlayerPointer p_target = GetRandomPlayerTarget();
+					Player * p_target = GetRandomPlayerTarget();
 					if( p_target )
 					{
 						c->GetAIInterface()->m_moveRun = true;
@@ -474,7 +474,7 @@
 				}
 				CreatureProto *cp = CreatureProtoStorage.LookupEntry(mob_entry);
 				CreatureInfo *ci = CreatureNameStorage.LookupEntry(mob_entry);
-				CreaturePointer c = NULLCREATURE;
+				Creature * c = NULLCREATURE;
 				if (cp && ci)
 				{
 					c = _unit->GetMapMgr()->CreateCreature( mob_entry );
@@ -483,7 +483,7 @@
 						c->Load(cp,-379.101227f, -824.835449f, 60.0f, 0.0f);
 						c->PushToWorld(_unit->GetMapMgr());
 						//path finding would be usefull :)
-						PlayerPointer p_target = GetRandomPlayerTarget();
+						Player * p_target = GetRandomPlayerTarget();
 						if( p_target )
 						{
 							c->GetAIInterface()->m_moveRun = true;
@@ -533,7 +533,7 @@
 				o = 3.14159f;
 			}break;
 		}
-		GameObjectPointer go = _unit->GetMapMgr()->CreateGameObject(entry);
+		GameObject * go = _unit->GetMapMgr()->CreateGameObject(entry);
 		go->CreateFromProto(entry, _unit->GetMapMgr()->GetMapId(), x, y, z, o, 0.0f, 0.0f, 0.0f, 0.0f);
 		go->SetInstanceID(_unit->GetMapMgr()->GetInstanceID());
 		go->PushToWorld(_unit->GetMapMgr());
@@ -568,7 +568,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CRYSTAL_HANDLER_AI);
 
-    CRYSTAL_HANDLER_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CRYSTAL_HANDLER_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		spells.clear();
@@ -583,27 +583,27 @@
 		spells.push_back(FlashofDarkness);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer  mKiller)
+    void OnDied(Unit *  mKiller)
     {
 		RemoveAIUpdateEvent();
-		UnitPointer Novos = _unit->GetMapMgr()->GetUnit( _unit->GetUInt64Value( UNIT_FIELD_SUMMONEDBY ) );
+		Unit * Novos = _unit->GetMapMgr()->GetUnit( _unit->GetUInt64Value( UNIT_FIELD_SUMMONEDBY ) );
 		if( Novos )
 			for( uint8 i=0; i<4; i++)
 				if( Novos->m_ObjectSlots[i] )
 				{
-					GameObjectPointer Crystal = Novos->GetMapMgr()->GetGameObject( Novos->m_ObjectSlots[i] );
+					GameObject * Crystal = Novos->GetMapMgr()->GetGameObject( Novos->m_ObjectSlots[i] );
 					if( Crystal && Crystal->IsInWorld() )
 					{
 						Crystal->Despawn(0);
@@ -630,11 +630,11 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -651,7 +651,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -706,7 +706,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(KING_DRED_AI);
 
-    KING_DRED_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    KING_DRED_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		spells.clear();
@@ -748,19 +748,19 @@
 		spells.push_back(PiercingSlash);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer  mKiller)
+    void OnDied(Unit *  mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -783,11 +783,11 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -804,7 +804,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -864,7 +864,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(THE_PROPHET_THARONJA);
 
-    THE_PROPHET_THARONJA(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    THE_PROPHET_THARONJA(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		spells.clear();
@@ -933,7 +933,7 @@
 		spells.push_back(EyeBeam);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		phase = 1;
@@ -941,7 +941,7 @@
 		phase_timer = getMSTime() + WINDSERPENT_PHASE_INTERVAL;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -952,12 +952,12 @@
 		_unit->SetUInt32Value( UNIT_FIELD_DISPLAYID, _unit->GetUInt32Value(UNIT_FIELD_NATIVEDISPLAYID) );
     }
 
-    void OnDied(UnitPointer  mKiller)
+    void OnDied(Unit *  mKiller)
     {
 		RemoveAIUpdateEvent();
     }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if( _unit->GetHealthPct() < 2 && phase == 2 )
 		{
@@ -1002,11 +1002,11 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -1023,7 +1023,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -1068,22 +1068,22 @@
 	uint32 phase;
 };
 
-bool DecayFlash(uint32 i, AuraPointer pAura, bool apply)
+bool DecayFlash(uint32 i, Aura * pAura, bool apply)
 {
 	if( apply && pAura->GetTarget() && pAura->GetTarget()->IsPlayer() )
 	{
-		PlayerPointer p_target = TO_PLAYER( pAura->GetTarget() );
+		Player * p_target = TO_PLAYER( pAura->GetTarget() );
 		p_target->SetShapeShift( 10 );//Tharon'ja Skeleton
 		p_target->SetUInt32Value( UNIT_FIELD_DISPLAYID, 9784 );
 	}
     return true;
 }
 
-bool ReturnFlash(uint32 i, AuraPointer pAura, bool apply)
+bool ReturnFlash(uint32 i, Aura * pAura, bool apply)
 {
     if( apply && pAura->GetTarget() && pAura->GetTarget()->IsPlayer() )
 	{
-		PlayerPointer p_target = TO_PLAYER( pAura->GetTarget() );
+		Player * p_target = TO_PLAYER( pAura->GetTarget() );
 		p_target->SetUInt32Value( UNIT_FIELD_DISPLAYID, p_target->GetUInt32Value(UNIT_FIELD_NATIVEDISPLAYID) );
 		p_target->m_ShapeShifted = 0;
 		p_target->SetShapeShift( 0 );
Index: Trunk/src/InstanceScripts/Instance_HallsOfLightning.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_HallsOfLightning.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_HallsOfLightning.cpp	(working copy)
@@ -36,7 +36,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(GENERAL_BJARNGRIM_AI);
 
-    GENERAL_BJARNGRIM_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GENERAL_BJARNGRIM_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		stances_timer = 0;
@@ -138,7 +138,7 @@
 		spells.push_back(Whirlwind);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I am the greatest of my father's sons! Your end has come!");
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -146,7 +146,7 @@
 		ChangeStance();
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -154,13 +154,13 @@
 		_unit->RemoveAllAuras();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "How can it be...? Flesh is not... stronger!");
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		//BUAHAHAHAH
 		if(Rand(1))
@@ -191,11 +191,11 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		//this SUCKS ASS!!
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -212,7 +212,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -297,21 +297,21 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(VOLKHAN_AI);
 
-    VOLKHAN_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    VOLKHAN_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		last_creation_hp = 0;
 		freezed = 0;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		last_creation_hp = 100;
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "It is you who have destroyed my children? You... shall... pay!");
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if( (int)( last_creation_hp - GOLEM_CREATION_HP ) >= _unit->GetHealthPct() )
 		{
@@ -352,7 +352,7 @@
 		}
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		//BUAHAHAHAH
 		switch(rand()%3)
@@ -391,11 +391,11 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		//this SUCKS ASS!!
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -412,7 +412,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -461,7 +461,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(MOLTEN_GOLEM_AI);
 
-    MOLTEN_GOLEM_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MOLTEN_GOLEM_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		spells.clear();
@@ -485,7 +485,7 @@
 		spells.push_back(BlastWave);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
@@ -502,7 +502,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if( _unit->GetHealthPct() < 3 )
 		{//freeze, some kinda of animation here maybe?
@@ -512,7 +512,7 @@
 				_unit->SchoolImmunityList[i] = 1;
 			_unit->GetAIInterface()->disable_combat = true;
 			RemoveAIUpdateEvent();
-			UnitPointer Volkhan = _unit->GetMapMgr()->GetUnit( _unit->GetUInt64Value( UNIT_FIELD_SUMMONEDBY ) );
+			Unit * Volkhan = _unit->GetMapMgr()->GetUnit( _unit->GetUInt64Value( UNIT_FIELD_SUMMONEDBY ) );
 			if( Volkhan )
 				TO_CREATURE( Volkhan )->GetScript()->OnReachWP( 1337, true );
 		}
@@ -536,11 +536,11 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		//this SUCKS ASS!!
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -557,7 +557,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -599,19 +599,19 @@
 	vector< ScriptSpell* > spells;
 };
 
-bool Temper(uint32 i, SpellPointer pSpell)
+bool Temper(uint32 i, Spell * pSpell)
 {
 	if( !pSpell->u_caster )
 		return false;
 
-	UnitPointer _unit = pSpell->u_caster;
+	Unit * _unit = pSpell->u_caster;
 
 	//summon several Molten Golem's
 	for( uint8 i=0; i<GOLEMS_COUNT; i++ )
 	{
 		CreatureProto *cp = CreatureProtoStorage.LookupEntry(MOLTEN_GOLEM_ENTRY);
 		CreatureInfo *ci = CreatureNameStorage.LookupEntry(MOLTEN_GOLEM_ENTRY);
-		CreaturePointer c = NULLCREATURE;
+		Creature * c = NULLCREATURE;
 		if (cp && ci)
 		{
 			c = _unit->GetMapMgr()->CreateCreature( MOLTEN_GOLEM_ENTRY );
@@ -626,14 +626,14 @@
 	return true;
 }
 
-bool ShatteringStomp(uint32 i, SpellPointer pSpell)
+bool ShatteringStomp(uint32 i, Spell * pSpell)
 {
 	if( !pSpell->u_caster )
 		return false;
 
-	UnitPointer _unit = pSpell->u_caster;
-	CreaturePointer golem = NULLCREATURE;
-	for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+	Unit * _unit = pSpell->u_caster;
+	Creature * golem = NULLCREATURE;
+	for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 	{
 		if( (*itr) && (*itr)->IsCreature() )
 		{
@@ -641,7 +641,7 @@
 			if( golem->isAlive() && golem->creature_info && golem->creature_info->Id == MOLTEN_GOLEM_ENTRY )
 			{
 				uint32 spellid = pSpell->m_spellInfo->Id == 59529 ? 59527 : 52429;
-				CreaturePointer Golem = TO_CREATURE( (*itr) );
+				Creature * Golem = TO_CREATURE( (*itr) );
 				Golem->CastSpell( Golem, spellid, true );
 				for( uint8 i=0; i<7; i++ )
 					Golem->SchoolImmunityList[i] = 0;
@@ -661,7 +661,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(IONAR_AI);
 
-    IONAR_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    IONAR_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		spells.clear();
@@ -689,7 +689,7 @@
 		spells.push_back(BallLightning);
     }
     
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if( (int)( last_creation_hp - DISPARSE_HP ) >= _unit->GetHealthPct() )
 		{
@@ -713,14 +713,14 @@
 			for( uint8 i=0; i<SPARKS_COUNT; i++)
 				if( sparks[i] != 0 )
 				{
-					UnitPointer Spark = _unit->GetMapMgr()->GetUnit( sparks[i] );
+					Unit * Spark = _unit->GetMapMgr()->GetUnit( sparks[i] );
 					if( Spark )
 					{
 						uint32 spellid = heroic ? 59833 : 52667;
 						Spark->CastSpell(Spark, spellid, true);
 						Spark->UnRoot();
 						_unit->GetAIInterface()->disable_combat = false;
-						PlayerPointer p_target = GetRandomPlayerTarget();
+						Player * p_target = GetRandomPlayerTarget();
 						if( p_target )
 						{
 							Spark->GetAIInterface()->MoveTo(p_target->GetPositionX(),p_target->GetPositionY(), p_target->GetPositionZ(), p_target->GetOrientation());
@@ -730,7 +730,7 @@
 		}
 	}
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "You wish to confront the master? You must weather the storm!");
 		spark_timer = 0;
@@ -740,7 +740,7 @@
 		{
 			CreatureProto *cp = CreatureProtoStorage.LookupEntry(28926);
 			CreatureInfo *ci = CreatureNameStorage.LookupEntry(28926);
-			CreaturePointer c = NULLCREATURE;
+			Creature * c = NULLCREATURE;
 			if (cp && ci)
 			{
 				c = _unit->GetMapMgr()->CreateCreature( 28926 );
@@ -765,7 +765,7 @@
 		for( uint8 i=0; i<SPARKS_COUNT; i++)
 			if( sparks[i] != 0 )
 			{
-				UnitPointer Spark = _unit->GetMapMgr()->GetUnit( sparks[i] );
+				Unit * Spark = _unit->GetMapMgr()->GetUnit( sparks[i] );
 				if( Spark )
 					TO_CREATURE( Spark )->SummonExpire();
 			}
@@ -777,7 +777,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		//BUAHAHAHAH
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Shocking, isn't it?");
@@ -795,7 +795,7 @@
 			for( uint8 i=0; i<SPARKS_COUNT; i++)
 				if( sparks[i] != 0 )
 				{
-					UnitPointer Spark = _unit->GetMapMgr()->GetUnit( sparks[i] );
+					Unit * Spark = _unit->GetMapMgr()->GetUnit( sparks[i] );
 					if( Spark )
 					{
 						Spark->RemoveAllAuras();
@@ -821,11 +821,11 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		//this SUCKS ASS!!
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -842,7 +842,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
@@ -863,10 +863,10 @@
 			}break;
 		case SPELL_TARGET_RANDOM_PLAYER_POSITION:
 			{
-				PlayerPointer target = GetRandomPlayerTarget();
+				Player * target = GetRandomPlayerTarget();
 				if( target )
 				{
-					SpellPointer sp(new Spell(_unit,dbcSpell.LookupEntry( spellid ),true,NULLAURA));
+					Spell * sp(new Spell(_unit,dbcSpell.LookupEntry( spellid ),true,NULLAURA));
 					SpellCastTargets targets;
 					targets.m_destX = target->GetPositionX();
 					targets.m_destY = target->GetPositionY();
@@ -911,7 +911,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(LOKEN_AI);
 
-    LOKEN_AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LOKEN_AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		heroic = ( _unit->GetMapMgr()->iInstanceMode == MODE_HEROIC );
 		spells.clear();
@@ -935,7 +935,7 @@
 		spells.push_back(LightningNova);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage( CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "What hope is there for you? None!");
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -954,7 +954,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		switch(rand()%3)
 		{
@@ -988,11 +988,11 @@
 		}
     }
 
-	PlayerPointer GetRandomPlayerTarget()
+	Player * GetRandomPlayerTarget()
 	{
 		//this SUCKS ASS!!
 		vector< uint32 > possible_targets;
-		for( unordered_set<PlayerPointer>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
+		for( unordered_set<Player *>::iterator iter = _unit->GetInRangePlayerSetBegin(); iter != _unit->GetInRangePlayerSetEnd(); ++iter ) 
 		{ 
 			if( (*iter) && (*iter)->isAlive() )
 				possible_targets.push_back( (uint32)(*iter)->GetGUID() );
@@ -1009,7 +1009,7 @@
 	{
 		_unit->Root();
 		uint32 spellid = heroic ? spell->heroic_spellid : spell->normal_spellid;
-		UnitPointer spelltarget = NULLUNIT;
+		Unit * spelltarget = NULLUNIT;
 		switch( spell->target )
 		{
 		case SPELL_TARGET_SELF:
Index: Trunk/src/InstanceScripts/Instance_HallsOfStone.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_HallsOfStone.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_HallsOfStone.cpp	(working copy)
@@ -29,7 +29,7 @@
 class DarkRuneStormcallerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DarkRuneStormcallerAI, MoonScriptCreatureAI);
-    DarkRuneStormcallerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DarkRuneStormcallerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(STORMCALLER_LIGHTNINGBOLT, Target_RandomPlayer, 60, 3, 6);
 		AddSpell(STORMCALLER_SHADOWWORD, Target_RandomPlayer, 16, 0, 12);
@@ -50,7 +50,7 @@
 class IronGolemCustodianAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IronGolemCustodianAI, MoonScriptCreatureAI);
-    IronGolemCustodianAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    IronGolemCustodianAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(CUSTODIAN_CRUSH_ARMOR, Target_Current, 50, 0, 5);
 		AddSpell(CUSTODIAN_GROUND_SMASH, Target_ClosestPlayer, 20, 0, 14);
@@ -71,7 +71,7 @@
 class DarkRuneProtectorAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DarkRuneProtectorAI, MoonScriptCreatureAI);
-    DarkRuneProtectorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DarkRuneProtectorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(PROTECTOR_CHARGE, Target_RandomPlayerNotCurrent, 20, 0, 14, 10);
 		AddSpell(PROTECTOR_CLAVE, Target_Current, 35, 0, 8);
@@ -91,7 +91,7 @@
 class LesserAirElementalAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(LesserAirElementalAI, MoonScriptCreatureAI);
-    LesserAirElementalAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    LesserAirElementalAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(ELEMENTAL_LIGHTNING_BOLT, Target_RandomPlayerNotCurrent, 20, 3, 14);
 	};
@@ -111,7 +111,7 @@
 class DarkRuneWorkerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DarkRuneWorkerAI, MoonScriptCreatureAI);
-    DarkRuneWorkerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DarkRuneWorkerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(WORKER_ENRAGE, Target_Self, 5, 0, 60, 10);
 		AddSpell(WORKER_PIERCE_ARMOR, Target_Current, 35, 0, 45);
@@ -132,7 +132,7 @@
 class DarkRuneWarriorAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DarkRuneWarriorAI, MoonScriptCreatureAI);
-    DarkRuneWarriorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DarkRuneWarriorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(WARRIOR_CLAVE, Target_Current, 15, 0, 8);
 		AddSpell(WARRIOR_HEROIC_STRIKE, Target_Current, 35, 0, 12);
@@ -154,7 +154,7 @@
 class DarkRuneTheurgistAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DarkRuneTheurgistAI, MoonScriptCreatureAI);
-    DarkRuneTheurgistAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DarkRuneTheurgistAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(THEURGIST_BLAST_WAVE, Target_Self, 22, 0, 25);
 		AddSpell(THEURGIST_FIREBOLT, Target_RandomPlayer, 40, 3, 6);
@@ -175,7 +175,7 @@
 class DarkRuneShaperAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DarkRuneShaperAI, MoonScriptCreatureAI);
-    DarkRuneShaperAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DarkRuneShaperAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(SHAPER_RAY, Target_RandomPlayer, 35, 1.5, 12);
 	};
@@ -194,7 +194,7 @@
 class DarkRuneScholarAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DarkRuneScholarAI, MoonScriptCreatureAI);
-    DarkRuneScholarAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DarkRuneScholarAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(SCHOLAR_SILANCE, Target_RandomPlayerNotCurrent, 35, 2.5, 12);
 	};
@@ -214,7 +214,7 @@
 class DarkRuneGiantAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DarkRuneGiantAI, MoonScriptCreatureAI);
-    DarkRuneGiantAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DarkRuneGiantAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(GIANT_FIST, Target_Self, 3, 2, 40);
 		AddSpell(GIANT_STOMP, Target_RandomPlayer, 35, 0, 14, 0, 10);
@@ -236,7 +236,7 @@
 class DarkRuneConstructAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DarkRuneConstructAI, MoonScriptCreatureAI);
-    DarkRuneConstructAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DarkRuneConstructAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(RAGING_POTENT_JOLT, Target_Self, 95, 0, 8);
 		AddSpell(RAGING_CLAVE, Target_Current, 30, 0, 9, 0, 10);
@@ -257,7 +257,7 @@
 class DarkLightningConstructAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DarkLightningConstructAI, MoonScriptCreatureAI);
-    DarkLightningConstructAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    DarkLightningConstructAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(LIGHTNING_ELECTRICAL_OVERLOAD, Target_Self, 5, 1.5, 14);
 		AddSpell(LIGHTNING_CHAIN_LIGHTNING, Target_Current, 30, 3, 8, 0, 30);
@@ -277,7 +277,7 @@
 class ForgedIronTroggAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ForgedIronTroggAI, MoonScriptCreatureAI);
-    ForgedIronTroggAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    ForgedIronTroggAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(LIGHTNING_CHAIN_LIGHTNING, Target_RandomPlayer, 30, 2, 8, 0, 10);
 	};
@@ -298,7 +298,7 @@
 class MaidenOfGriefAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(MaidenOfGriefAI, MoonScriptCreatureAI);
-    MaidenOfGriefAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    MaidenOfGriefAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(MAIDEN_STORM_OF_GRIEF, Target_RandomPlayerDestination, 100, 0, 19);
 		AddSpell(MAIDEN_PILLAR_OF_WOE, Target_RandomPlayerNotCurrent, 30, 0, 8);
@@ -314,7 +314,7 @@
 		AddEmote(Event_OnDied, "I hope you all rot! I never...wanted...this.", Text_Yell, 13493);
 	};
 	
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mShock->TriggerCooldown();	
 		ParentClass::OnCombatStart(pTarget);
@@ -339,7 +339,7 @@
 class KrystallusAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(KrystallusAI, MoonScriptCreatureAI);
-    KrystallusAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+    KrystallusAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell( KRYSTALLUS_BOULDER_TOSS, Target_ClosestPlayer, 35, 1, 4.5f);
 		mShatter = AddSpell(KRYSTALLUS_SHATTER, Target_Self, 0, 0, 0);
Index: Trunk/src/InstanceScripts/Instance_HellfireRamparts.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_HellfireRamparts.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_HellfireRamparts.cpp	(working copy)
@@ -40,7 +40,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    BLEEDINGHOLLOWARCHERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BLEEDINGHOLLOWARCHERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -63,7 +63,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -75,7 +75,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -83,7 +83,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -100,7 +100,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -164,7 +164,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    BLEEDINGHOLLOWDARKCASTERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BLEEDINGHOLLOWDARKCASTERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -187,7 +187,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -199,11 +199,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -211,7 +211,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -228,7 +228,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -293,7 +293,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    BLEEDINGHOLLOWSCRYERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BLEEDINGHOLLOWSCRYERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -323,7 +323,7 @@
 		spells[2].attackstoptimer = 1000;*/
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -335,7 +335,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -343,7 +343,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -360,7 +360,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -424,7 +424,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    BONECHEWERBEASTMASTERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BONECHEWERBEASTMASTERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -447,7 +447,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -459,11 +459,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -471,7 +471,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -488,7 +488,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -553,7 +553,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    BONECHEWERDESTROYERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BONECHEWERDESTROYERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -583,7 +583,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -595,7 +595,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -603,7 +603,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -620,7 +620,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -685,7 +685,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    BONECHEWERHUNGERERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BONECHEWERHUNGERERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -715,7 +715,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -727,7 +727,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -735,7 +735,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -752,7 +752,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -815,7 +815,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    BONECHEWERRAVENERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BONECHEWERRAVENERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -832,7 +832,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -844,7 +844,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -852,7 +852,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -872,7 +872,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -935,7 +935,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    BONECHEWERRIPPERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BONECHEWERRIPPERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -951,7 +951,7 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -963,7 +963,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -971,7 +971,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -988,7 +988,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1051,7 +1051,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    FIENDISHHOUNDAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FIENDISHHOUNDAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1067,7 +1067,7 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1079,7 +1079,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1087,7 +1087,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1104,7 +1104,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1170,7 +1170,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    HELLFIREWATCHERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HELLFIREWATCHERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1200,7 +1200,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1212,7 +1212,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1220,7 +1220,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1237,7 +1237,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1301,7 +1301,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    SHATTEREDHANDWARHOUNDAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDWARHOUNDAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1325,7 +1325,7 @@
 */
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1337,7 +1337,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1345,7 +1345,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1362,7 +1362,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1434,7 +1434,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    WATCHKEEPERGARGOLMARAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    WATCHKEEPERGARGOLMARAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1477,7 +1477,7 @@
 		CalledForHelp = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 
@@ -1508,7 +1508,7 @@
 		spells[2].casttime = (uint32)time(NULL) + 10;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1527,7 +1527,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1535,7 +1535,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->PlaySoundToSet(10336);
 
@@ -1564,7 +1564,7 @@
 
 		if (t > spells[2].casttime)
 		{
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			target = FindTarget();
 			if (target)
 			{
@@ -1585,7 +1585,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1631,13 +1631,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1655,7 +1655,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1673,15 +1673,15 @@
 		}
 	}
 
-	UnitPointer FindTarget()
+	Unit * FindTarget()
 	{
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		float distance = 5.0f;
 
-		UnitPointer pUnit;
+		Unit * pUnit;
 		float dist;
 
-		for (unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
+		for (unordered_set<Object *>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
 		{
 			if((*itr)->GetTypeId() != TYPEID_UNIT && (*itr)->GetTypeId() != TYPEID_PLAYER)
 				continue;
@@ -1734,7 +1734,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(OmorTheUnscarredAI, MoonScriptCreatureAI);
-	OmorTheUnscarredAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	OmorTheUnscarredAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		SpellDesc *pShield = AddSpell(OMOR_THE_UNSCARRED_DEMONIC_SHIELD, Target_Self, 30, 0, 25);
 		pShield->mEnabled = false;
@@ -1761,13 +1761,13 @@
 		AddEmote(Event_OnDied, "It is... not over.", Text_Yell, 10284);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		SetCanMove(false);
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		ParentClass::OnCombatStop(pTarget);
 		if (IsAlive())
@@ -1784,7 +1784,7 @@
 			pShield->mEnabled = true;
 		}
 
-		UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+		Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL)
 		{
 			if (GetRangeToUnit(pTarget) > 10.0f)
@@ -1848,7 +1848,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    HELLFIRESENTRYAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HELLFIRESENTRYAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1864,7 +1864,7 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1876,7 +1876,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1884,7 +1884,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1901,7 +1901,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1964,7 +1964,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    VAZRUDENAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    VAZRUDENAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		PHASE_LIMITER = 2;
 		nrspells = 1;
@@ -1982,7 +1982,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1995,7 +1995,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
 		PHASE_LIMITER = 2;
@@ -2004,7 +2004,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -2027,7 +2027,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2117,7 +2117,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    NAZANAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    NAZANAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		VAZRUDEN_THE_HERALD_EVENT_PHASE = 1;
 		HERALDS_SENTRY_DEATHS = 0;
@@ -2177,7 +2177,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2189,7 +2189,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)	// not finished yet, as I must force Nazan to go into combat state
+    void OnCombatStop(Unit * mTarget)	// not finished yet, as I must force Nazan to go into combat state
     {
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
 		if (VAZRUDEN_THE_HERALD_EVENT_PHASE == 3)
@@ -2215,7 +2215,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		VAZRUDEN_THE_HERALD_EVENT_PHASE = 1;
 		HERALDS_SENTRY_DEATHS = 0;
@@ -2275,7 +2275,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2351,7 +2351,7 @@
 			_unit->GetAIInterface()->setWaypointToMove(2);
 			if (_unit->GetAIInterface()->GetNextTarget())
 			{
-				UnitPointer target = NULLUNIT;
+				Unit * target = NULLUNIT;
 				target = _unit->GetAIInterface()->GetNextTarget();
 				_unit->CastSpell(target, spells[1].info, spells[1].instant);
 			}
Index: Trunk/src/InstanceScripts/Instance_MagistersTerrace.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_MagistersTerrace.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_MagistersTerrace.cpp	(working copy)
@@ -76,7 +76,7 @@
 class SelinFireheartAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SelinFireheartAI, MoonScriptCreatureAI);
-	SelinFireheartAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	SelinFireheartAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SF_DRAINLIFE, Target_RandomPlayer, 8, 0, 35);
 
@@ -88,7 +88,7 @@
 		FelExplosion = AddSpell(SF_FELEXPLOSION, Target_Self, 0, 0, 0);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		/*
 			Selin Fireheart starts with 0 mana and drains it from the felcrystals in the room
@@ -119,7 +119,7 @@
 			Attempt to get a Fel Crystal and move to it if not in range.
 			Once in range we get the FelCrystal to cast Mana Rage on Selin
 		*/
-		UnitPointer FelCrystal = NULLUNIT;
+		Unit * FelCrystal = NULLUNIT;
 		PreventActions(false);
 
 		FelCrystal = FindFelCrystal();
@@ -168,12 +168,12 @@
 		SetAllowTargeting(Allow);
 	}
 
-	UnitPointer FindFelCrystal()
+	Unit * FindFelCrystal()
 	{
 		/*
 			Find a FelCrystal
 		*/
-		UnitPointer FC = NULLUNIT;
+		Unit * FC = NULLUNIT;
 		for(int x=0; x<5; x++)
 		{
 			FC = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(FelCrystals[x].mX, FelCrystals[x].mY, FelCrystals[x].mZ, FelCrystals[x].mAddition);
@@ -217,7 +217,7 @@
 class VexallusAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(VexallusAI, MoonScriptBossAI);
-	VexallusAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	VexallusAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddPhaseSpell( 1, AddSpell( VEXALLUS_CHAIN_LIGHTNING, Target_Current, 19, 0, 8, 0, 0));
 		AddPhaseSpell( 1, AddSpell( VEXALLUS_ARCANE_SHOCK, Target_ClosestPlayer, 12, 0, 20, 0, 0, true, "Un...con...tainable.", Text_Yell, 12392));
@@ -229,7 +229,7 @@
 		mSummon = 0;
 	}
 	
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		Emote("Drain... life...", Text_Yell, 12389);
 		SetPhase(1);
@@ -277,7 +277,7 @@
 class Priestess_DelrissaAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(Priestess_DelrissaAI, MoonScriptBossAI);
-	Priestess_DelrissaAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	Priestess_DelrissaAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(PRIESTESS_DELRISSA_DISPEL_MAGIC, Target_RandomFriendly, 35, 0, 5, 0, 30);
 		AddSpell(PRIESTESS_DELRISSA_FLASH_HEAL, Target_RandomFriendly, 40, 1.5, 7, 0, 40);
@@ -291,7 +291,7 @@
 		mKilledPlayers = 0;
 	};
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		Emote("Annihilate them!", Text_Yell, 12395);
 		//AggroRandomUnit();	// Want to aggro random unit ? Set it instead of calling premade
@@ -300,7 +300,7 @@
 		ParentClass::OnCombatStart(pTarget);
 	};
 	
-	void OnTargetDied(UnitPointer pTarget)
+	void OnTargetDied(Unit * pTarget)
 	{
 		if(!pTarget || !pTarget->IsPlayer())
 			return;
@@ -321,7 +321,7 @@
 		ParentClass::OnTargetDied(pTarget);
 	};
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		Emote("It's been a kick, really.", Text_Yell, 12411);
 		mKilledPlayers = 0;
@@ -361,7 +361,7 @@
 class Kagani_NightstrikeAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(Kagani_NightstrikeAI, MoonScriptBossAI);
-	Kagani_NightstrikeAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	Kagani_NightstrikeAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(KAGANI_NIGHTSTRIKE_KidneyShot, Target_Current, 80, 0, 25, 0, 30);
 		AddSpell(KAGANI_NIGHTSTRIKE_Gouge, Target_ClosestPlayer, 20, 0, 18, 0, 30); 
@@ -381,7 +381,7 @@
 class Ellrys_DuskhallowAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(Ellrys_DuskhallowAI, MoonScriptBossAI);
-	Ellrys_DuskhallowAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	Ellrys_DuskhallowAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(EllrysDuskhallow_Immolate, Target_Current, 75, 2, 15, 0, 30);
 		AddSpell(EllrysDuskhallow_ShadowBolt, Target_RandomPlayer, 75, 3, 5, 4, 40);
@@ -405,7 +405,7 @@
 class Eramas_BrightblazeAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(Eramas_BrightblazeAI, MoonScriptBossAI);
-	Eramas_BrightblazeAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	Eramas_BrightblazeAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(ERAMAS_BRIGHTBLAZE_KNOCKDOWN, Target_Current, 25, 0, 5, 0, 5);
 		AddSpell(ERAMAS_BRIGHTBLAZE_SNAP_KICK, Target_SecondMostHated, 40, 0, 2, 0, 5);
@@ -429,7 +429,7 @@
 class YazzaiAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(YazzaiAI, MoonScriptBossAI);
-	YazzaiAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	YazzaiAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(YAZZAI_POLYMORPH, Target_RandomPlayer, 30, 1.5, 16, 0, 30);
 		AddSpell(YAZZAI_ICE_BLOCK, Target_Self, 20, 0, 300, 0, 1);
@@ -458,7 +458,7 @@
 class Warlord_SalarisAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(Warlord_SalarisAI, MoonScriptBossAI);
-	Warlord_SalarisAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	Warlord_SalarisAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		//AddSpell(uint32 pSpellId, TargetType pTargetType, float pChance, float pCastTime, int32 pCooldown, float pMinRange, float pMaxRange
 		AddSpell(WARLORD_SALARIS_INTERCEPT, Target_RandomPlayer , 25, 0, 8, 8, 25 );
@@ -488,7 +488,7 @@
 class GaraxxasAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(GaraxxasAI, MoonScriptBossAI);
-	GaraxxasAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	GaraxxasAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(GARAXXAS_AIMED_SHOT, Target_RandomPlayer, 90, 3, 6, 5, 35);
 		AddSpell(GARAXXAS_SHOOT, Target_RandomPlayer, 90, 2.5, 5, 5, 30);
@@ -513,7 +513,7 @@
 class ApokoAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ApokoAI, MoonScriptCreatureAI);
-	ApokoAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ApokoAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(APOKO_FROST_SHOCK, Target_RandomPlayer, 40, 0, 8, 0, 20);
 		AddSpell(APOKO_LESSER_HEALING_WAVE, Target_RandomFriendly, 50, 1.5, 10, 0, 40);
@@ -536,7 +536,7 @@
 class ZelfanAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ZelfanAI, MoonScriptCreatureAI);
-	ZelfanAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ZelfanAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
       AddSpell(ZELFAN_GOBLIN_DRAGON_GUN, Target_Current, 90, 0, 15, 0, 5);
 	  AddSpell(ZELFAN_HIGH_EXPLOSIV_SHEEP, Target_Self, 90, 2, 80);
@@ -562,7 +562,7 @@
 class CoilskarWitchAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(CoilskarWitchAI, MoonScriptBossAI);
-	CoilskarWitchAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	CoilskarWitchAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(COILSKAR_WITCH_FORKED_LIGHTNING, Target_Current, 60, 2, 12, 0, 30);
 		AddSpell(COILSKAR_WITCH_FROST_ARROW, Target_RandomPlayer, 15, 0, 16, 0, 40);
@@ -585,7 +585,7 @@
 class SisterOfTormentAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SisterOfTormentAI, MoonScriptBossAI);
-	SisterOfTormentAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	SisterOfTormentAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(SISTER_OF_TORMENT_LASH_OF_PAIN, Target_Current, 60, 0, 8, 0, 5);
 		AddSpell(SISTER_OF_TORMENT_DEADLY_EMBRACE, Target_RandomPlayer, 20, 1.5, 16, 0, 20);
@@ -607,7 +607,7 @@
 class SunbladeBloodKnightAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SunbladeBloodKnightAI, MoonScriptBossAI);
-	SunbladeBloodKnightAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	SunbladeBloodKnightAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(BLOOD_KNIGHT_JUDGEMENT_OF_WRATH, Target_Current, 20, 0, 30, 0, 5);
 		AddSpell(BLOOD_KNIGHT_SEAL_OF_WRATH, Target_Self, 99, 0, 30, 0, 0);
@@ -628,7 +628,7 @@
 class SunbladeImpAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SunbladeImpAI, MoonScriptBossAI);
-	SunbladeImpAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	SunbladeImpAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(IMP_FIREBOLT, Target_Current, 100, 2, (int32)2.5, 0, 30);
 	}
@@ -648,7 +648,7 @@
 class SunbladeMageGuardAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SunbladeMageGuardAI, MoonScriptBossAI);
-	SunbladeMageGuardAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	SunbladeMageGuardAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(MAGE_GUARD_GLAVE_THROW, Target_Current, 60, 0, 25, 0, 5);
 		AddSpell(MAGE_GUARD_MAGIC_DAMPENING_FIELD, Target_RandomPlayer, 20, 1, 35, 0, 20);
@@ -669,7 +669,7 @@
 class SunbladeMagisterAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SunbladeMagisterAI, MoonScriptBossAI);
-	SunbladeMagisterAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	SunbladeMagisterAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(MAGISTER_FROSTBOLT, Target_Current, 65, 2, 4, 0, 30);
 		AddSpell(MAGISTER_ARCANE_NOVA, Target_Self, 12, 1.5, 40, 0, 0);
Index: Trunk/src/InstanceScripts/Instance_ManaTombs.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_ManaTombs.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_ManaTombs.cpp	(working copy)
@@ -39,7 +39,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    ETHEREALDARKCASTERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ETHEREALDARKCASTERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -61,19 +61,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -89,7 +89,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -145,7 +145,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    ETHEREALPRIESTAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ETHEREALPRIESTAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -167,19 +167,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -195,7 +195,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -251,7 +251,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    ETHEREALTHEURGISTAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ETHEREALTHEURGISTAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -273,19 +273,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -301,7 +301,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -357,7 +357,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    ETHEREALSORCERERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ETHEREALSORCERERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -373,19 +373,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -401,7 +401,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -458,7 +458,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    NEXUSSTALKERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    NEXUSSTALKERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -486,19 +486,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -514,7 +514,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -569,7 +569,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    NEXUSTERRORAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    NEXUSTERRORAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -585,19 +585,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -613,7 +613,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -669,7 +669,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    MANALEECHAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MANALEECHAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -685,19 +685,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->CastSpell(_unit, spells[0].info, spells[0].instant);
        RemoveAIUpdateEvent();
@@ -714,7 +714,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -774,7 +774,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    ETHEREALSPELLBINDERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ETHEREALSPELLBINDERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -807,19 +807,19 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -835,7 +835,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -892,7 +892,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    ETHEREALWRAITHAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ETHEREALWRAITHAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -908,19 +908,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -936,7 +936,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1001,7 +1001,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    PANDEMONIUSAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PANDEMONIUSAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1027,7 +1027,7 @@
 		spells[1].maxdist2cast = 40.0f;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < 2; i++)
 			spells[i].casttime = 0;
@@ -1052,7 +1052,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1071,7 +1071,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1079,7 +1079,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Do the void... once... more.");
         _unit->PlaySoundToSet(10566);
@@ -1107,7 +1107,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1149,13 +1149,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1173,7 +1173,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1218,7 +1218,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    TAVAROKAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TAVAROKAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1250,7 +1250,7 @@
 		spells[2].cooldown = 10;
 	} 
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -1258,7 +1258,7 @@
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1266,7 +1266,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1282,7 +1282,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1328,13 +1328,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1352,7 +1352,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1399,7 +1399,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    NEXUSPRINCESHAFFARAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    NEXUSPRINCESHAFFARAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -1447,7 +1447,7 @@
 		spells[4].cooldown = 10;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < 3; i++)
 			spells[i].casttime = 0;
@@ -1475,7 +1475,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1494,7 +1494,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1502,7 +1502,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I must bid you... Farewell."); // I don't think it's correct.
         _unit->PlaySoundToSet(10546);
@@ -1531,7 +1531,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1592,13 +1592,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1616,7 +1616,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1658,7 +1658,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    YorAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    YorAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1681,7 +1681,7 @@
 		spells[1].cooldown = 25;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		uint32 t = (uint32)time(NULL);
 		spells[0].casttime = 0;
@@ -1690,7 +1690,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1698,7 +1698,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -1714,7 +1714,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
Index: Trunk/src/InstanceScripts/Instance_Mauradon.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_Mauradon.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_Mauradon.cpp	(working copy)
@@ -32,7 +32,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    CelebrasTheCursed(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CelebrasTheCursed(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -68,7 +68,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -80,11 +80,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -92,7 +92,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -109,7 +109,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -167,7 +167,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    LordVyletongue(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LordVyletongue(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -194,7 +194,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -206,11 +206,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -218,7 +218,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -235,7 +235,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -293,7 +293,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    MeshlokTheHarvester(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MeshlokTheHarvester(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -320,7 +320,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -332,11 +332,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -344,7 +344,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -361,7 +361,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -419,7 +419,7 @@
 	SP_AI_Spell spells[4];
  bool m_spellcheck[4];
 
-    PrincessTheradras(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PrincessTheradras(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -464,7 +464,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -476,11 +476,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -488,7 +488,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -505,7 +505,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -563,7 +563,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    Razorlash(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Razorlash(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -599,7 +599,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -611,11 +611,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -623,7 +623,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -640,7 +640,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -698,7 +698,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    TinkererGizlock(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TinkererGizlock(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -725,7 +725,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -737,11 +737,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -749,7 +749,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -766,7 +766,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -824,7 +824,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    Noxxion(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Noxxion(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -851,7 +851,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -863,11 +863,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -875,7 +875,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -892,7 +892,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Instance_Nexus.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_Nexus.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_Nexus.cpp	(working copy)
@@ -41,7 +41,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(AnomalusAI, MoonScriptBossAI);
-	AnomalusAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	AnomalusAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
     {
 		if( IsHeroic() )
 			AddSpell(SPARK_HC, Target_RandomPlayer, 80, 0, 3);
@@ -51,7 +51,7 @@
 		AddEmote( Event_OnDied, "Of course.", Text_Yell, 13187 );
     };
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		Emote("Chaos beckons.", Text_Yell, 13186);
 		summon = 0;
@@ -93,9 +93,9 @@
 		summon += 1;
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
-		GameObjectPointer pContainmentSphere = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 321.012451f, 12.578364f, -16.591925f, ANOMALUS_CS );
+		GameObject * pContainmentSphere = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 321.012451f, 12.578364f, -16.591925f, ANOMALUS_CS );
 		if( pContainmentSphere != NULL )
 			pContainmentSphere->SetState(1);
 	
@@ -110,14 +110,14 @@
 private:
 	int				summon;
 	bool			mRift;
-	CreaturePointer pChaoticRift;
+	Creature * pChaoticRift;
 };
 
 class ChaoticRiftAI : public MoonScriptBossAI
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(ChaoticRiftAI, MoonScriptBossAI);
-	ChaoticRiftAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	ChaoticRiftAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell( SUMMON_MANA_WRAITH, Target_Self, 30, 0, dbcSpell.LookupEntryForced(SUMMON_MANA_WRAITH)->RecoveryTime );
 		AddSpell( CHAOTIC_ENERGY_BURST, Target_RandomPlayer, 30, 0, dbcSpell.LookupEntryForced(CHAOTIC_ENERGY_BURST)->RecoveryTime );
@@ -130,13 +130,13 @@
 		ParentClass::OnLoad();
 	};
 
-    void OnDied(UnitPointer  mKiller)
+    void OnDied(Unit *  mKiller)
     {
 		Despawn( 2000, 0 );
 		ParentClass::OnDied(mKiller);
     };
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		Despawn( 2000, 0 );
 		ParentClass::OnCombatStop(pTarget);
@@ -152,15 +152,15 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(CraziedManaWrathAI, MoonScriptBossAI);
-	CraziedManaWrathAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature){};
+	CraziedManaWrathAI(Creature * pCreature) : MoonScriptBossAI(pCreature){};
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		Despawn();
 		ParentClass::OnCombatStop(pTarget);
 	};
 
-	void OnDied(UnitPointer  mKiller)
+	void OnDied(Unit *  mKiller)
     {
 		Despawn();
 		ParentClass::OnDied(mKiller);
@@ -227,7 +227,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(TelestraBossAI, MoonScriptBossAI);
-	TelestraBossAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	TelestraBossAI(Creature *pCreature) : MoonScriptBossAI(pCreature)
 	{
 		if(IsHeroic())
 		{
@@ -295,9 +295,9 @@
 		ParentClass::AIUpdate();
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
-		GameObjectPointer pContainmentSphere = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 284.700287f, -25.500309f, -16.606443f, TELESTRA_CS );
+		GameObject * pContainmentSphere = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 284.700287f, -25.500309f, -16.606443f, TELESTRA_CS );
 		if( pContainmentSphere != NULL )
 			pContainmentSphere->SetState(1);
 
@@ -311,14 +311,14 @@
 
 private:
 	bool	pReturned;
-	CreaturePointer		pFire, pFrost, pArcane;
+	Creature *		pFire, pFrost, pArcane;
 };
 
 class TelestraFireAI : public MoonScriptBossAI
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(TelestraFireAI, MoonScriptBossAI);
-	TelestraFireAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	TelestraFireAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		if( IsHeroic() )
 		{
@@ -338,13 +338,13 @@
 		ParentClass::OnLoad();
 	};
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		Despawn();
 		ParentClass::OnCombatStop(pTarget);
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		Despawn();
 		ParentClass::OnDied(pKiller);
@@ -360,7 +360,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(TelestraFrostAI, MoonScriptBossAI);
-	TelestraFrostAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	TelestraFrostAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		if( IsHeroic() )
 		{
@@ -380,13 +380,13 @@
 		ParentClass::OnLoad();
 	};
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		Despawn();
 		ParentClass::OnCombatStop(pTarget);
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		Despawn();
 		ParentClass::OnDied(pKiller);
@@ -402,7 +402,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(TelestraArcaneAI, MoonScriptBossAI);
-	TelestraArcaneAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	TelestraArcaneAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(TIME_STOP, Target_Self, 30, 1.5, 30);
 	};
@@ -413,13 +413,13 @@
 		ParentClass::OnLoad();
 	};
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		Despawn();
 		ParentClass::OnCombatStop(pTarget);
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		Despawn();
 		ParentClass::OnDied(pKiller);
@@ -456,7 +456,7 @@
 #define SPELL_CRYSTAL_SPIKE			47944
 #define SPELL_CRYSTAL_SPIKE_H		57067
 
-void SpellFunc_CrystalSpikes( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_CrystalSpikes( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	if(pCreatureAI != NULL)
 	{
@@ -478,7 +478,7 @@
 class OrmorokAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(OrmorokAI, MoonScriptBossAI);
-	OrmorokAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	OrmorokAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		if ( IsHeroic() )
 			AddSpell(TRAMPLE_H, Target_Current, 30, 0, 9 );
@@ -495,7 +495,7 @@
 		mEnraged = false;
 	};
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mEnraged = false;
 		ParentClass::OnCombatStart(pTarget);
@@ -512,9 +512,9 @@
 		ParentClass::AIUpdate();
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
-		GameObjectPointer pContainmentSphere = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 282.852997f, 12.378636f, -16.594494f, ORMOK_CS );
+		GameObject * pContainmentSphere = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 282.852997f, 12.378636f, -16.594494f, ORMOK_CS );
 		if( pContainmentSphere != NULL )
 			pContainmentSphere->SetState(1);
 
@@ -534,7 +534,7 @@
 class CrystalSpikeAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(CrystalSpikeAI, MoonScriptBossAI);
-	CrystalSpikeAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature){};
+	CrystalSpikeAI(Creature * pCreature) : MoonScriptBossAI(pCreature){};
 
 	void OnLoad()
 	{
@@ -559,7 +559,7 @@
 		}
 		else if( m_part == 5 )
 		{
-			PlayerPointer _plr = GetNearestPlayer();
+			Player * _plr = GetNearestPlayer();
 			
 			if ( IsHeroic() )
 			{
@@ -600,7 +600,7 @@
 class KeristraszaAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(KeristraszaAI, MoonScriptBossAI);
-	KeristraszaAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	KeristraszaAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		if ( IsHeroic() )
 			AddSpell( CRYSTALFIRE_BREATH_HC, Target_Self, 30, 1, 14 );
@@ -658,10 +658,10 @@
 class ContainmentSphereAI : public GameObjectAIScript
 {
 public:
-	ContainmentSphereAI(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new ContainmentSphereAI(GO); }
+	ContainmentSphereAI(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new ContainmentSphereAI(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)	
+	void OnActivate(Player * pPlayer)	
 	{
 		KeristraszaAI* Keristrasza = (KeristraszaAI*)_gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(302.235321f, -5.804970f, -15.564095f, CN_KERISTRASZA)->GetScript();
 		if( Keristrasza != NULL )
Index: Trunk/src/InstanceScripts/Instance_OldHillsbradFoothills.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_OldHillsbradFoothills.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_OldHillsbradFoothills.cpp	(working copy)
@@ -39,7 +39,7 @@
    SP_AI_Spell spells[3];
    bool m_spellcheck[3];
 
-     LIEUTENANTDRAKEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+     LIEUTENANTDRAKEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
       nrspells = 3;
       for(int i=0;i<nrspells;i++)
@@ -78,7 +78,7 @@
       spells[2].attackstoptimer = 1000;*/
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I know what you're up to, and I mean to put an end to it, permanently!");
@@ -92,7 +92,7 @@
          spells[i].casttime = spells[i].cooldown;
    }
 
-   void OnTargetDied(UnitPointer mTarget)
+   void OnTargetDied(Unit * mTarget)
     {
       if(_unit->GetHealthPct() > 0)
       {
@@ -101,7 +101,7 @@
       }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
       CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -109,7 +109,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Thrall... must not... go free.");
@@ -128,7 +128,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
          float comulativeperc = 0;
-          UnitPointer target = NULLUNIT;
+          Unit * target = NULLUNIT;
          for(int i=0;i<nrspells;i++)
          {
             spells[i].casttime--;
@@ -196,7 +196,7 @@
    SP_AI_Spell spells[4];
    bool m_spellcheck[4];
 
-     CAPTAINSKARLOCAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+     CAPTAINSKARLOCAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
       nrspells = 4;
       for(int i=0;i<nrspells;i++)
@@ -247,7 +247,7 @@
       spells[2].attackstoptimer = 1000;*/
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Thrall! You didn't really think you would escape did you? You and your allies shall answer to Blackmoore - after I've had my fun!");
@@ -261,7 +261,7 @@
          spells[i].casttime = spells[i].cooldown;
    }
 
-   void OnTargetDied(UnitPointer mTarget)
+   void OnTargetDied(Unit * mTarget)
     {
       if(_unit->GetHealthPct() > 0)
       {
@@ -283,7 +283,7 @@
       }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
       CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -291,7 +291,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Guards! Urgh..Guards..!");
@@ -310,7 +310,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
          float comulativeperc = 0;
-          UnitPointer target = NULLUNIT;
+          Unit * target = NULLUNIT;
          for(int i=0;i<nrspells;i++)
          {
             spells[i].casttime--;
@@ -374,7 +374,7 @@
    SP_AI_Spell spells[4];
    bool m_spellcheck[4];
 
-     EPOCHHUNTERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+     EPOCHHUNTERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
       nrspells = 4;
       for(int i=0;i<nrspells;i++)
@@ -411,7 +411,7 @@
       spells[3].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
       CastTime();
 	  switch (RandomUInt(1))
@@ -434,7 +434,7 @@
          spells[i].casttime = spells[i].cooldown;
    }
 
-   void OnTargetDied(UnitPointer mTarget)
+   void OnTargetDied(Unit * mTarget)
     {
       if(_unit->GetHealthPct() > 0)
       {
@@ -456,7 +456,7 @@
       }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
       CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -464,7 +464,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
       CastTime();
       _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "No!...The master... will not... be pleased.");
@@ -483,7 +483,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
          float comulativeperc = 0;
-          UnitPointer target = NULLUNIT;
+          Unit * target = NULLUNIT;
          for(int i=0;i<nrspells;i++)
          {
             spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Instance_RagefireChasm.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_RagefireChasm.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_RagefireChasm.cpp	(working copy)
@@ -32,7 +32,7 @@
 class RagefireShamanAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(RagefireShamanAI, MoonScriptCreatureAI);
-    RagefireShamanAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    RagefireShamanAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Healing Wave
 		AddSpell(11986, Target_WoundedFriendly, 15, 3, 10);
@@ -46,7 +46,7 @@
 class RagefireTroggAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(RagefireTroggAI, MoonScriptCreatureAI);
-    RagefireTroggAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    RagefireTroggAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Strike
 		AddSpell(11976, Target_Current, 40, 0, 0);
@@ -58,7 +58,7 @@
 class SearingBladeWarlockAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SearingBladeWarlockAI, MoonScriptCreatureAI);
-    SearingBladeWarlockAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    SearingBladeWarlockAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Shadow Bolt
 		AddSpell(20791, Target_Current, 20, 3, 0);
@@ -71,7 +71,7 @@
 class SearingBladeEnforcerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SearingBladeEnforcerAI, MoonScriptCreatureAI);
-    SearingBladeEnforcerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    SearingBladeEnforcerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Shield Slam
 		AddSpell(8242, Target_Current, 15, 0, 0);
@@ -83,7 +83,7 @@
 class BladeCultistAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BladeCultistAI, MoonScriptCreatureAI);
-    BladeCultistAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    BladeCultistAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Curse of Agony
 		AddSpell(18266, Target_Current, 30, 0, 15);
@@ -95,7 +95,7 @@
 class MoltenElementalAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(MoltenElementalAI, MoonScriptCreatureAI);
-    MoltenElementalAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    MoltenElementalAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Fire Shield
 		AddSpell(134, Target_Self, 40, 1, 15);
@@ -107,7 +107,7 @@
 class EarthborerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(EarthborerAI, MoonScriptCreatureAI);
-    EarthborerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    EarthborerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Earthborer Acid
 		AddSpell(18070, Target_Current, 15, 0, 0);
@@ -118,10 +118,10 @@
 class BloodFilledOrb : public GameObjectAIScript
 {
 public:
-	BloodFilledOrb(GameObjectPointer  goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer  GO) { return new BloodFilledOrb(GO); }
+	BloodFilledOrb(GameObject *  goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject *  GO) { return new BloodFilledOrb(GO); }
 
-	void OnActivate(PlayerPointer  pPlayer)
+	void OnActivate(Player *  pPlayer)
 	{
 		// Make sure player has the quest and Zelemar isn't spawned yet
 		if(!pPlayer->HasQuest(9692)) // The Path of the Adept
@@ -129,7 +129,7 @@
 			pPlayer->GetSession()->SendNotification("Request quest `The Path of the Adept`.");
 			return;
 		}
-		CreaturePointer Zelemar = NULLCREATURE;
+		Creature * Zelemar = NULLCREATURE;
 		Zelemar = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-370.133f, 162.519f, -21.1299f, 17830);
 		if(Zelemar)
 			return;
@@ -151,7 +151,7 @@
 class OggleflintAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(OggleflintAI, MoonScriptCreatureAI);
-	OggleflintAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	OggleflintAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		// Cleave
 		AddSpell(40505, Target_Current, 10, 0, 1);
@@ -163,7 +163,7 @@
 class TaragamanAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(TaragamanAI, MoonScriptCreatureAI);
-	TaragamanAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	TaragamanAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		// Fire Nova
 		AddSpell(11970, Target_Self, 10, 2, 0);
@@ -177,7 +177,7 @@
 class JergoshAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(JergoshAI, MoonScriptCreatureAI);
-	JergoshAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	JergoshAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		// Immolate
 		AddSpell(20800, Target_Current, 15, 2, 0);
@@ -191,7 +191,7 @@
 class BazzalanAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BazzalanAI, MoonScriptCreatureAI);
-	BazzalanAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BazzalanAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		// Sinister Strike
 		AddSpell(14873, Target_Current, 15, 0, 0);
Index: Trunk/src/InstanceScripts/Instance_RazorfenDowns.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_RazorfenDowns.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_RazorfenDowns.cpp	(working copy)
@@ -33,7 +33,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    AmnennarTheColdbringer(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AmnennarTheColdbringer(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -69,7 +69,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -81,11 +81,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -93,7 +93,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -110,7 +110,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -166,7 +166,7 @@
 class Glutton : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(Glutton, MoonScriptCreatureAI);
-	Glutton(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	Glutton(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		//spells
 		mDiseaseCloud = AddSpell(DISEASE_CLOUD, Target_Self, 0, 0, 0, 0, 0);
@@ -174,7 +174,7 @@
 		mFrenzy->AddEmote("Glutton is getting hungry!", Text_Yell);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		CastSpellNowNoScheduling(mDiseaseCloud);
 
@@ -191,7 +191,7 @@
 class MordreshFireEye : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(MordreshFireEye, MoonScriptCreatureAI);
-	MordreshFireEye(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	MordreshFireEye(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		//spells
 		AddSpell(FIRE_NOVA, Target_Self, 10, 2, 0);
@@ -206,7 +206,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    PlaguemawTheRotting(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PlaguemawTheRotting(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -233,7 +233,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -245,11 +245,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -257,7 +257,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -274,7 +274,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -331,7 +331,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    Ragglesnout(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Ragglesnout(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -358,7 +358,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -370,11 +370,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -382,7 +382,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -399,7 +399,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -457,7 +457,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    TutenKash(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TutenKash(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -484,7 +484,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -496,11 +496,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -508,7 +508,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -525,7 +525,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Instance_ScarletMonastery.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_ScarletMonastery.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_ScarletMonastery.cpp	(working copy)
@@ -40,7 +40,7 @@
 
 bool m_spellcheck[1]; 
 
-LokseyAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+LokseyAI(Creature * pCreature) : CreatureAIScript(pCreature)
 {
 nrspells = 1; 
 mPhase = 0;
@@ -57,7 +57,7 @@
 spells[0].attackstoptimer = 1000;
 }
 
-void OnCombatStart(UnitPointer mTarget)
+void OnCombatStart(Unit * mTarget)
 {
 _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Release the hounds!");
 
@@ -66,7 +66,7 @@
 RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 }
 
-void OnTargetDied(UnitPointer mTarget)
+void OnTargetDied(Unit * mTarget)
 {
 
 if (_unit->GetHealthPct() > 0)    
@@ -87,7 +87,7 @@
 	}
 }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
     {
         if(fAmount < 5) return;
         // <25% hp -> We go to phase 1
@@ -106,14 +106,14 @@
 		HpEnrage();
     }
 
-void OnCombatStop(UnitPointer mTarget)
+void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     } 
 
-void OnDied(UnitPointer mKiller)
+void OnDied(Unit * mKiller)
     {
       
 RemoveAIUpdateEvent();
@@ -145,7 +145,7 @@
 if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 {
 float comulativeperc = 0;
-UnitPointer target = NULLUNIT;
+Unit * target = NULLUNIT;
 for(int i=0;i<nrspells;i++)
 {
 if(!spells[i].perctrigger) continue;
@@ -221,7 +221,7 @@
 
 bool m_spellcheck[4]; 
 
-DoanAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+DoanAI(Creature * pCreature) : CreatureAIScript(pCreature)
 {
 nrspells = 4; 
 mPhase = 0;
@@ -259,7 +259,7 @@
 
 }
 
-void OnCombatStart(UnitPointer mTarget)
+void OnCombatStart(Unit * mTarget)
 {
 _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "You will not defile these mysteries!");
 
@@ -268,7 +268,7 @@
 RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 }
 
-void OnTargetDied(UnitPointer mTarget)
+void OnTargetDied(Unit * mTarget)
 {
 
 if (_unit->GetHealthPct() > 0)    
@@ -289,7 +289,7 @@
 	}
 }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
     {
         if(fAmount < 5) return;
         // <50% hp -> We go to phase 1
@@ -310,14 +310,14 @@
 		Boom();
     }
 
-void OnCombatStop(UnitPointer mTarget)
+void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     } 
 
-void OnDied(UnitPointer mKiller)
+void OnDied(Unit * mKiller)
     {
       
 RemoveAIUpdateEvent();
@@ -354,7 +354,7 @@
 if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 {
 float comulativeperc = 0;
-UnitPointer target = NULLUNIT;
+Unit * target = NULLUNIT;
 for(int i=0;i<nrspells;i++)
 {
 if(!spells[i].perctrigger) continue;
@@ -428,7 +428,7 @@
 
 bool m_spellcheck[1]; 
 
-VishasAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+VishasAI(Creature * pCreature) : CreatureAIScript(pCreature)
 {
 nrspells = 1; 
 mPhase = 0;
@@ -445,7 +445,7 @@
 spells[0].attackstoptimer = 1000;
 }
 
-void OnCombatStart(UnitPointer mTarget)
+void OnCombatStart(Unit * mTarget)
 {
 _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Tell me...tell me everything.");
 
@@ -454,7 +454,7 @@
 RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 }
 
-void OnTargetDied(UnitPointer mTarget)
+void OnTargetDied(Unit * mTarget)
 {
 
 if (_unit->GetHealthPct() > 0)    
@@ -475,7 +475,7 @@
 	}
 }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
     {
         if(fAmount < 5) return;
         // <50% hp -> We go to phase 1
@@ -506,14 +506,14 @@
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I'll rip the secrets from your flesh!");
     }
 
-void OnCombatStop(UnitPointer mTarget)
+void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     } 
 
-void OnDied(UnitPointer mKiller)
+void OnDied(Unit * mKiller)
     {
       
 RemoveAIUpdateEvent();
@@ -542,7 +542,7 @@
 if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 {
 float comulativeperc = 0;
-UnitPointer target = NULLUNIT;
+Unit * target = NULLUNIT;
 for(int i=0;i<nrspells;i++)
 {
 if(!spells[i].perctrigger) continue;
@@ -615,7 +615,7 @@
 
 bool m_spellcheck[3]; 
 
-MograineAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+MograineAI(Creature * pCreature) : CreatureAIScript(pCreature)
 {
 nrspells = 3; 
 mPhase = 0;
@@ -645,7 +645,7 @@
 
 }
 
-void OnCombatStart(UnitPointer mTarget)
+void OnCombatStart(Unit * mTarget)
 {
 _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Infidels. They must be purified!");
 
@@ -654,7 +654,7 @@
 RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 }
 
-void OnTargetDied(UnitPointer mTarget)
+void OnTargetDied(Unit * mTarget)
 {
 
 if (_unit->GetHealthPct() > 0)    
@@ -676,16 +676,16 @@
 }
 
 
-void OnCombatStop(UnitPointer mTarget)
+void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     } 
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
      {
-   GameObjectPointer  pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(1173.01f, 1389.91f, 31.9723f, 104600);
+   GameObject *  pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(1173.01f, 1389.91f, 31.9723f, 104600);
    if(pDoor == 0)
    return;
 
@@ -717,7 +717,7 @@
 if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 {
 float comulativeperc = 0;
-UnitPointer target = NULLUNIT;
+Unit * target = NULLUNIT;
 for(int i=0;i<nrspells;i++)
 {
 if(!spells[i].perctrigger) continue;
@@ -789,7 +789,7 @@
 SP_AI_Spell spells[3]; 
 bool m_spellcheck[3]; 
 
-WhitemaneAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+WhitemaneAI(Creature * pCreature) : CreatureAIScript(pCreature)
 {
 nrspells = 3; 
 mPhase = 0;
@@ -820,7 +820,7 @@
 spells[2].speech = "Arise, my champion!";
 }
 
-void OnCombatStart(UnitPointer mTarget)
+void OnCombatStart(Unit * mTarget)
 {
 _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Mograine has fallen? You shall pay for this treachery!");
 
@@ -829,7 +829,7 @@
 RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 }
 
-void OnTargetDied(UnitPointer mTarget)
+void OnTargetDied(Unit * mTarget)
 {
 
 if (_unit->GetHealthPct() > 0)    
@@ -850,7 +850,7 @@
 	}
 }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
     {
         if(fAmount < 5) return;
         // <50% hp -> We go to phase 1
@@ -888,14 +888,14 @@
 		_unit->CastSpell(_unit, spells[2].info, spells[2].instant);
 	}
 
-void OnCombatStop(UnitPointer mTarget)
+void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     } 
 
-void OnDied(UnitPointer mKiller)
+void OnDied(Unit * mKiller)
     {
       
 RemoveAIUpdateEvent();
@@ -923,7 +923,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -986,7 +986,7 @@
 ADD_CREATURE_FACTORY_FUNCTION(FairbanksAI); 
 SP_AI_Spell spells[2]; 
 bool m_spellcheck[2]; 
-FairbanksAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+FairbanksAI(Creature * pCreature) : CreatureAIScript(pCreature)
 {
 nrspells = 2; 
 mPhase = 0;
@@ -1009,12 +1009,12 @@
 spells[1].attackstoptimer = 1000;
 }
 
-void OnCombatStart(UnitPointer mTarget)
+void OnCombatStart(Unit * mTarget)
 {
 RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 }
 
-void OnTargetDied(UnitPointer mTarget)
+void OnTargetDied(Unit * mTarget)
 {
 
 if (_unit->GetHealthPct() > 0)    
@@ -1036,14 +1036,14 @@
 }
 
 	
-void OnCombatStop(UnitPointer mTarget)
+void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     } 
 
-void OnDied(UnitPointer mKiller)
+void OnDied(Unit * mKiller)
     {
       
 RemoveAIUpdateEvent();
@@ -1070,7 +1070,7 @@
 if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 {
 float comulativeperc = 0;
-UnitPointer target = NULLUNIT;
+Unit * target = NULLUNIT;
 for(int i=0;i<nrspells;i++)
 {
 if(!spells[i].perctrigger) continue;
@@ -1142,7 +1142,7 @@
 	SP_AI_Spell spells[3]; 
 	bool m_spellcheck[3]; 
 	
-	HerodAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	HerodAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 3; 
 		mPhase = 0;
@@ -1175,14 +1175,14 @@
 
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 	_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Ah, I've been waiting for a real challenge!");
 	_unit->PlaySoundToSet(5830);
 	RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 
 		if (_unit->GetHealthPct() > 0)    // Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
@@ -1203,7 +1203,7 @@
 		}
 	}
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
     {
         if(fAmount < 5) return;
         // <40% hp -> We go to phase 1
@@ -1223,7 +1223,7 @@
     }
 
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 		{
 			_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 			_unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1256,7 +1256,7 @@
 	if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 	{
 	float comulativeperc = 0;
-	UnitPointer target = NULLUNIT;
+	Unit * target = NULLUNIT;
 	for(int i=0;i<nrspells;i++)
 	{
 	if(!spells[i].perctrigger) continue;
Index: Trunk/src/InstanceScripts/Instance_Scholomance.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_Scholomance.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_Scholomance.cpp	(working copy)
@@ -46,7 +46,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    DoctorTheolenKrastinovAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DoctorTheolenKrastinovAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		FRENZY_LIMITER = 0;
 		nrspells = 3;
@@ -74,13 +74,13 @@
 		spells[2].perctrigger = 0.0f;
 		spells[2].attackstoptimer = 1000; 
 	}		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
 		FRENZY_LIMITER = 0;
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		FRENZY_LIMITER = 0;
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -88,7 +88,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
 		FRENZY_LIMITER = 0;
        RemoveAIUpdateEvent();
@@ -114,7 +114,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -175,7 +175,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    InstructorMaliciaAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    InstructorMaliciaAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 5;
 		for(int i=0;i<nrspells;i++)
@@ -214,19 +214,19 @@
 		spells[4].perctrigger = 5.0f;
 		spells[4].attackstoptimer = 1000; 
 	}		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -241,7 +241,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -300,7 +300,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    TheRavenianAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TheRavenianAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -333,19 +333,19 @@
 		spells[3].perctrigger = 11.0f;
 		spells[3].attackstoptimer = 1000;
 	}		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -360,7 +360,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -420,7 +420,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    LadyIlluciaBarovAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LadyIlluciaBarovAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 5;
 		for(int i=0;i<nrspells;i++)
@@ -459,19 +459,19 @@
 		spells[4].perctrigger = 4.0f;
 		spells[4].attackstoptimer = 1000;
 	}		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -486,7 +486,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -547,7 +547,7 @@
 	SP_AI_Spell spells[6];
 	bool m_spellcheck[6];
 
-    RasForstwhisperAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    RasForstwhisperAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 6;
 		for(int i=0;i<nrspells;i++)
@@ -592,20 +592,20 @@
 		spells[5].perctrigger = 13.0f;
 		spells[5].attackstoptimer = 2000; 
 	}		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->CastSpell(_unit, spells[1].info, spells[1].instant);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -620,7 +620,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -677,7 +677,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    JandiceBarovAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    JandiceBarovAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -704,19 +704,19 @@
 		spells[2].perctrigger = 5.0f;
 		spells[2].attackstoptimer = 1000;
 	}		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -731,7 +731,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -789,7 +789,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    KormokAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    KormokAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -816,20 +816,20 @@
 		spells[2].perctrigger = 4.0f;
 		spells[2].attackstoptimer = 1000;
 	}		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->CastSpell(_unit, spells[1].info, spells[1].instant);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -844,7 +844,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -902,7 +902,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    VectusAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    VectusAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		FRENZY_LIMITER = 0;
 		nrspells = 3;
@@ -930,14 +930,14 @@
 		spells[2].perctrigger = 0.0f;
 		spells[2].attackstoptimer = 1000;
 	}		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
 		FRENZY_LIMITER = 0;
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->CastSpell(_unit, spells[1].info, spells[1].instant);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		FRENZY_LIMITER = 0;
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -945,7 +945,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
 		FRENZY_LIMITER = 0;
        RemoveAIUpdateEvent();
@@ -966,7 +966,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1025,7 +1025,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    LordAlexeiBarovAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LordAlexeiBarovAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1052,20 +1052,20 @@
 		spells[2].perctrigger = 8.0f;
 		spells[2].attackstoptimer = 2000;
 	}		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->CastSpell(_unit, spells[0].info, spells[0].instant);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1080,7 +1080,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1139,7 +1139,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    LorekeeperPolkeltAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LorekeeperPolkeltAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -1173,19 +1173,19 @@
 		spells[3].attackstoptimer = 1000;
 	}		
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1201,7 +1201,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1259,7 +1259,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    DarkmasterGandlingAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DarkmasterGandlingAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3; // 4 ?
 		for(int i=0;i<nrspells;i++)
@@ -1286,20 +1286,20 @@
 		spells[2].perctrigger = 0.0f;
 		spells[2].attackstoptimer = 1000;
 	}		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->CastSpell(_unit, spells[2].info, spells[2].instant);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1314,7 +1314,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
Index: Trunk/src/InstanceScripts/Instance_SethekkHalls.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_SethekkHalls.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_SethekkHalls.cpp	(working copy)
@@ -39,7 +39,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    AVIANDARKHAWKAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AVIANDARKHAWKAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -55,19 +55,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -83,7 +83,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -122,7 +122,7 @@
 
 protected:
 
-	UnitPointer target;
+	Unit * target;
 	int nrspells;
 };
 
@@ -139,7 +139,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    AVIANRIPPERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AVIANRIPPERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -155,19 +155,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -183,7 +183,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -240,7 +240,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    AVIANWARHAWKAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AVIANWARHAWKAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -268,19 +268,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -296,7 +296,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -335,7 +335,7 @@
 
 protected:
 
-	UnitPointer target;
+	Unit * target;
 	int nrspells;
 };
 
@@ -354,7 +354,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    COBALTSERPENTAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COBALTSERPENTAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -382,19 +382,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -410,7 +410,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -466,7 +466,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    TIMELOSTCONTROLLERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TIMELOSTCONTROLLERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -488,19 +488,19 @@
 */
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -516,7 +516,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -572,7 +572,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    TIMELOSTSCRYERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TIMELOSTSCRYERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -594,19 +594,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -622,7 +622,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -678,7 +678,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    TIMELOSTSHADOWMAGEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TIMELOSTSHADOWMAGEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -694,19 +694,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -722,7 +722,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -778,7 +778,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    SETHEKKGUARDAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SETHEKKGUARDAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -800,19 +800,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -828,7 +828,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -883,7 +883,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    SETHEKKINITIATEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SETHEKKINITIATEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -899,19 +899,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -927,7 +927,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -983,7 +983,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    SETHEKKORACLEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SETHEKKORACLEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1005,19 +1005,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1033,7 +1033,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1089,7 +1089,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    SETHEKKPROPHETAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SETHEKKPROPHETAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1111,19 +1111,19 @@
 */
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1139,7 +1139,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1195,7 +1195,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    SETHEKKRAVENGUARDAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SETHEKKRAVENGUARDAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1217,19 +1217,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1245,7 +1245,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1300,7 +1300,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    SETHEKKSHAMANAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SETHEKKSHAMANAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1316,19 +1316,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1344,7 +1344,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1400,7 +1400,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    SETHEKKTALONLORDAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SETHEKKTALONLORDAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1422,19 +1422,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1450,7 +1450,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1489,7 +1489,7 @@
 
 protected:
 
-	UnitPointer target;
+	Unit * target;
 	int nrspells;
 };
 
@@ -1509,7 +1509,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(LakkaAI);
-	LakkaAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	LakkaAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		SetMoveType(Move_DontMoveWP);
 
@@ -1528,9 +1528,9 @@
 				{
 					SetMoveType(Move_WantedWP);
 					SetWaypointToMove(2);
-					PlayerPointer pPlayer	= NULLPLR;
+					Player * pPlayer	= NULLPLR;
 					QuestLogEntry *pQuest	= NULL;
-					for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+					for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 					{
 						if((*itr)->GetTypeId() == TYPEID_PLAYER)
 						{
@@ -1593,7 +1593,7 @@
 	SP_AI_Spell spells[9];
 	bool m_spellcheck[9];
 
-    DARKWEAVERSYTHAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DARKWEAVERSYTHAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 5;
 		for(int i=0;i<nrspells;i++)
@@ -1668,7 +1668,7 @@
 		Summons = 0;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < 9; i++)
 			spells[i].casttime = 0;
@@ -1695,7 +1695,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1714,7 +1714,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1724,13 +1724,13 @@
 		Summons = 0;
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "No more life, no more pain!"); // It's talking so <censored>
 		_unit->PlaySoundToSet(10508);
 
-		GameObjectPointer LakkasCage = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-160.813f, 157.043f, 0.194095f, 183051);
-		CreaturePointer mLakka = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-160.813f, 157.043f, 0.194095f, 18956);
+		GameObject * LakkasCage = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-160.813f, 157.043f, 0.194095f, 183051);
+		Creature * mLakka = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-160.813f, 157.043f, 0.194095f, 18956);
 
 		if (LakkasCage != NULL)
 		{
@@ -1788,7 +1788,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1854,7 +1854,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    TALONKINGIKISSAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TALONKINGIKISSAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1895,7 +1895,7 @@
 		Blink = false;
 	} 
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -1933,7 +1933,7 @@
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget) // left to keep it easy to add needed data.
+	void OnTargetDied(Unit * mTarget) // left to keep it easy to add needed data.
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1952,7 +1952,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1960,12 +1960,12 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Ikiss will not... die!");
 		_unit->PlaySoundToSet(10560);
 		
-		GameObjectPointer IkissDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(43.079f, 149.505f, 0.034f, 183398);
+		GameObject * IkissDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(43.079f, 149.505f, 0.034f, 183398);
 		if (IkissDoor != NULL)
 			IkissDoor->SetState(0);
 
@@ -1997,7 +1997,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2052,13 +2052,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -2076,7 +2076,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2096,13 +2096,13 @@
 
 	void BlinkCast()
 	{
-		std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+		std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 											/* If anyone wants to use this function, then leave this note!										 */
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{ 
 			if (isHostile(_unit, (*itr)) && (*itr) != _unit && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 			{
-				UnitPointer RandomTarget = NULLUNIT;
+				Unit * RandomTarget = NULLUNIT;
 				RandomTarget = TO_UNIT(*itr);
 				if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= 0.0f && _unit->GetDistance2dSq(RandomTarget) <= 900.0f && _unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0)
 				{
@@ -2118,7 +2118,7 @@
 		}
 
 		size_t RandTarget = rand()%TargetTable.size();
-		UnitPointer  RTarget = TargetTable[RandTarget];
+		Unit *  RTarget = TargetTable[RandTarget];
 
 		if (!RTarget)
 		{
@@ -2166,7 +2166,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    ANZUAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ANZUAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2210,7 +2210,7 @@
 		Summon = 0;
 	} 
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 
@@ -2218,7 +2218,7 @@
 		Summon = 0;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2230,7 +2230,7 @@
 		Summon = 0;
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -2255,11 +2255,11 @@
 
 			else
 			{
-				for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+				for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 				{ 
 					if ((*itr) != _unit && (*itr)->GetTypeId()== TYPEID_UNIT && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 					{
-						CreaturePointer Check = NULLCREATURE;
+						Creature * Check = NULLCREATURE;
 
 						if (Check->GetEntry() != 23132)
 							continue;
@@ -2289,11 +2289,11 @@
 
 		/*for (int i = 0; i < 15; i++)
 		{
-			UnitPointer Bird = NULLUNIT;
+			Unit * Bird = NULLUNIT;
 			Bird = _unit->GetMapMgr()->GetInterface()->SpawnCreature(23132, _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
 			if (Bird)
 			{
-				UnitPointer target = NULLUNIT;
+				Unit * target = NULLUNIT;
 				target = FindTarget();
 				if (target)
 					_unit->GetAIInterface()->AttackReaction(target, 1, 0);
@@ -2308,7 +2308,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2348,16 +2348,16 @@
     }
 
 	// A bit rewritten FindTarget function
-	UnitPointer FindTarget()
+	Unit * FindTarget()
 	{
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		float distance = 80.0f;
 		float z_diff;
 
-		UnitPointer pUnit;
+		Unit * pUnit;
 		float dist;
 
-		for (unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
+		for (unordered_set<Object *>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
 		{
 			if((*itr)->GetTypeId() != TYPEID_UNIT && (*itr)->GetTypeId() != TYPEID_PLAYER)
 				continue;
Index: Trunk/src/InstanceScripts/Instance_ShadowfangKeep.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_ShadowfangKeep.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_ShadowfangKeep.cpp	(working copy)
@@ -31,7 +31,7 @@
 class SpringvaleAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(SpringvaleAI, MoonScriptCreatureAI);
-    SpringvaleAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    SpringvaleAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Holy Light
 		AddSpell(1026, Target_Self, 10, 2.5f, 0);
@@ -43,7 +43,7 @@
 		AddSpell(5588, Target_Current, 12, 0, 60);
     }
     
-    void OnCombatStart(UnitPointer pTarget)
+    void OnCombatStart(Unit * pTarget)
     {
 		if(!GetUnit()->HasAura(DevoAura->mInfo->Id))
 			CastSpellNowNoScheduling(DevoAura);
@@ -70,7 +70,7 @@
 class BlindWatcherAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(BlindWatcherAI, MoonScriptBossAI);
-    BlindWatcherAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+    BlindWatcherAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
     {
 		// Howling Rage 1
 		HowlingRage1 = AddSpell(7481, Target_Self, 0, 5, 0);
@@ -118,12 +118,12 @@
 class FenrusAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(FenrusAI, MoonScriptCreatureAI);
-	FenrusAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	FenrusAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(7125, Target_Current, 12, 1.5f, 60);
 	}
 
-	void OnDied(UnitPointer  pKiller)
+	void OnDied(Unit *  pKiller)
 	{
 		GetUnit()->SendChatMessageAlternateEntry(4275, CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Who dares interfere with the Sons of Arugal?");
 		GetUnit()->PlaySoundToSet(5791);
@@ -149,14 +149,14 @@
 class VoidWalkerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(VoidWalkerAI, MoonScriptCreatureAI);
-	VoidWalkerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	VoidWalkerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(7154, Target_WoundedFriendly, 5, 0, 7);
 	}
 
-	void OnDied(UnitPointer  pKiller)
+	void OnDied(Unit *  pKiller)
 	{
-		GameObjectPointer  pDoor = GetUnit()->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-129.034f, 2166.16f, 129.187f, 18972);
+		GameObject *  pDoor = GetUnit()->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-129.034f, 2166.16f, 129.187f, 18972);
 		if(pDoor)
 			pDoor->SetState(0);
 
@@ -169,7 +169,7 @@
 class ArugalAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ArugalAI, MoonScriptCreatureAI);
-    ArugalAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    ArugalAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Void Bolt
 		AddSpell(7588, Target_Current, 25, 3, 0);
@@ -190,11 +190,11 @@
 class NandosAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(NandosAI, MoonScriptCreatureAI);
-    NandosAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature){}
+    NandosAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature){}
 
-    void OnDied(UnitPointer  pKiller)
+    void OnDied(Unit *  pKiller)
     {
-		GameObjectPointer  pDoor = GetUnit()->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-118.11f, 2161.86f, 155.678f, 18971);
+		GameObject *  pDoor = GetUnit()->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-118.11f, 2161.86f, 155.678f, 18971);
 		if(pDoor)		
 			pDoor->SetState(0);
 
@@ -209,8 +209,8 @@
 class RETHILGOREAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(RETHILGOREAI, MoonScriptCreatureAI);
-    RETHILGOREAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature){}
-    void OnDied(UnitPointer  pKiller)
+    RETHILGOREAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature){}
+    void OnDied(Unit *  pKiller)
     {
 		_unit->SendChatMessageAlternateEntry(3849, CHAT_MSG_MONSTER_SAY, LANG_GUTTERSPEAK, "About time someone killed the wretch.");
 		_unit->SendChatMessageAlternateEntry(3850, CHAT_MSG_MONSTER_SAY, LANG_COMMON, "For once I agree with you... scum.");      // dont know the allys text yet
Index: Trunk/src/InstanceScripts/Instance_ShadowLabyrinth.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_ShadowLabyrinth.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_ShadowLabyrinth.cpp	(working copy)
@@ -39,7 +39,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    CABALACOLYTEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CABALACOLYTEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -61,19 +61,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -89,7 +89,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -147,7 +147,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    CABALDEATHSWORNAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CABALDEATHSWORNAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -174,19 +174,19 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -202,7 +202,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -257,7 +257,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    CABALFANATICAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CABALFANATICAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -273,19 +273,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -301,7 +301,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -357,7 +357,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    CABALSHADOWPRIESTAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CABALSHADOWPRIESTAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -379,19 +379,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -407,7 +407,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -463,7 +463,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    CABALSPELLBINDERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CABALSPELLBINDERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -485,19 +485,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -513,7 +513,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -570,7 +570,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    CABALWARLOCKAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CABALWARLOCKAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -592,19 +592,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -620,7 +620,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -677,7 +677,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    CABALZEALOTAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CABALZEALOTAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -699,19 +699,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -727,7 +727,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -805,7 +805,7 @@
 	SP_AI_Spell spells[6];
 	bool m_spellcheck[6];
 
-    CABALRITUALISTAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CABALRITUALISTAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 6;
 		for(int i=0;i<nrspells;i++)
@@ -850,19 +850,19 @@
 		spells[5].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -878,7 +878,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -937,7 +937,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    FELOVERSEERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FELOVERSEERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		HealCooldown = 1;
 		nrspells = 5;
@@ -978,13 +978,13 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		HealCooldown = 1;
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		HealCooldown = 1;
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -992,7 +992,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		HealCooldown = 1;
        RemoveAIUpdateEvent();
@@ -1018,7 +1018,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1075,7 +1075,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    MALICIOUSINSTRUCTORAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MALICIOUSINSTRUCTORAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1097,19 +1097,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1125,7 +1125,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1188,7 +1188,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    AMBASSADORHELLMAWAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AMBASSADORHELLMAWAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1212,7 +1212,7 @@
 		spells[1].cooldown = 25;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < 2; i++)
 			spells[i].casttime = 0;
@@ -1237,7 +1237,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1256,7 +1256,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1264,7 +1264,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Do not... grow... overconfident... mortal!");
 		_unit->PlaySoundToSet(10480);
@@ -1292,7 +1292,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1356,7 +1356,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    BLACKHEARTTHEINCITERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BLACKHEARTTHEINCITERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1391,7 +1391,7 @@
 		spells[2].maxdist2cast = 40.0f;
     }
     // sound corrections needed!
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < 3; i++)
 			spells[i].casttime = 0;
@@ -1416,7 +1416,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1435,14 +1435,14 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "This...no..good");
 		_unit->PlaySoundToSet(10491);
@@ -1469,7 +1469,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1515,13 +1515,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1539,7 +1539,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1589,7 +1589,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    GRANDMASTERVORPILAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GRANDMASTERVORPILAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1629,7 +1629,7 @@
 		Teleported = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < 4; i++)
 			spells[i].casttime = 0;
@@ -1656,7 +1656,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1675,7 +1675,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1683,7 +1683,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I give my life... Gladly.");
 		_unit->PlaySoundToSet(10529);
@@ -1710,7 +1710,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1784,7 +1784,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    MURMURAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MURMURAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1830,7 +1830,7 @@
 		SonicBoom = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < 3; i++)
 			spells[i].casttime = 0;
@@ -1848,7 +1848,7 @@
 		_unit->Root();
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1861,7 +1861,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1885,7 +1885,7 @@
 		uint32 t = (uint32)time(NULL);
 		if (t > spells[3].casttime && _unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget() && _unit->GetDistance2dSq(_unit->GetAIInterface()->GetNextTarget()) >= 325.0f)
 		{
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			target = FindTarget();
 			if (target)
 			{
@@ -1913,7 +1913,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1968,13 +1968,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1992,7 +1992,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2011,16 +2011,16 @@
 	}
 
 	// A bit rewritten FindTarget function
-	UnitPointer FindTarget()
+	Unit * FindTarget()
 	{
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		float distance = 40.0f;
 		float z_diff;
 
-		UnitPointer pUnit;
+		Unit * pUnit;
 		float dist;
 
-		for (unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
+		for (unordered_set<Object *>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
 		{
 			if((*itr)->GetTypeId() != TYPEID_UNIT && (*itr)->GetTypeId() != TYPEID_PLAYER)
 				continue;
Index: Trunk/src/InstanceScripts/Instance_TheMechanar.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_TheMechanar.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_TheMechanar.cpp	(working copy)
@@ -40,7 +40,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    ArcaneServantAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ArcaneServantAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -63,7 +63,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -75,11 +75,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -87,7 +87,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -104,7 +104,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -173,7 +173,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    BloodwarderCenturionAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BloodwarderCenturionAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 5;
 		for(int i=0;i<nrspells;i++)
@@ -217,7 +217,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->CastSpell(_unit, spells[4].info, spells[4].instant);
 		CastTime();
@@ -230,11 +230,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -242,7 +242,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -259,7 +259,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -326,7 +326,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    BloodwarderPhysicianAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BloodwarderPhysicianAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -363,7 +363,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->CastSpell(_unit, spells[3].info, spells[3].instant);
 		CastTime();
@@ -376,11 +376,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -388,7 +388,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -405,7 +405,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -472,7 +472,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    BloodwarderSlayerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BloodwarderSlayerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 5;
 		for(int i=0;i<nrspells;i++)
@@ -516,7 +516,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -528,11 +528,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -540,7 +540,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -557,7 +557,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -620,7 +620,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    MechanarCrusherAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MechanarCrusherAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -636,7 +636,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -648,11 +648,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -660,7 +660,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -677,7 +677,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -743,7 +743,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    MechanarDrillerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MechanarDrillerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -780,7 +780,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -792,11 +792,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -804,7 +804,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -821,7 +821,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -887,7 +887,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    MechanarTinkererAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MechanarTinkererAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -924,7 +924,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -936,11 +936,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -948,7 +948,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->CastSpell(_unit, spells[3].info, spells[3].instant);
 		CastTime();
@@ -982,7 +982,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1047,7 +1047,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    MechanarWreckerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MechanarWreckerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1077,7 +1077,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1089,11 +1089,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1101,7 +1101,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1118,7 +1118,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1183,7 +1183,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    RagingFlamesAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    RagingFlamesAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1206,7 +1206,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1218,11 +1218,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1230,7 +1230,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1247,7 +1247,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1313,7 +1313,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SunseekerAstromageAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SunseekerAstromageAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -1349,7 +1349,7 @@
 		spells[3].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->CastSpell(_unit, spells[3].info, spells[3].instant);
 		CastTime();
@@ -1362,11 +1362,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1374,7 +1374,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1391,7 +1391,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1457,7 +1457,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SunseekerEngineerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SunseekerEngineerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -1493,7 +1493,7 @@
 		spells[3].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->CastSpell(_unit, spells[3].info, spells[3].instant);
 		CastTime();
@@ -1506,11 +1506,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1518,7 +1518,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1535,7 +1535,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1603,7 +1603,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    SunseekerNetherbinderAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SunseekerNetherbinderAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 5;
 		for(int i=0;i<nrspells;i++)
@@ -1646,7 +1646,7 @@
 		spells[4].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1658,11 +1658,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1670,7 +1670,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1687,7 +1687,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1751,7 +1751,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    TempestForgeDestroyerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TempestForgeDestroyerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1773,7 +1773,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1785,11 +1785,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1797,7 +1797,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1814,7 +1814,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1878,7 +1878,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    TempestForgePatrollerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TempestForgePatrollerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1900,7 +1900,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1912,11 +1912,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1924,7 +1924,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1941,7 +1941,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2012,7 +2012,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    GatewatcherGyroKillAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GatewatcherGyroKillAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2043,7 +2043,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2057,7 +2057,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2065,7 +2065,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -2086,7 +2086,7 @@
 		}
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2122,7 +2122,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2191,7 +2191,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    GatewatcherIronHandAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GatewatcherIronHandAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -2229,7 +2229,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2243,7 +2243,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2251,7 +2251,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -2272,7 +2272,7 @@
 		}
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2310,7 +2310,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2388,7 +2388,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    MechanoLordCapacitusAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MechanoLordCapacitusAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -2430,7 +2430,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2444,7 +2444,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2452,7 +2452,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -2473,7 +2473,7 @@
 		}
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2492,7 +2492,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2559,7 +2559,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    NethermancerSepethreaAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    NethermancerSepethreaAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		SummonTimer = 4;
 		nrspells = 4;
@@ -2605,7 +2605,7 @@
 */
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		SummonTimer = 4;
 		CastTime();
@@ -2621,7 +2621,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		SummonTimer = 4;
 		CastTime();
@@ -2630,7 +2630,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -2651,7 +2651,7 @@
 		}
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		SummonTimer = 4;
 		CastTime();
@@ -2699,7 +2699,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2774,7 +2774,7 @@
 	SP_AI_Spell spells[7];
 	bool m_spellcheck[7];
 
-    PathaleonTheCalculatorAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PathaleonTheCalculatorAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		SummonTimer=rand()%16+30;	// 30 - 45 sec
 		nrspells = 7;
@@ -2833,7 +2833,7 @@
 		spells[6].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		SummonTimer=rand()%16+30;
 		CastTime();
@@ -2848,7 +2848,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		SummonTimer=rand()%16+30;
 		CastTime();
@@ -2857,7 +2857,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -2878,7 +2878,7 @@
 		}
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		SummonTimer=rand()%16+30;
 		CastTime();
@@ -2928,7 +2928,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Instance_TheShatteredHalls.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_TheShatteredHalls.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_TheShatteredHalls.cpp	(working copy)
@@ -39,7 +39,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    FELORCCONVERTAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FELORCCONVERTAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -55,7 +55,7 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -67,7 +67,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -75,7 +75,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -92,7 +92,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -156,7 +156,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    SHATTEREDHANDHEATHENAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDHEATHENAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -179,7 +179,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -192,7 +192,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -200,7 +200,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -217,7 +217,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -282,7 +282,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    SHATTEREDHANDLEGIONNAIREAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDLEGIONNAIREAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -311,7 +311,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -324,7 +324,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -332,7 +332,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -349,7 +349,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -414,7 +414,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    SHATTEREDHANDSAVAGEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDSAVAGEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -444,7 +444,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -457,7 +457,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -465,7 +465,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -482,7 +482,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -551,7 +551,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SHADOWMOONACOLYTEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHADOWMOONACOLYTEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -596,7 +596,7 @@
 */
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -612,7 +612,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -620,7 +620,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -637,7 +637,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -702,7 +702,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    SHATTEREDHANDASSASSINAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDASSASSINAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -735,7 +735,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -749,7 +749,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
 		_unit->CastSpell(_unit, spells[1].info, spells[1].instant);
@@ -758,7 +758,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -775,7 +775,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -840,7 +840,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    SHADOWMOONDARKCASTERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHADOWMOONDARKCASTERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -870,7 +870,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -882,7 +882,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -890,7 +890,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -907,7 +907,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -971,7 +971,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    SHATTEREDHANDGLADIATORAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDGLADIATORAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -987,7 +987,7 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -999,7 +999,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1007,7 +1007,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1024,7 +1024,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1088,7 +1088,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    SHATTEREDHANDHOUNDMASTERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDHOUNDMASTERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1104,7 +1104,7 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1116,7 +1116,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1124,7 +1124,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1141,7 +1141,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1206,7 +1206,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    SHATTEREDHANDREAVERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDREAVERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1235,7 +1235,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1251,7 +1251,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1259,7 +1259,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1276,7 +1276,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1340,7 +1340,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    SHATTEREDHANDSENTRYAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDSENTRYAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1363,7 +1363,7 @@
 		spells[1].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1375,7 +1375,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1383,7 +1383,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1393,7 +1393,7 @@
 	{
 		if (_unit->GetAIInterface()->GetNextTarget() && _unit->GetCurrentSpell())
 		{
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			target = _unit->GetAIInterface()->GetNextTarget();
 			if (_unit->GetDistance2dSq(target) > 225.0f && RandomUInt(4) == 1)
 			{
@@ -1411,7 +1411,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1477,7 +1477,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SHATTEREDHANDSHARPSHOOTERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDSHARPSHOOTERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -1514,19 +1514,19 @@
 		spells[3].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -1589,7 +1589,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    SHATTEREDHANDBRAWLERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SHATTEREDHANDBRAWLERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1618,7 +1618,7 @@
 		spells[2].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1630,7 +1630,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1638,7 +1638,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -1655,7 +1655,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1729,9 +1729,9 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(ShadowmoonDarkcasterAI);
 
-    ShadowmoonDarkcasterAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ShadowmoonDarkcasterAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
-		UnitPointer GrandWarlock = NULLUNIT;
+		Unit * GrandWarlock = NULLUNIT;
 		GrandWarlock = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(178.811996f, 292.377991f, -8.190210f, 16807);
 		if (GrandWarlock)
 		{
@@ -1740,9 +1740,9 @@
 		}
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
-		UnitPointer GrandWarlock = NULLUNIT;
+		Unit * GrandWarlock = NULLUNIT;
 		GrandWarlock = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(178.811996f, 292.377991f, -8.190210f, 16807);
 		if (GrandWarlock)
 		{
@@ -1769,22 +1769,22 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
-		CreaturePointer GrandWarlock = NULLCREATURE;
+		Creature * GrandWarlock = NULLCREATURE;
 		GrandWarlock = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(178.811996f, 292.377991f, -8.190210f, 16807);
 		if (GrandWarlock)	// any emotes needed?
 		{
 			uint32 Counter = 0;
 			for (int i = 0; i < 3; i++)
 			{
-				UnitPointer Servant = NULLUNIT;
+				Unit * Servant = NULLUNIT;
 				Servant = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(Darkcasters[i].mX, Darkcasters[i].mY, Darkcasters[i].mZ, 17694);
 				if (!Servant)
 					continue;
@@ -1840,7 +1840,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    GrandWarlockNethekurseAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GrandWarlockNethekurseAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1876,7 +1876,7 @@
 		Started = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i=0; i<3; i++)
 			spells[i].casttime = 0;
@@ -1907,7 +1907,7 @@
 			RegisterAIUpdateEvent(4000);
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1926,7 +1926,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1935,7 +1935,7 @@
 			RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "What a... shame.");
 		_unit->PlaySoundToSet(10276);
@@ -1957,7 +1957,7 @@
 
 			Started = true;
 
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			target = FindTarget();
 			if (target)
 			{
@@ -1995,7 +1995,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2041,13 +2041,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -2065,7 +2065,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2084,15 +2084,15 @@
 	}
 
 	// A bit rewritten FindTarget function
-	UnitPointer FindTarget()
+	Unit * FindTarget()
 	{
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		float distance = 50.0f;
 
-		UnitPointer pUnit;
+		Unit * pUnit;
 		float dist;
 
-		for (unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
+		for (unordered_set<Object *>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
 		{
 			if((*itr)->GetTypeId() != TYPEID_UNIT && (*itr)->GetTypeId() != TYPEID_PLAYER)
 				continue;
@@ -2143,7 +2143,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    BloodGuardPorungAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BloodGuardPorungAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -2159,7 +2159,7 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2171,7 +2171,7 @@
 			spells[i].casttime = 0;
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2179,7 +2179,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -2196,7 +2196,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2250,13 +2250,13 @@
 #define CN_LEFT_HEAD					19523
 #define CN_RIGHT_HEAD					19524
 
-void SpellFunc_Warbringer_BurningMaul(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_Warbringer_BurningMaul(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class WarbringerOmroggAI : public MoonScriptCreatureAI
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( WarbringerOmroggAI, MoonScriptCreatureAI );
-	WarbringerOmroggAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+	WarbringerOmroggAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 	{
 		AddSpell( WARBRINGER_OMROGG_THUNDERCLAP, Target_Self, 25, 1, 12 );
 		AddSpell( WARBRINGER_OMROGG_FEAR, Target_Self, 7, 0, 20 );
@@ -2266,7 +2266,7 @@
 		mRightHead = mLeftHead = NULL;
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart( pTarget );
 		mAggroShiftTimer = AddTimer( 20000 + RandomUInt( 10 ) * 1000 );
@@ -2305,7 +2305,7 @@
 		}
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		ParentClass::OnCombatStop( pTarget );
 		if ( IsAlive() )
@@ -2323,7 +2323,7 @@
 		}
 	}
 
-	void OnTargetDied(UnitPointer pTarget)
+	void OnTargetDied(Unit * pTarget)
     {
 		if ( mLeftHead == NULL || mRightHead == NULL || mSpeechTimer != INVALIDATE_TIMER )
 			return;
@@ -2341,7 +2341,7 @@
 		}
     }
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
     {
 		ParentClass::OnDied( pKiller );
 		if ( mLeftHead == NULL || mRightHead == NULL )
@@ -2416,7 +2416,7 @@
 
 	void ShiftAggro()
 	{
-		UnitPointer pTarget = GetBestPlayerTarget( TargetFilter_NotCurrent );
+		Unit * pTarget = GetBestPlayerTarget( TargetFilter_NotCurrent );
 		if ( pTarget != NULL )
 		{
 			ClearHateList();
@@ -2470,7 +2470,7 @@
 	SpellDesc*				mBlastWave;
 };
 
-void SpellFunc_Warbringer_BurningMaul(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Warbringer_BurningMaul(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	WarbringerOmroggAI *Warbringer = (pCreatureAI) ? (WarbringerOmroggAI*)pCreatureAI : NULL;
 	if ( Warbringer != NULL )
@@ -2483,7 +2483,7 @@
 class HeadAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( HeadAI, MoonScriptCreatureAI );
-	HeadAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+	HeadAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 	{
 		SetScale( 4.0f );
 		_unit->SetUInt32Value( UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE );
@@ -2501,7 +2501,7 @@
 
 	void Destroy()
 	{
-		UnitPointer pUnit = ForceCreatureFind( CN_WARBRINGER_OMROGG );
+		Unit * pUnit = ForceCreatureFind( CN_WARBRINGER_OMROGG );
 		if ( pUnit != NULL && TO_CREATURE(pUnit)->GetScript() != NULL )
 		{
 			WarbringerOmroggAI *pAI = static_cast< WarbringerOmroggAI* >( TO_CREATURE(pUnit)->GetScript() );
@@ -2528,7 +2528,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    WarchiefKargathBladefistAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    WarchiefKargathBladefistAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -2544,7 +2544,7 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		int RandomSpeach = rand()%3;
 		switch (RandomSpeach)
@@ -2568,7 +2568,7 @@
 		spells[0].casttime = (uint32)time(NULL) + 30;
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -2589,14 +2589,14 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "The true horde... will... prevail!");
 		_unit->PlaySoundToSet(10328);
Index: Trunk/src/InstanceScripts/Instance_TheSlavePens.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_TheSlavePens.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_TheSlavePens.cpp	(working copy)
@@ -41,7 +41,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    COILFANGCHAMPIONAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGCHAMPIONAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -58,7 +58,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -70,11 +70,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -82,7 +82,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -99,7 +99,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -163,7 +163,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    COILFANGOBSERVERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGOBSERVERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -180,7 +180,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -192,11 +192,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -204,7 +204,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -221,7 +221,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -288,7 +288,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    COILFANGDEFENDERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGDEFENDERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -305,7 +305,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -318,11 +318,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -330,7 +330,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -347,7 +347,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -415,7 +415,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    COILFANGSCALEHEALERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGSCALEHEALERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -446,7 +446,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -460,11 +460,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -472,7 +472,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -489,7 +489,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -555,7 +555,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    COILFANGSOOTHSAYERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGSOOTHSAYERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -572,7 +572,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -584,11 +584,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -596,7 +596,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -613,7 +613,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -680,7 +680,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    COILFANGTECHNICIANAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGTECHNICIANAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -704,7 +704,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -716,11 +716,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -728,7 +728,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -745,7 +745,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -809,7 +809,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    COILFANGRAYAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGRAYAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -826,7 +826,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -838,11 +838,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -850,7 +850,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -867,7 +867,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -941,7 +941,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(TotemsAI);
 
-    TotemsAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TotemsAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		uint32 Despawn = 30000;
 		uint32 AIUpdate = 1000;
@@ -980,7 +980,7 @@
 		_unit->CastSpell(_unit, SpellID, true);
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
 		if (_unit->GetEntry() != CN_CORRUPTED_NOVA_TOTEM)
 			RemoveAIUpdateEvent();
@@ -1025,7 +1025,7 @@
 	bool m_spellcheck[5];
 	bool SummonedTotems[4];
 
-    MennuTheBetrayerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MennuTheBetrayerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i = 0; i < nrspells; i++)
@@ -1074,7 +1074,7 @@
 		TotemCounter = 0;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -1104,7 +1104,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1123,7 +1123,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1131,7 +1131,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 	   _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I... Deserve this...");
        _unit->PlaySoundToSet(10382);
@@ -1156,7 +1156,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1277,7 +1277,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    RokmarTheCracklerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    RokmarTheCracklerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1319,7 +1319,7 @@
 		Enraged = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for(int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -1329,7 +1329,7 @@
 		Enraged = false;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1337,7 +1337,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1361,7 +1361,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1413,13 +1413,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1437,7 +1437,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1482,7 +1482,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    QuagmirranAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    QuagmirranAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1514,7 +1514,7 @@
 		spells[2].attackstoptimer = 2000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for(int i=0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -1522,7 +1522,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1530,7 +1530,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -1546,7 +1546,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1598,13 +1598,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1622,7 +1622,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
Index: Trunk/src/InstanceScripts/Instance_TheSteamvault.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_TheSteamvault.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_TheSteamvault.cpp	(working copy)
@@ -39,7 +39,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    COILFANGENGINEERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGENGINEERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -63,7 +63,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -75,11 +75,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -87,7 +87,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -104,7 +104,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -171,7 +171,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    COILFANGORACLEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGORACLEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -202,7 +202,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -214,11 +214,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -226,7 +226,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -243,7 +243,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -308,7 +308,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    COILFANGWARRIORAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGWARRIORAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -339,7 +339,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -351,11 +351,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -363,7 +363,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -380,7 +380,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -447,7 +447,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    COILFANGSIRENAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGSIRENAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -485,7 +485,7 @@
 */
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -497,11 +497,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -509,7 +509,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -526,7 +526,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -596,7 +596,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    BOGOVERLORDAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BOGOVERLORDAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 
 		nrspells = 4;
@@ -636,7 +636,7 @@
 		_unit->CastSpell(_unit, spells[3].info, spells[3].instant); // ...and this
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -648,11 +648,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -660,7 +660,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -677,7 +677,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -742,7 +742,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    COILFANGSORCERESSAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGSORCERESSAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -773,7 +773,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -785,11 +785,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -797,7 +797,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -814,7 +814,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -884,7 +884,7 @@
 	SP_AI_Spell spells[8];
 	bool m_spellcheck[8];
 
-    COILFANGLEPERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGLEPERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 8;
 		for(int i=0;i<nrspells;i++)
@@ -950,7 +950,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -962,11 +962,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -974,7 +974,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -991,7 +991,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1056,7 +1056,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    COILFANGSLAVEMASTERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGSLAVEMASTERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1080,7 +1080,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1092,11 +1092,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1104,7 +1104,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1121,7 +1121,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1185,7 +1185,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    COILFANGWATERELEMENTALAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGWATERELEMENTALAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1209,7 +1209,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1221,11 +1221,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1233,7 +1233,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1250,7 +1250,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1315,7 +1315,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    COILFANGMYRMIDONAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    COILFANGMYRMIDONAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1346,7 +1346,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1358,11 +1358,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1370,7 +1370,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1387,7 +1387,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1454,7 +1454,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    TIDALSURGERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TIDALSURGERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1485,7 +1485,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1497,11 +1497,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1509,7 +1509,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1526,7 +1526,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1589,7 +1589,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    STEAMRIGGERMECHANICAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    STEAMRIGGERMECHANICAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1606,7 +1606,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1618,11 +1618,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1630,7 +1630,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1647,7 +1647,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1710,7 +1710,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    STEAMSURGERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    STEAMSURGERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1727,7 +1727,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1739,11 +1739,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1751,7 +1751,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1768,7 +1768,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1839,7 +1839,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    HydromancerThespiaAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HydromancerThespiaAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1876,7 +1876,7 @@
 		spells[2].maxdist2cast = 40.0f;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0;i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -1901,7 +1901,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1920,7 +1920,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1928,7 +1928,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Our matron will be ... The end of you");
         _unit->PlaySoundToSet(10366);
@@ -1947,7 +1947,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1996,13 +1996,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -2020,7 +2020,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2076,13 +2076,13 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(SteamriggerMechanicAI);
 
-    SteamriggerMechanicAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SteamriggerMechanicAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
 		_unit->m_noRespawn = true;
 	}
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->GetAIInterface()->SetUnitToFollow(NULLUNIT);
 		_unit->GetAIInterface()->SetUnitToFollowAngle(0.0f);
@@ -2091,17 +2091,17 @@
 			_unit->GetCurrentSpell()->cancel();
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->RemoveThreatByPtr(mTarget);
 	}
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->GetAIInterface()->SetUnitToFollow(NULLUNIT);
 		_unit->GetAIInterface()->SetUnitToFollowAngle(0.0f);
@@ -2109,7 +2109,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(true);
 	}
@@ -2137,9 +2137,9 @@
     ADD_CREATURE_FACTORY_FUNCTION(MekgineerSteamriggerAI);
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
-	std::vector <UnitPointer> Gnomes;
+	std::vector <Unit *> Gnomes;
 
-    MekgineerSteamriggerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MekgineerSteamriggerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i = 0; i < nrspells; i++)
@@ -2184,7 +2184,7 @@
 		GnomeCounter = 0;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for(int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -2218,7 +2218,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -2237,11 +2237,11 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		for (size_t i = 0; i < Gnomes.size(); i++)
 		{
-			CreaturePointer Gnome = NULLCREATURE;
+			Creature * Gnome = NULLCREATURE;
 			Gnome = TO_CREATURE(Gnomes[i]);
 			if (!Gnome)
 				continue;
@@ -2260,7 +2260,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 	   _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Mommy");
        _unit->PlaySoundToSet(10375);
@@ -2272,8 +2272,8 @@
     {
 		if (Gnomes.size())
 		{
-			UnitPointer Gnome = NULLUNIT;
-			for (std::vector<UnitPointer>::iterator itr = Gnomes.begin(); itr < Gnomes.end(); itr++)
+			Unit * Gnome = NULLUNIT;
+			for (std::vector<Unit *>::iterator itr = Gnomes.begin(); itr < Gnomes.end(); itr++)
 			{
 				Gnome = TO_UNIT(*itr);
 				if (!Gnome->isAlive() || !Gnome->IsInWorld())
@@ -2320,7 +2320,7 @@
 
 		if ((_unit->GetHealthPct() <= 75 && GnomeCounter == 0) || (_unit->GetHealthPct() <= 50 && GnomeCounter == 1) || (_unit->GetHealthPct() <= 25 && GnomeCounter == 2))
         {
-            UnitPointer Gnome = NULLUNIT;
+            Unit * Gnome = NULLUNIT;
             for(int i = 0; i < 3; i++)
             {
                 Gnome = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_STEAMRIGGER_MECHANIC, SpawnCoords[i].x, SpawnCoords[i].y, SpawnCoords[i].z, SpawnCoords[i].o, true, false, _unit->GetUInt32Value(UNIT_FIELD_FACTIONTEMPLATE), 50);
@@ -2350,7 +2350,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2399,13 +2399,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -2423,7 +2423,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2483,7 +2483,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(NagaDistillerAI);
 
-    NagaDistillerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    NagaDistillerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_9);
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
@@ -2491,7 +2491,7 @@
 		_unit->GetAIInterface()->m_canMove = false;
 	}
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT, 0);
 		_unit->SetUInt32Value(UNIT_CHANNEL_SPELL, 0);
@@ -2514,7 +2514,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    WarlordKalitreshAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    WarlordKalitreshAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i = 0; i < nrspells; i++)
@@ -2562,7 +2562,7 @@
 		RagePhase = 0;
 	} 
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -2572,7 +2572,7 @@
 		EnrageTimer = 0;
 		RagePhase = 0;
 
-		GameObjectPointer Gate = NULLGOB;
+		GameObject * Gate = NULLGOB;
 		Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-95.774361f, -439.608612f, 3.382976f, 183049);
 		if (Gate)
 			Gate->SetState(1);
@@ -2597,7 +2597,7 @@
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -2616,9 +2616,9 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
-		GameObjectPointer Gate = NULLGOB;
+		GameObject * Gate = NULLGOB;
 		Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-95.774361f, -439.608612f, 3.382976f, 183049);
 		if (Gate)
 			Gate->SetState(0);
@@ -2635,7 +2635,7 @@
 		if (_unit->FindAura(36453))
 			_unit->RemoveAura(36453);
 
-		UnitPointer pDistiller = NULLUNIT;
+		Unit * pDistiller = NULLUNIT;
 		pDistiller = GetClosestDistiller();
 		if (pDistiller)
 		{
@@ -2649,7 +2649,7 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "For her Excellency... for... Vashj!");
         _unit->PlaySoundToSet(10397);
@@ -2665,7 +2665,7 @@
 			if (EnrageTimer != 0)
 				EnrageTimer++;
 
-			UnitPointer pDistiller = NULLUNIT;
+			Unit * pDistiller = NULLUNIT;
 			pDistiller = GetClosestDistiller();
 			if (!pDistiller || (pDistiller->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_9) && RagePhase != 0))
 			{
@@ -2753,7 +2753,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2802,13 +2802,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -2826,7 +2826,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2844,11 +2844,11 @@
 		}
 	}
 
-	UnitPointer GetClosestDistiller()
+	Unit * GetClosestDistiller()
 	{
 		float distance = 50.0f;
-		UnitPointer pDistiller = NULLUNIT;
-		UnitPointer Unit2Check = NULLUNIT;
+		Unit * pDistiller = NULLUNIT;
+		Unit * Unit2Check = NULLUNIT;
 
 		for (int i = 1; i < 5; i++)
 		{
Index: Trunk/src/InstanceScripts/Instance_TheStockade.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_TheStockade.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_TheStockade.cpp	(working copy)
@@ -36,7 +36,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    DeepfuryAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DeepfuryAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -52,20 +52,20 @@
 		spells[0].attackstoptimer = 1000;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         RegisterAIUpdateEvent(1000);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         RemoveAIUpdateEvent();
     }
@@ -87,7 +87,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -151,7 +151,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    HamhockAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HamhockAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -174,20 +174,20 @@
 		spells[1].attackstoptimer = 1000;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         RegisterAIUpdateEvent(1000);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         RemoveAIUpdateEvent();
     }
@@ -208,7 +208,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -272,7 +272,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    BazilAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BazilAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -288,20 +288,20 @@
 		spells[0].attackstoptimer = 1000;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         RegisterAIUpdateEvent(1000);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         RemoveAIUpdateEvent();
     }
@@ -323,7 +323,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -345,8 +345,8 @@
 					case TARGET_DESTINATION:
 						_unit->CastSpellAoF(target->GetPositionX(),target->GetPositionY(),target->GetPositionZ(), spells[i].info, spells[i].instant); break;
 		   			case TARGET_RANDOM_SINGLE:{
-						std::vector<UnitPointer > target_list;
-						for (unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr)
+						std::vector<Unit * > target_list;
+						for (unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr)
 						{
 							target = TO_UNIT(*itr);
 							if(target)
@@ -405,7 +405,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    DextrenAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DextrenAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -421,20 +421,20 @@
 		spells[0].attackstoptimer = 1000;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         RegisterAIUpdateEvent(1000);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         RemoveAIUpdateEvent();
     }
@@ -456,7 +456,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -519,7 +519,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    InmateAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    InmateAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -535,20 +535,20 @@
 		spells[0].attackstoptimer = 1000;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         RegisterAIUpdateEvent(1000);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         RemoveAIUpdateEvent();
     }
@@ -570,7 +570,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -633,7 +633,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    InsurgentAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    InsurgentAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -649,20 +649,20 @@
 		spells[0].attackstoptimer = 1000;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         RegisterAIUpdateEvent(1000);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         RemoveAIUpdateEvent();
     }
@@ -684,7 +684,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -748,7 +748,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    PrisonerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PrisonerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -771,20 +771,20 @@
 		spells[1].attackstoptimer = 1000;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         RegisterAIUpdateEvent(1000);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         RemoveAIUpdateEvent();
     }
@@ -806,7 +806,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -869,7 +869,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    ConvictAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ConvictAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -885,20 +885,20 @@
 		spells[0].attackstoptimer = 1000;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         RegisterAIUpdateEvent(1000);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
     
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
         RemoveAIUpdateEvent();
     }
@@ -920,7 +920,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Instance_TheUnderbog.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_TheUnderbog.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_TheUnderbog.cpp	(working copy)
@@ -40,7 +40,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    BOGGIANTAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BOGGIANTAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -71,7 +71,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -83,11 +83,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -95,7 +95,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -112,7 +112,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -177,7 +177,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    CLAWAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CLAWAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -208,7 +208,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -220,11 +220,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -232,7 +232,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -249,7 +249,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -313,7 +313,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    UNDERBATAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    UNDERBATAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -337,7 +337,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -349,11 +349,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -361,7 +361,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -378,7 +378,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -441,7 +441,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    FENRAYAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FENRAYAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -458,7 +458,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -470,11 +470,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -482,7 +482,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -499,7 +499,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -574,7 +574,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    LYKULSTINGERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LYKULSTINGERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -598,7 +598,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -610,11 +610,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -622,7 +622,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -639,7 +639,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -706,7 +706,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    LYKULWASPAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LYKULWASPAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -737,7 +737,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -750,11 +750,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -762,7 +762,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -779,7 +779,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -848,7 +848,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    WRATHFINWARRIORAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    WRATHFINWARRIORAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -886,7 +886,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -899,11 +899,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -911,7 +911,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -928,7 +928,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -993,7 +993,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    WRATHFINSENTRYAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    WRATHFINSENTRYAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1017,7 +1017,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1029,11 +1029,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1041,7 +1041,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1058,7 +1058,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1121,7 +1121,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    WRATHFINMYRMIDONAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    WRATHFINMYRMIDONAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1138,7 +1138,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1150,11 +1150,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1162,7 +1162,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1179,7 +1179,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1247,7 +1247,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    UNDERBOGLORDAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    UNDERBOGLORDAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1286,7 +1286,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1298,11 +1298,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1310,7 +1310,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1327,7 +1327,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1398,7 +1398,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    MURKBLOODSPEARMANAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MURKBLOODSPEARMANAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1429,7 +1429,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1441,11 +1441,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1453,7 +1453,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1470,7 +1470,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1539,7 +1539,7 @@
 	SP_AI_Spell spells[7];
 	bool m_spellcheck[7];
 
-    MURKBLOODORACLEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MURKBLOODORACLEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 7;
 		for(int i=0;i<nrspells;i++)
@@ -1598,7 +1598,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1611,11 +1611,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1623,7 +1623,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1640,7 +1640,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1706,7 +1706,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    MURKBLOODHEALERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MURKBLOODHEALERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1744,7 +1744,7 @@
 */
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1756,11 +1756,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1768,7 +1768,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1785,7 +1785,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1848,7 +1848,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    MURKBLOODTRIBESMANAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MURKBLOODTRIBESMANAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1872,7 +1872,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1885,11 +1885,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1897,7 +1897,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1914,7 +1914,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1987,7 +1987,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    UNDERBOGSHAMBLERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    UNDERBOGSHAMBLERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -2032,7 +2032,7 @@
 */
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2044,11 +2044,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2056,7 +2056,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2073,7 +2073,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2137,7 +2137,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    UNDERBOGFRENZYAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    UNDERBOGFRENZYAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -2154,7 +2154,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2166,11 +2166,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2178,7 +2178,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2195,7 +2195,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2257,7 +2257,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    UNDERBOGLURKERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    UNDERBOGLURKERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -2274,7 +2274,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2286,11 +2286,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2298,7 +2298,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -2315,7 +2315,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2387,7 +2387,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    HUNGARFENAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HUNGARFENAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -2412,7 +2412,7 @@
 		FourSpores = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		spells[0].casttime = 0;
 
@@ -2421,7 +2421,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2429,7 +2429,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		FourSpores = false;
 
@@ -2468,13 +2468,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (isHostile(_unit, (*itr)) && (*itr) != _unit && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast)
@@ -2489,7 +2489,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 			{
@@ -2529,7 +2529,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    GhazanAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GhazanAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0; i<nrspells; i++)
@@ -2569,7 +2569,7 @@
 		Enraged = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for(int i=0;i<nrspells;i++)
 			spells[i].casttime = 0;
@@ -2579,7 +2579,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2587,7 +2587,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -2611,7 +2611,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2678,7 +2678,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    ClawAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ClawAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -2717,7 +2717,7 @@
 		spells[3].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i=0; i<nrspells; i++)
 			spells[i].casttime = 0;
@@ -2727,7 +2727,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2735,7 +2735,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -2751,7 +2751,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2776,7 +2776,7 @@
 
 					if (i == 1)
 					{
-						UnitPointer Swamplord = NULLUNIT;
+						Unit * Swamplord = NULLUNIT;
 						Swamplord = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 17826);
 						if (Swamplord && Swamplord->isAlive())
 						{
@@ -2808,13 +2808,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || isHostile(_unit, RandomTarget)))
@@ -2832,7 +2832,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2876,7 +2876,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    SwamplordMuselekAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SwamplordMuselekAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -2922,7 +2922,7 @@
 		spells[4].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for(int i=0; i<5; i++)
 			spells[i].casttime = 0;
@@ -2944,7 +2944,7 @@
 			break;
 		}
 
-		UnitPointer Bear = NULLUNIT;
+		Unit * Bear = NULLUNIT;
 		Bear = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 17827);
 		if (Bear && Bear->isAlive())
 		{
@@ -2954,7 +2954,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -2973,7 +2973,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2981,7 +2981,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Well... done..."); // not sure
 		_unit->PlaySoundToSet(10389);
@@ -2993,7 +2993,7 @@
 	{
 		if (_unit->GetAIInterface()->GetNextTarget())
 		{
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			target = _unit->GetAIInterface()->GetNextTarget();
 			if (_unit->GetDistance2dSq(target) >= 100.0f && _unit->GetDistanceSq(target) <= 900.0f && RandomUInt(3) != 1)
 			{
@@ -3041,7 +3041,7 @@
         if(_unit->GetCurrentSpell() == NULL)
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -3114,7 +3114,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    TheBlackStalkerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TheBlackStalkerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -3157,7 +3157,7 @@
 		spells[3].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i=0; i<nrspells; i++)
 			spells[i].casttime = 0;
@@ -3167,7 +3167,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -3175,7 +3175,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -3199,7 +3199,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -3248,13 +3248,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -3272,7 +3272,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
Index: Trunk/src/InstanceScripts/Instance_Uldaman.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_Uldaman.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_Uldaman.cpp	(working copy)
@@ -32,7 +32,7 @@
 	SP_AI_Spell spells[1];
  bool m_spellcheck[1];
 
-    Archaedas(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Archaedas(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -50,7 +50,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -62,11 +62,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -74,7 +74,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -91,7 +91,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -149,7 +149,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    Revelosh(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Revelosh(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -176,7 +176,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -188,11 +188,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -200,7 +200,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -217,7 +217,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -275,7 +275,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    Grimlok(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Grimlok(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -311,7 +311,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -323,11 +323,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -335,7 +335,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -352,7 +352,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -410,7 +410,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    Baelog(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Baelog(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -437,7 +437,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -449,11 +449,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -461,7 +461,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -478,7 +478,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -536,7 +536,7 @@
 	SP_AI_Spell spells[3];
  bool m_spellcheck[3];
 
-    GalgannFirehammer(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GalgannFirehammer(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -572,7 +572,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -584,11 +584,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -596,7 +596,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -613,7 +613,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -671,7 +671,7 @@
 	SP_AI_Spell spells[2];
  bool m_spellcheck[2];
 
-    Ironaya(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    Ironaya(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -698,7 +698,7 @@
 
   }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -710,11 +710,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -722,7 +722,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -739,7 +739,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Instance_UtgardeKeep.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_UtgardeKeep.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_UtgardeKeep.cpp	(working copy)
@@ -34,7 +34,7 @@
 class DragonflayerForgeMasterAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(DragonflayerForgeMasterAI, MoonScriptCreatureAI);
- 	DragonflayerForgeMasterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	DragonflayerForgeMasterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
  	{
 		AddSpell(DRAGONFLAYER_FORGE_MASTER_BURNING_BRAND, Target_Current, 8, 0, 40, 0, 30 );
  	}
@@ -51,7 +51,7 @@
 class DragonflayerHeartSplitterAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(DragonflayerHeartSplitterAI, MoonScriptCreatureAI);
- 	DragonflayerHeartSplitterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	DragonflayerHeartSplitterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
  	{
 		AddSpell(DRAGONFLAYER_HEARTSPLITTER_PIERCING_JAB, Target_Current, 8, 0, 40, 0, 30 );
 		AddSpell(DRAGONFLAYER_HEARTSPLITTER_THROW, Target_Current, 8, 0, 40, 0, 30 );
@@ -70,7 +70,7 @@
 class DragonflayerIronhelmAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(DragonflayerIronhelmAI, MoonScriptCreatureAI);
- 	DragonflayerIronhelmAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	DragonflayerIronhelmAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
  	{
 		AddSpell(DRAGONFLAYER_IRONHELM_HEROIC_STRIKE, Target_Current, 8, 0, 40, 0, 30 );
 		AddSpell(DRAGONFLAYER_IRONHELM_RINGING_SLAP, Target_Current, 8, 0, 40, 0, 30 );
@@ -88,7 +88,7 @@
 class DragonflayerMetalworkerAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(DragonflayerMetalworkerAI, MoonScriptCreatureAI);
- 	DragonflayerMetalworkerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	DragonflayerMetalworkerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
  	{
 		AddSpell(DRAGONFLAYER_METALWORKER_SUNDER_ARMOR, Target_Current, 8, 0, 40, 0, 30 );
 		mDfEnrage = AddSpell(DRAGONFLAYER_METALWORKER_ENRAGE, Target_Self, 0, 0, 0 );
@@ -121,7 +121,7 @@
 class DragonflayerOverseerAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(DragonflayerOverseerAI, MoonScriptCreatureAI);
- 	DragonflayerOverseerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	DragonflayerOverseerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(DRAGONFLAYER_OVERSEER_BATTLE_SHOUT, Target_Current, 8, 0, 40, 0, 30 );
 		AddSpell(DRAGONFLAYER_OVERSEER_CHARGE, Target_Current, 8, 0, 40, 0, 30 );
@@ -139,7 +139,7 @@
 class DragonflayerRunecasterAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(DragonflayerRunecasterAI, MoonScriptCreatureAI);
- 	DragonflayerRunecasterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	DragonflayerRunecasterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(DRAGONFLAYER_RUNECASTER_BOLTHORNS_RUNE_OF_FLAME, Target_Self , 100, 0, 0 );
 		AddSpell(DRAGONFLAYER_RUNECASTER_NJORDS_RUNE_OF_PROTECTION, Target_Self , 100, 0, 0 );
@@ -157,7 +157,7 @@
 class DragonflayerSpiritualistAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(DragonflayerSpiritualistAI, MoonScriptCreatureAI);
- 	DragonflayerSpiritualistAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	DragonflayerSpiritualistAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(DRAGONFLAYER_SPIRITUALIST_FLAME_SHOCK, Target_Current, 8, 0, 40, 0, 30 );
 		AddSpell(DRAGONFLAYER_SPIRITUALIST_LIGHTNING_BOLT, Target_RandomPlayerNotCurrent, 8, 0, 40, 0, 30 );
@@ -190,7 +190,7 @@
 class DragonflayerWeaponSmithAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(DragonflayerWeaponSmithAI, MoonScriptCreatureAI);
- 	DragonflayerWeaponSmithAI(CreaturePointer  pCreature) : MoonScriptCreatureAI(pCreature)
+ 	DragonflayerWeaponSmithAI(Creature *  pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(DRAGONFLAYER_WEAPONSMITH_BLIND, Target_Current, 8, 0, 40, 0, 30 );
 		AddSpell(DRAGONFLAYER_WEAPONSMITH_TICKING_BOMB, Target_Current, 8, 0, 40, 0, 30 );
@@ -208,7 +208,7 @@
 class EnslavedProto_DrakeAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(EnslavedProto_DrakeAI, MoonScriptCreatureAI);
- 	EnslavedProto_DrakeAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	EnslavedProto_DrakeAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ESLAVED_PROTO_DRAKE_FLAME_BREATH, Target_Current, 8, 0, 40, 0, 30 );
 		AddSpell(ESLAVED_PROTO_DRAKE_KNOCK_AWAY, Target_Current, 8, 0, 40, 0, 30 );
@@ -225,7 +225,7 @@
 class FrenziedGeistAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(FrenziedGeistAI, MoonScriptCreatureAI);
- 	FrenziedGeistAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	FrenziedGeistAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell( FRENZIED_GEIST_FIXATE, Target_Current, 8, 0, 40, 0, 30 );
 	}
@@ -252,7 +252,7 @@
 class SkarvaldTheConstructorAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(SkarvaldTheConstructorAI, MoonScriptCreatureAI);
- 	SkarvaldTheConstructorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	SkarvaldTheConstructorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SKARVALD_CHARGE, Target_RandomPlayerNotCurrent, 35, 0, 8);
 		AddSpell(STONE_STRIKE, Target_ClosestPlayer, 25, 0, 10);
@@ -262,7 +262,7 @@
 		mReplyTimer = INVALIDATE_TIMER;
 	};
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		pDalronn = (MoonScriptBossAI*)GetNearestCreature(CN_DALRONN); 
 		mReplyTimer = AddTimer(2500);
@@ -281,7 +281,7 @@
 		ParentClass::AIUpdate();
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		if(pDalronn != NULL && pDalronn->IsAlive())
 		{
@@ -318,7 +318,7 @@
 class DalronnTheControllerAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(DalronnTheControllerAI, MoonScriptCreatureAI);
- 	DalronnTheControllerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	DalronnTheControllerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		if(IsHeroic())
 		{
@@ -334,7 +334,7 @@
 		}
 	};
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		pSkarvald = (MoonScriptBossAI*)GetNearestCreature(CN_SKARVALD); 
 
@@ -353,7 +353,7 @@
 		ParentClass::AIUpdate();
 	};
 	
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		if(pSkarvald != NULL && pSkarvald->IsAlive())
 		{
@@ -390,7 +390,7 @@
 class SkarvaldTheConstructorGhostAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(SkarvaldTheConstructorGhostAI, MoonScriptCreatureAI);
- 	SkarvaldTheConstructorGhostAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	SkarvaldTheConstructorGhostAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SKARVALD_CHARGE, Target_RandomPlayerNotCurrent, 35, 0, 8);
 		AddSpell(STONE_STRIKE, Target_ClosestPlayer, 25, 0, 10);
@@ -400,7 +400,7 @@
 	{
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_9);
 
-		PlayerPointer pTarget = GetNearestPlayer();
+		Player * pTarget = GetNearestPlayer();
 		if(pTarget != NULL)
 			_unit->GetAIInterface()->AttackReaction(pTarget, 50, 0);
 
@@ -416,7 +416,7 @@
 class DalronnTheControllerGhostAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(DalronnTheControllerGhostAI, MoonScriptCreatureAI);
- 	DalronnTheControllerGhostAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	DalronnTheControllerGhostAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		if(IsHeroic())
 		{
@@ -434,7 +434,7 @@
 	{
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_9);
 
-		PlayerPointer pTarget = GetNearestPlayer();
+		Player * pTarget = GetNearestPlayer();
 		if(pTarget != NULL)
 			_unit->GetAIInterface()->AttackReaction(pTarget, 50, 0);
 
@@ -462,7 +462,7 @@
 #define DECREPIFY 42702
 #define DECREPIFY_HC 59397
 
-void SpellFunc_KelesethFrostTomb( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_KelesethFrostTomb( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	if(pCreatureAI != NULL)
 	{
@@ -478,7 +478,7 @@
 class PrinceKelesethAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(PrinceKelesethAI, MoonScriptCreatureAI);
- 	PrinceKelesethAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+ 	PrinceKelesethAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		mFrostTomb = AddSpellFunc( &SpellFunc_KelesethFrostTomb, Target_RandomPlayer, 25, 0, 15, 0, 20);
 		
@@ -490,7 +490,7 @@
 		AddEmote(Event_OnDied, "I join... the night.", Text_Yell, 13225);
 	};
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mSkeletonTimer = AddTimer(2500);
 		Emote("Your blood is mine!", Text_Yell, 13221);
@@ -527,7 +527,7 @@
 class FrostTombAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(FrostTombAI, MoonScriptCreatureAI);
- 	FrostTombAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+ 	FrostTombAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		SetAIUpdateFreq( 1000 );
 	};
@@ -547,7 +547,7 @@
 		ParentClass::AIUpdate();
 	};
 
-	void OnDied(UnitPointer pKilled)
+	void OnDied(Unit * pKilled)
 	{
 		if(plr != NULL && plr->HasAura(FROST_TOMB_SPELL))
 			plr->RemoveAura(FROST_TOMB_SPELL);
@@ -563,13 +563,13 @@
 	};
 
  private:
-	 PlayerPointer plr;
+	 Player * plr;
 };
 
 class SkeletonAddAI : public MoonScriptCreatureAI
  {
  	MOONSCRIPT_FACTORY_FUNCTION(SkeletonAddAI, MoonScriptCreatureAI);
- 	SkeletonAddAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+ 	SkeletonAddAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		if( IsHeroic() )
 			AddSpell(DECREPIFY_HC, Target_Current, 8, 0, 40);
@@ -579,19 +579,19 @@
 
 	void OnLoad()
 	{	
-		PlayerPointer pTarget = GetNearestPlayer();
+		Player * pTarget = GetNearestPlayer();
 		if(pTarget != NULL)
 			_unit->GetAIInterface()->AttackReaction( pTarget, 50, 0 );
 
 		ParentClass::OnLoad();
 	};
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		Despawn();
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		Despawn();
 	};
@@ -628,14 +628,14 @@
 
 #define SHADOW_AXE_SPELL 42751
 
-void SpellFunc_ShadowAxe( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_ShadowAxe( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	if(pCreatureAI != NULL)
 	{
 		if(pTarget == NULL || !pTarget->IsPlayer() || pTarget->isDead())
 			return;
 		
-		CreaturePointer pShadowAxe = pTarget->GetMapMgr()->GetInterface()->SpawnCreature(CN_SHADOW_AXE, pTarget->GetPositionX(), pTarget->GetPositionY(), pTarget->GetPositionZ(), pTarget->GetOrientation(), true, false, NULL, NULL);
+		Creature * pShadowAxe = pTarget->GetMapMgr()->GetInterface()->SpawnCreature(CN_SHADOW_AXE, pTarget->GetPositionX(), pTarget->GetPositionY(), pTarget->GetPositionZ(), pTarget->GetOrientation(), true, false, NULL, NULL);
 		
 		if(pShadowAxe == NULL)
 			return;
@@ -648,7 +648,7 @@
 class IngvarThePlundererAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IngvarThePlundererAI, MoonScriptCreatureAI);
- 	IngvarThePlundererAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+ 	IngvarThePlundererAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpell(INGVAR_CLEAVE, Target_Current, 24, 0, 6 );
 
@@ -672,7 +672,7 @@
 		SetAIUpdateFreq(1000);
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		//Ressurect event
 		SpawnCreature(CN_INGVAR_UNDEAD, true);
@@ -683,7 +683,7 @@
 class IngvarUndeadAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IngvarUndeadAI, MoonScriptCreatureAI);
- 	IngvarUndeadAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) 
+ 	IngvarUndeadAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) 
 	{
 		AddSpellFunc( &SpellFunc_ShadowAxe, Target_RandomPlayerNotCurrent, 15, 0, 21);
 		AddSpell(INGVAR_DARK_SMASH, Target_Self, 12, 3, 16 );
@@ -700,7 +700,7 @@
 
 	void OnLoad()
 	{
-		PlayerPointer pTarget = GetNearestPlayer();
+		Player * pTarget = GetNearestPlayer();
 		if(pTarget != NULL)
 			_unit->GetAIInterface()->AttackReaction(pTarget, 50, 0);
 	};
Index: Trunk/src/InstanceScripts/Instance_WailingCaverns.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_WailingCaverns.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_WailingCaverns.cpp	(working copy)
@@ -32,7 +32,7 @@
 class DevouringEctoplasmAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DevouringEctoplasmAI, MoonScriptCreatureAI);		
-    DevouringEctoplasmAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    DevouringEctoplasmAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Summon Evolving Ectoplasm
 		AddSpell(7952, Target_Self, 10, 0, 600);	
@@ -44,7 +44,7 @@
 class DruidFangAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DruidFangAI, MoonScriptCreatureAI);	
-    DruidFangAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    DruidFangAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Serpent Form
 		SerpentForm = AddSpell(8041, Target_Self, 0, 0, 0);
@@ -101,7 +101,7 @@
 class LadyAnacondraAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(LadyAnacondraAI, MoonScriptCreatureAI);	
-    LadyAnacondraAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    LadyAnacondraAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddEmote(Event_OnCombatStart, "None can stand against the Serpent Lords!", Text_Yell, 5786);
 		// Lightning Bolt
@@ -120,7 +120,7 @@
 class LordCobrahnAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(LordCobrahnAI, MoonScriptCreatureAI);
-    LordCobrahnAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    LordCobrahnAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddEmote(Event_OnCombatStart, "You will never wake the dreamer!", Text_Yell, 5785);
 		// Lightning Bolt
@@ -156,7 +156,7 @@
 class LordPythasAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(LordPythasAI, MoonScriptCreatureAI);
-    LordPythasAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    LordPythasAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddEmote(Event_OnCombatStart, "The coils of death... Will crush you!", Text_Yell, 5787);
 		// Lightning Bolt
@@ -174,7 +174,7 @@
 class LordSerpentisAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(LordSerpentisAI, MoonScriptCreatureAI);
-    LordSerpentisAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    LordSerpentisAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddEmote(Event_OnCombatStart, "I am the serpent king, i can do anything!", Text_Yell, 5788);
 		// Lightning Bolt
@@ -190,7 +190,7 @@
 class VerdanEverlivingAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(VerdanEverlivingAI, MoonScriptCreatureAI);	
-    VerdanEverlivingAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    VerdanEverlivingAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Grasping Vines
 		AddSpell(8142, Target_Current, 30, 1, 0);		
@@ -202,7 +202,7 @@
 class SkumAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SkumAI, MoonScriptCreatureAI);
-    SkumAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    SkumAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Chained Bolt
 		AddSpell(6254, Target_Current, 50, 1.8f, 0);			
@@ -228,7 +228,7 @@
 class MutanusAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(MutanusAI, MoonScriptCreatureAI);		
-    MutanusAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    MutanusAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Thundercrack
 		AddSpell(8150, Target_Self, 15, 0, 0);
@@ -289,12 +289,12 @@
 class DofNaralexGossip : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
 	{
-		UnitPointer Fanglord1 = pObject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-151.139008f, 414.367004f, -72.629402f, CN_LORD_COBRAHN);
-		UnitPointer Fanglord2 = pObject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(36.807400f, -241.063995f, -79.498901f, CN_LORD_PYTHAS);
-		UnitPointer Fanglord3 = pObject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-118.710999f, -24.990999f, -28.498501f, CN_LORD_SERPENTIS);
-		UnitPointer Fanglord4 = pObject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-70.788902f, 120.072998f, -89.673599f, CN_LADY_ANACONDRA);
+		Unit * Fanglord1 = pObject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-151.139008f, 414.367004f, -72.629402f, CN_LORD_COBRAHN);
+		Unit * Fanglord2 = pObject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(36.807400f, -241.063995f, -79.498901f, CN_LORD_PYTHAS);
+		Unit * Fanglord3 = pObject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-118.710999f, -24.990999f, -28.498501f, CN_LORD_SERPENTIS);
+		Unit * Fanglord4 = pObject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-70.788902f, 120.072998f, -89.673599f, CN_LADY_ANACONDRA);
 			
 		if((!Fanglord1 || !Fanglord1->isAlive()) && (!Fanglord2 || !Fanglord2->isAlive()) && (!Fanglord3 || !Fanglord3->isAlive()) && (!Fanglord4 || !Fanglord4->isAlive()))
 		{
@@ -312,9 +312,9 @@
 		}	
 			
 	}
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
 	{
-		CreaturePointer pCreature = (pObject->GetTypeId()==TYPEID_UNIT) ? TO_CREATURE(pObject) : NULLCREATURE;
+		Creature * pCreature = (pObject->GetTypeId()==TYPEID_UNIT) ? TO_CREATURE(pObject) : NULLCREATURE;
 		if(pObject == NULL)
 			return;
 
@@ -357,7 +357,7 @@
 class DofNaralexAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(DofNaralexAI, MoonScriptBossAI);
-    DofNaralexAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+    DofNaralexAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
     {
 		// --- Initialization ---
 		for (int i = 1; i < 39; i++)
@@ -445,7 +445,7 @@
 class DeviateMoccasinAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DeviateMoccasinAI, MoonScriptCreatureAI);
-	DeviateMoccasinAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	DeviateMoccasinAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 	}
 };
@@ -454,7 +454,7 @@
 class EctoplasmAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(EctoplasmAI, MoonScriptCreatureAI);
-	EctoplasmAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	EctoplasmAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 	}
 };
@@ -464,7 +464,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(Naralex, MoonScriptCreatureAI);
-	Naralex(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	Naralex(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		_unit->SetUInt32Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
 		_unit->SetStandState(STANDSTATE_SLEEP);
Index: Trunk/src/InstanceScripts/Instance_ZulFarrak.cpp
===================================================================
--- Trunk/src/InstanceScripts/Instance_ZulFarrak.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Instance_ZulFarrak.cpp	(working copy)
@@ -42,7 +42,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(thekaAI);
 
-    thekaAI(CreaturePointer pCreature) : CreatureAIScript(pCreature) 
+    thekaAI(Creature * pCreature) : CreatureAIScript(pCreature) 
 	{
 
         morph = dbcSpell.LookupEntry(theka_transform);
@@ -50,14 +50,14 @@
 		plague = dbcSpell.LookupEntry(fevered_plague);
 	}
 
-	void OnCombatStart(UnitPointer mTarget) 
+	void OnCombatStart(Unit * mTarget) 
 	{
 		morphcheck = true;
 		plaguecount = 0;
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget) 
+	void OnCombatStop(Unit * mTarget) 
 	{
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -66,7 +66,7 @@
         RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller) 
+	void OnDied(Unit * mKiller) 
 	{
 		morphcheck = false;
 		plaguecount = 0;
@@ -80,7 +80,7 @@
 		if(plaguecount >= randomplague && _unit->GetAIInterface()->GetNextTarget())
 		{
 			plaguecount = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			target = _unit->GetAIInterface()->GetNextTarget();
 			_unit->CastSpell(target, plague, true);
 		}
@@ -136,15 +136,15 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(antusulTriggerAI);
 
-	antusulTriggerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature){}
+	antusulTriggerAI(Creature * pCreature) : CreatureAIScript(pCreature){}
 
-	void OnCombatStart(UnitPointer mTarget) 
+	void OnCombatStart(Unit * mTarget) 
 	{
 		_unit->GetAIInterface()->m_canMove = false;
 		_unit->GetAIInterface()->disable_melee = true;
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
 
-		UnitPointer antusul = NULLUNIT;
+		Unit * antusul = NULLUNIT;
 		antusul = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(1815.030029f, 686.817017f, 14.519000f, 8127);
 		if(antusul)
 		{
@@ -172,7 +172,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(antusulAI);
 
-    antusulAI(CreaturePointer pCreature) : CreatureAIScript(pCreature) 
+    antusulAI(Creature * pCreature) : CreatureAIScript(pCreature) 
 	{
 
         servant = dbcSpell.LookupEntry(servants);
@@ -180,7 +180,7 @@
 		//earthgrab_ward = dbcSpell.LookupEntry(earthgrabward);
 	}
 
-	void OnCombatStart(UnitPointer mTarget) 
+	void OnCombatStart(Unit * mTarget) 
 	{
 		add1 = add2 = add3 = add4 = add5 = add6 = trigger = NULLCREATURE;
 		spawns = firstspawn = secondspawn = true;
@@ -189,7 +189,7 @@
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget) 
+	void OnCombatStop(Unit * mTarget) 
 	{
 		spawns = spawns2 = attack = firstspawn = secondspawn = false;
 		/*healingwardcount = earthgrabcount = hmax = emax =*/ secondspawncount = 0;
@@ -200,7 +200,7 @@
 		deletespawns();
 	}
 
-	void OnDied(UnitPointer mKiller) 
+	void OnDied(Unit * mKiller) 
 	{
 		spawns = spawns2 = attack = firstspawn = secondspawn = false;
 		/*healingwardcount = earthgrabcount = hmax = emax =*/ secondspawncount = 0;
@@ -240,7 +240,7 @@
 		}
 		if(attack)
 		{
-			UnitPointer Target = NULLUNIT;
+			Unit * Target = NULLUNIT;
 			Target = _unit->GetAIInterface()->GetNextTarget();
 			if (_unit->GetAIInterface()->GetNextTarget())
 			{
@@ -364,13 +364,13 @@
 	bool spawns, spawns2, attack, firstspawn, secondspawn;
 	int /*healingwardcount, earthgrabcount, hmax, emax,*/ secondspawncount;
 
-	CreaturePointer add1;
-	CreaturePointer add2;
-	CreaturePointer add3;
-	CreaturePointer add4;
-	CreaturePointer add5;
-	CreaturePointer add6;
-	CreaturePointer trigger;
+	Creature * add1;
+	Creature * add2;
+	Creature * add3;
+	Creature * add4;
+	Creature * add5;
+	Creature * add6;
+	Creature * trigger;
 
 	SpellEntry * servant;
 	SpellEntry * healing_ward;
Index: Trunk/src/InstanceScripts/Raid_BlackTemple.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_BlackTemple.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_BlackTemple.cpp	(working copy)
@@ -38,7 +38,7 @@
 {
 public:
 	MOONSCRIPT_INSTANCE_FACTORY_FUNCTION( BlackTempleScript, MoonInstanceScript );
-	BlackTempleScript( MapMgrPointer pMapMgr ) : MoonInstanceScript( pMapMgr )
+	BlackTempleScript( MapMgr * pMapMgr ) : MoonInstanceScript( pMapMgr )
 	{
 		// Way to select bosses
 		BuildEncounterMap();
@@ -61,7 +61,7 @@
 		};
 	};
 
-	void OnCreatureDeath( CreaturePointer pVictim, UnitPointer pKiller )
+	void OnCreatureDeath( Creature * pVictim, Unit * pKiller )
 	{
 		if ( pVictim == NULLCREATURE || pVictim->GetCreatureInfo() == NULL || pVictim->GetCreatureInfo()->Rank != ELITE_WORLDBOSS )
 			return;
@@ -96,7 +96,7 @@
 class TemplateAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(TemplateAI, MoonScriptCreatureAI);
-	TemplateAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	TemplateAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 	}
 };
@@ -111,7 +111,7 @@
 class DragonTurtleAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DragonTurtleAI, MoonScriptCreatureAI);
-	DragonTurtleAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	DragonTurtleAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(DRAGON_TRUTLE_SHELL_SHIELD, Target_Self, 10, 0, 25);
 		AddSpell(DRAGON_TURTLE_WATER_SPIT, Target_Current, 8, 2.5, 20, 0, 45);		// Random?
@@ -126,7 +126,7 @@
 class LeviathanAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(LeviathanAI, MoonScriptCreatureAI);
-	LeviathanAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	LeviathanAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(LEVIATHAN_DEBILITATING_SPRAY, Target_RandomPlayer, 8, 2.5, 20);
 		AddSpell(LEVIATHAN_POISON_SPIT, Target_RandomPlayer, 7, 2.5, 25);
@@ -140,13 +140,13 @@
 class MutantWarHoundAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(MutantWarHoundAI, MoonScriptCreatureAI);
-	MutantWarHoundAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) {}
+	MutantWarHoundAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) {}
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		ParentClass::OnDied(pKiller);
 
-		AuraPointer pAura = AuraPointer(new Aura(dbcSpell.LookupEntry(MUTANT_WAR_HOUND_CLOUD_OF_DISEASE),(uint32)20000, _unit, _unit));
+		Aura * pAura = new Aura(dbcSpell.LookupEntry(MUTANT_WAR_HOUND_CLOUD_OF_DISEASE),(uint32)20000, _unit, _unit);
 		if (pAura != NULL)
 		{
 			_unit->AddAura(pAura);
@@ -159,12 +159,12 @@
 #define SHADOWMOON_RIDING_HOUND_CHARGE				25821
 #define SHADOWMOON_RIDING_HOUND_ENRAGE				8599
 
-void SpellFunc_Charge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_Charge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class ShadowmoonRidingHoundAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowmoonRidingHoundAI, MoonScriptCreatureAI);
-	ShadowmoonRidingHoundAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowmoonRidingHoundAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWMOON_RIDING_HOUND_CARNIVOROUS_BITE, Target_Current, 10, 0, 20, 0, 10);
 		mCharge = AddSpell(SHADOWMOON_RIDING_HOUND_CHARGE, Target_Current, 0, 0, 0);
@@ -175,12 +175,12 @@
 	SpellDesc*	mCharge;
 };
 
-void SpellFunc_Charge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Charge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	ShadowmoonRidingHoundAI *pHoundAI = (pCreatureAI != NULL) ? (ShadowmoonRidingHoundAI*)pCreatureAI : NULL;
 	if (pHoundAI != NULL)
 	{
-		UnitPointer pCurrentTarget = pHoundAI->GetUnit()->GetAIInterface()->GetNextTarget();
+		Unit * pCurrentTarget = pHoundAI->GetUnit()->GetAIInterface()->GetNextTarget();
 		if (pCurrentTarget != NULL && pCurrentTarget != pTarget)
 		{
 			pHoundAI->GetUnit()->GetAIInterface()->AttackReaction(pTarget, 500);
@@ -204,7 +204,7 @@
 class SisterOfPleasureAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SisterOfPleasureAI, MoonScriptCreatureAI);
-	SisterOfPleasureAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	SisterOfPleasureAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SISTER_OF_PLEASURE_GREATER_HEAL, Target_WoundedFriendly, 10, 2, 45);
 		AddSpell(SISTER_OF_PLEASURE_HOLY_NOVA, Target_Self, 10, 0, 20);
@@ -223,7 +223,7 @@
 class SisterOfPainAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SisterOfPainAI, MoonScriptCreatureAI);
-	SisterOfPainAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	SisterOfPainAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SISTER_OF_PAIN_LASH_OF_PAIN, Target_Current, 10, 0, 25, 0, 10);
 		AddSpell(SISTER_OF_PAIN_PAINFUL_RAGE, Target_Self, 5, 0, 60);
@@ -240,7 +240,7 @@
 class PriestessOfDementiaAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(PriestessOfDementiaAI, MoonScriptCreatureAI);
-	PriestessOfDementiaAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	PriestessOfDementiaAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(PRIESTESS_OF_DEMENTIA_CONFUSION, Target_Self, 8, 0, 30);
 		AddSpell(PRIESTESS_OF_DEMENTIA_DEMENTIA, Target_Self, 5, 0, 60);
@@ -253,7 +253,7 @@
 class PriestessOfDelightAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(PriestessOfDelightAI, MoonScriptCreatureAI);
-	PriestessOfDelightAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	PriestessOfDelightAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(PRIESTESS_OF_DELIGHT_CURSE_OF_VITALITY, Target_RandomPlayer, 10, 0, 30);
 	}
@@ -268,7 +268,7 @@
 class IllidariNightlordAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IllidariNightlordAI, MoonScriptCreatureAI);
-	IllidariNightlordAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	IllidariNightlordAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ILLIDARI_NIGHTLORD_SUMMON_SHADOWFIENDS, Target_Self, 7, 0, 45);			// does it work?
 		AddSpell(ILLIDARI_NIGHTLORD_SHADOW_INFERNO, Target_Self, 10, 0, 25);
@@ -283,12 +283,12 @@
 #define ILLIDARI_HEARTSEEKER_SHOOT						41169
 #define ILLIDARI_HEARTSEEKER_SKELETON_SHOT				41171
 
-void SpellFunc_RapidShot(SpellDesc * pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_RapidShot(SpellDesc * pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType);
 
 class IllidariHeartseekerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IllidariHeartseekerAI, MoonScriptCreatureAI);
-	IllidariHeartseekerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	IllidariHeartseekerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ILLIDARI_HEARTSEEKER_CURSE_OF_THE_BLEAKHEART, Target_RandomPlayer, 8, 0, 40, 0, 30);
 		mRapidShot = AddSpell(ILLIDARI_HEARTSEEKER_RAPID_SHOT, Target_Self, 0, 8, 0);						// I need to check mechanics (maybe it should speed up usage of Shoot spell (2x lesser freq))
@@ -297,7 +297,7 @@
 		AddSpellFunc(&SpellFunc_RapidShot, Target_Current, 7, 8, 40, 0, 30);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		if (GetRangeToUnit(pTarget) <= 30.0f)
@@ -311,7 +311,7 @@
 	{
 		ParentClass::AIUpdate();
 
-		UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+		Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL)
 		{
 			if (GetRangeToUnit(pTarget) <= 30.0f)
@@ -325,7 +325,7 @@
 	SpellDesc*	mRapidShot;
 };
 
-void SpellFunc_RapidShot(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_RapidShot(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	IllidariHeartseekerAI *pHeartseeker = (pCreatureAI != NULL) ? (IllidariHeartseekerAI*)pCreatureAI : NULL;
 	if (pHeartseeker != NULL)
@@ -342,7 +342,7 @@
 class IllidariFearbringerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IllidariFearbringerAI, MoonScriptCreatureAI);
-	IllidariFearbringerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	IllidariFearbringerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ILLIDARI_FEARBRINGER_ILLIDARI_FLAMES, Target_Current, 8, 2, 25, 0, 10);
 		AddSpell(ILLIDARI_FEARBRINGER_RAIN_OF_CHAOS, Target_RandomPlayerDestination, 7, 0, 35);
@@ -359,7 +359,7 @@
 class IllidariDefilerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IllidariDefilerAI, MoonScriptCreatureAI);
-	IllidariDefilerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	IllidariDefilerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ILLIDARI_DEFILER_BANISH, Target_RandomPlayer, 8, 1, 30);
 		AddSpell(ILLIDARI_DEFILER_CURSE_OF_AGONY, Target_RandomPlayer, 7, 0, 45);
@@ -375,7 +375,7 @@
 class IllidariCenturionAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IllidariCenturionAI, MoonScriptCreatureAI);
-	IllidariCenturionAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	IllidariCenturionAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ILLIDARI_CENTURION_CLEAVE, Target_Current, 10, 0, 20, 0, 10);
 		AddSpell(ILLIDARI_CENTURION_SONIC_STRIKE, Target_Self, 8, 0, 35);
@@ -387,12 +387,12 @@
 #define ILLIDARI_BONESLICER_GOUGE				24698
 #define ILLIDARI_BONESLICER_SHADOWSTEP			41176
 
-void SpellFunc_Gouge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_Gouge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class IllidariBoneslicerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IllidariBoneslicerAI, MoonScriptCreatureAI);
-	IllidariBoneslicerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	IllidariBoneslicerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ILLIDARI_BONESLICER_CLOAK_OF_SHADOWS, Target_Self, 8, 0, 25);
 		mGouge = AddSpell(ILLIDARI_BONESLICER_GOUGE, Target_Current, 0, 0, 0);
@@ -403,13 +403,13 @@
 	SpellDesc*	mGouge;
 };
 
-void SpellFunc_Gouge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Gouge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	IllidariBoneslicerAI *pBoneslicer = (pCreatureAI != NULL) ? (IllidariBoneslicerAI*)pCreatureAI : NULL;
 	if (pBoneslicer != NULL)
 	{
 		pBoneslicer->CastSpell(pBoneslicer->mGouge);
-		UnitPointer pSecondHated = pBoneslicer->GetUnit()->GetAIInterface()->GetSecondHated();
+		Unit * pSecondHated = pBoneslicer->GetUnit()->GetAIInterface()->GetSecondHated();
 		if (pSecondHated != NULL)
 		{
 			pBoneslicer->GetUnit()->GetAIInterface()->AttackReaction(pSecondHated, 2000);
@@ -431,7 +431,7 @@
 class AshtongueBattlelordAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AshtongueBattlelordAI, MoonScriptCreatureAI);
-	AshtongueBattlelordAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AshtongueBattlelordAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ASHTONGUE_BATTLELORD_CLEAVE, Target_Current, 10, 0, 15, 0, 10);
 		AddSpell(ASHTONGUE_BATTLELORD_CONCUSSION_BLOW, Target_Current, 8, 0, 30, 0, 10);
@@ -447,7 +447,7 @@
 class AshtongueDefenderAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AshtongueDefenderAI, MoonScriptCreatureAI);
-	AshtongueDefenderAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AshtongueDefenderAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ASHTONGUE_DEFENDER_DEBILITATING_STRIKE, Target_Current, 10, 0, 20, 0, 10);
 		AddSpell(ASHTONGUE_DEFENDER_SHIELD_BASH, Target_Current, 7, 0, 25, 0, 10);
@@ -461,7 +461,7 @@
 class AshtongueElementalistAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AshtongueElementalistAI, MoonScriptCreatureAI);
-	AshtongueElementalistAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AshtongueElementalistAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ASHTONGUE_ELEMENTALIST_LIGHTNING_BOLT, Target_Current, 8, 1, 20, 0, 50);	// Random?
 		AddSpell(ASHTONGUE_ELEMENTALIST_RAID_OF_FIRE, Target_RandomPlayerDestination, 6, 0, 25);
@@ -480,7 +480,7 @@
 class AshtongueMysticAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AshtongueMysticAI, MoonScriptCreatureAI);
-	AshtongueMysticAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AshtongueMysticAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ASHTONGUE_MYSTIC_BLOODLUST, Target_Self, 5, 0, 45);
 		AddSpell(ASHTONGUE_MYSTIC_CHAIN_HEAL, Target_WoundedFriendly, 6, 2.5, 35);
@@ -501,7 +501,7 @@
 class AshtonguePrimalistAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AshtonguePrimalistAI, MoonScriptCreatureAI);
-	AshtonguePrimalistAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AshtonguePrimalistAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ASHTONGUE_PRIMALIST_MULTISHOT, Target_Current, 8, 0, 40, 0, 30);			// Target_Self - self dmg too (kill == crash)
 		AddSpell(ASHTONGUE_PRIMALIST_SHOOT, Target_Current, 80, 0, 1, 0, 30);
@@ -509,7 +509,7 @@
 		AddSpell(ASHTONGUE_PRIMALIST_WYVERN_STRING, Target_RandomPlayer, 7, 0, 25, 0, 30);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		if (GetRangeToUnit(pTarget) <= 30.0f)
@@ -523,7 +523,7 @@
 	{
 		ParentClass::AIUpdate();
 
-		UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+		Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL)
 		{
 			if (GetRangeToUnit(pTarget) <= 30.0f)
@@ -542,7 +542,7 @@
 class AshtongueRogueAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AshtongueRogueAI, MoonScriptCreatureAI);
-	AshtongueRogueAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AshtongueRogueAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ASHTONGUE_ROGUE_DEBILITATING_POISON, Target_Current, 7, 0, 30, 0, 10);
 		AddSpell(ASHTONGUE_ROGUE_EVISCERATE, Target_Current, 10, 0, 15, 0, 10);
@@ -558,7 +558,7 @@
 class AshtongueSpiritbinderAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AshtongueSpiritbinderAI, MoonScriptCreatureAI);
-	AshtongueSpiritbinderAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AshtongueSpiritbinderAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ASHTONGUE_SPIRITBINDER_CHAIN_HEAL, Target_WoundedFriendly, 7, 1, 25);
 		if (_unit->GetMapMgr()->iInstanceMode != MODE_HEROIC)	// Guessed
@@ -578,7 +578,7 @@
 class AshtongueStalkerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AshtongueStalkerAI, MoonScriptCreatureAI);
-	AshtongueStalkerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AshtongueStalkerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ASHTONGUE_STALKER_BLIND, Target_RandomPlayer, 7, 1, 25);				// Should be Blind - > Attack Next Target?
 		AddSpell(ASHTONGUE_STALKER_INSTANT_POISON, Target_Current, 10, 0, 20, 0, 10);
@@ -586,7 +586,7 @@
 		ApplyAura(ASHTONGUE_STALKER_STEATH);
 	}
 
-	void OnCombatStart(UnitPointer  pTarget)
+	void OnCombatStart(Unit *  pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		SpellDesc *pSpell = FindSpellById(ASHTONGUE_STALKER_BLIND);
@@ -596,7 +596,7 @@
 		}
 	}
 
-	void OnCombatStop(UnitPointer  pTarget)
+	void OnCombatStop(Unit *  pTarget)
 	{
 		ParentClass::OnCombatStop(pTarget);
 		if (IsAlive())
@@ -614,7 +614,7 @@
 class AshtongueStormcallerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AshtongueStormcallerAI, MoonScriptCreatureAI);
-	AshtongueStormcallerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AshtongueStormcallerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ASHTONGUE_STORMCALLER_CHAIN_LIGHTNING, Target_Current, 7, 3, 35, 0, 30);		// Random?
 		AddSpell(ASHTONGUE_STORMCALLER_LIGHTNING_BOLT, Target_Current, 10, 2, 20);
@@ -632,7 +632,7 @@
 class BonechewerBehemothAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BonechewerBehemothAI, MoonScriptCreatureAI);
-	BonechewerBehemothAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BonechewerBehemothAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BONECHEWER_BEHEMOTH_BEHEMOTH_CHARGE, Target_Current, 0, 0, 20);	// Mechanics are like charge on random target?
 		AddSpell(BONECHEWER_BEHEMOTH_ENRAGE, Target_Self, 5, 0, 45);
@@ -641,7 +641,7 @@
 		AddSpell(BONECHEWER_BEHEMOTH_METEOR, Target_RandomPlayerDestination, 5, 2, 40);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		SpellDesc *pCharge = FindSpellById(BONECHEWER_BEHEMOTH_BEHEMOTH_CHARGE);
@@ -659,7 +659,7 @@
 class BonechewerBladeFuryAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BonechewerBladeFuryAI, MoonScriptCreatureAI);
-	BonechewerBladeFuryAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BonechewerBladeFuryAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BONECHEWER_BLADE_FURY_WHIRLWIND, Target_Self, 7, 8, 40);	// Self / Current ?
 	}
@@ -675,7 +675,7 @@
 class BonechewerBloodProphetAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BonechewerBloodProphetAI, MoonScriptCreatureAI);
-	BonechewerBloodProphetAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BonechewerBloodProphetAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BONECHEWER_BLOOD_PROPHET_BLOOD_DRAIN, Target_Current, 6, 5, 30, 0, 20);	// Random?
 		AddSpell(BONECHEWER_BLOOD_PROPHET_BLOODBOLT, Target_RandomPlayer, 7, 1.5, 25);
@@ -693,7 +693,7 @@
 class BonechewerBrawlerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BonechewerBrawlerAI, MoonScriptCreatureAI);
-	BonechewerBrawlerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BonechewerBrawlerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BONECHEWER_BRAWLER_FRENZY, Target_Self, 7, 0, 30);
 	}
@@ -705,7 +705,7 @@
 class BonechewerCombatantAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BonechewerCombatantAI, MoonScriptCreatureAI);
-	BonechewerCombatantAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BonechewerCombatantAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BONECHEWER_COMBATANT_FRENZY, Target_Self, 7, 0, 45);
 	}
@@ -720,7 +720,7 @@
 class BonechewerShieldDiscipleAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BonechewerShieldDiscipleAI, MoonScriptCreatureAI);
-	BonechewerShieldDiscipleAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BonechewerShieldDiscipleAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BONECHEWER_SHIELD_DISCIPLE_INTERVENE, Target_Current, 0, 0, 20);
 		AddSpell(BONECHEWER_SHIELD_DISCIPLE_SHIELD_BASH, Target_Current, 8, 0, 25, 0, 10);
@@ -728,7 +728,7 @@
 		AddSpell(BONECHEWER_SHIELD_DISCIPLE_THROW_SHIELD, Target_RandomPlayer, 7, 0, 30);	// Current?
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		SpellDesc *pIntervene = FindSpellById(BONECHEWER_SHIELD_DISCIPLE_INTERVENE);
@@ -749,7 +749,7 @@
 class BonechewerSpectatorAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BonechewerSpectatorAI, MoonScriptCreatureAI);
-	BonechewerSpectatorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BonechewerSpectatorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BONECHEWER_SPECTATOR_CHARGE, Target_Current, 0, 0, 20);
 		AddSpell(BONECHEWER_SPECTATOR_CLEAVE, Target_Current, 10, 0, 25, 0, 10);
@@ -758,7 +758,7 @@
 		AddSpell(BONECHEWER_SPECTATOR_SUNDER_ARMOR, Target_Current, 7, 0, 20, 0, 10);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		SpellDesc *pCharge = FindSpellById(BONECHEWER_SPECTATOR_CHARGE);
@@ -776,7 +776,7 @@
 class BonechewerTaskmasterAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BonechewerTaskmasterAI, MoonScriptCreatureAI);
-	BonechewerTaskmasterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BonechewerTaskmasterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BONECHEWER_TASKMASTER_DISGRUNTLED, Target_Self, 0, 0, 45);	//5, 0, 45);	// Disabled for now (buffs players instead of Taskmasters)		
 		AddSpell(BONECHEWER_TASKMASTER_FURY, Target_Self, 8, 0, 15);
@@ -789,7 +789,7 @@
 class BonechewerWorkerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BonechewerWorkerAI, MoonScriptCreatureAI);
-	BonechewerWorkerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BonechewerWorkerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BONECHEWER_WORKER_THROW_PICK, Target_RandomPlayer, 8, 0.5, 15);	// Current? Also shouldn't be cast once only?
 	}
@@ -802,7 +802,7 @@
 class CharmingCourtesanAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(CharmingCourtesanAI, MoonScriptCreatureAI);
-	CharmingCourtesanAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CharmingCourtesanAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(CHARMING_COURTESAN_INFATUATION, Target_RandomPlayer, 7, 20, 40);
 		AddSpell(CHARMING_COURTESAN_POISONOUS_THROW, Target_RandomPlayer, 8, 0, 20);
@@ -816,7 +816,7 @@
 class CoilskarGeneralAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(CoilskarGeneralAI, MoonScriptCreatureAI);
-	CoilskarGeneralAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilskarGeneralAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(COILSKAR_GENERAL_BOOMING_VOICE, Target_Self, 7, 0, 35);
 		AddSpell(COILSKAR_GENERAL_FREE_FRIEND, Target_RandomFriendly, 7, 0, 20);	// SpellFunc to check incapacitating effects?
@@ -831,14 +831,14 @@
 class CoilskarHarpoonerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(CoilskarHarpoonerAI, MoonScriptCreatureAI);
-	CoilskarHarpoonerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilskarHarpoonerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(COILSKAR_HARPOONER_HARPOONERS_MARK, Target_RandomPlayer, 7, 0, 35);		// I must link Dragon Turtle with Harpooner before scripting it
 		AddSpell(COILSKAR_HARPOONER_HOOKED_NET, Target_RandomPlayer, 7, 0.5, 25);
 		AddSpell(COILSKAR_HARPOONER_SPEAR_THROW, Target_Current, 8, 0, 15, 0, 40);			// Random? Also isn't it typical ranged unit? (using Spear Throw instead of Shoot/Shot spell?)
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		SpellDesc *pMark = FindSpellById(COILSKAR_HARPOONER_HARPOONERS_MARK);
@@ -857,7 +857,7 @@
 class CoilskarSeacallerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(CoilskarSeacallerAI, MoonScriptCreatureAI);
-	CoilskarSeacallerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilskarSeacallerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(COILSKAR_SEACALLER_FORKED_LIGHTNING, Target_Self, 8, 2, 20);
 		AddSpell(COILSKAR_SEACALLER_HURRICANE, Target_RandomPlayerDestination, 8, 20, 35);
@@ -872,7 +872,7 @@
 class CoilskarSoothsayerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(CoilskarSoothsayerAI, MoonScriptCreatureAI);
-	CoilskarSoothsayerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilskarSoothsayerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(COILSKAR_SOOTHSAYER_HOLY_NOVA, Target_Self, 10, 0, 20);
 		AddSpell(COILSKAR_SOOTHSAYER_RESTORATION, Target_WoundedFriendly, 8, 1.5, 35);
@@ -887,7 +887,7 @@
 class CoilskarWranglerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(CoilskarWranglerAI, MoonScriptCreatureAI);
-	CoilskarWranglerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilskarWranglerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(COILSKAR_WRANGLER_CLEAVE, Target_Current, 10, 0, 20, 0, 10);
 		AddSpell(COILSKAR_WRANGLER_ELECTRIC_SPUR, Target_Self, 8, 3, 45);					// Should fraize Leviathan, but it does not (core? or script? :<)
@@ -902,13 +902,13 @@
 class DragonmawSkyStalkerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DragonmawSkyStalkerAI, MoonScriptCreatureAI);
-	DragonmawSkyStalkerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	DragonmawSkyStalkerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(DRAGONMAW_SKY_STALKER_IMMOLATION_ARROW, Target_Current, 8, 2, 15, 0, 40);
 		AddSpell(DRAGONMAW_SKY_STALKER_SHOOT, Target_Current, 75, 0, 1, 0, 40);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		if (GetRangeToUnit(pTarget) <= 40.0f)
@@ -922,7 +922,7 @@
 	{
 		ParentClass::AIUpdate();
 
-		UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+		Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL)
 		{
 			if (GetRangeToUnit(pTarget) <= 40.0f)
@@ -942,14 +942,14 @@
 class DragonmawWindReaverAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DragonmawWindReaverAI, MoonScriptCreatureAI);
-	DragonmawWindReaverAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	DragonmawWindReaverAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(DRAGONMAW_WIND_REAVER_DOOM_BOLT, Target_Current, 10, 1.5, 15, 0, 40);
 		AddSpell(DRAGONMAW_WIND_REAVER_FIREBALL, Target_Current, 75, 2, 0, 0, 40);
 		AddSpell(DRAGONMAW_WIND_REAVER_FREEZE, Target_RandomPlayer, 10, 2, 15);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		if (GetRangeToUnit(pTarget) <= 40.0f)
@@ -963,7 +963,7 @@
 	{
 		ParentClass::AIUpdate();
 
-		UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+		Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL)
 		{
 			if (GetRangeToUnit(pTarget) <= 40.0f)
@@ -983,7 +983,7 @@
 class DragonmawWyrmcallerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(DragonmawWyrmcallerAI, MoonScriptCreatureAI);
-	DragonmawWyrmcallerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	DragonmawWyrmcallerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(DRAGONMAW_WYRMCALLER_CLEAVE, Target_Current, 10, 0, 15, 0, 10);
 		AddSpell(DRAGONMAW_WYRMCALLER_FIXATE, Target_RandomUnit, 7, 0, 20);
@@ -998,7 +998,7 @@
 class EnslavedServantAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(EnslavedServantAI, MoonScriptCreatureAI);
-	EnslavedServantAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	EnslavedServantAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ENSLAVED_SERVANT_KIDNEY_SHOT, Target_Current, 7, 0, 25, 0, 10);
 		AddSpell(ENSLAVED_SERVANT_UPPERCUT, Target_RandomUnit, 8, 0, 20);
@@ -1006,7 +1006,7 @@
 		mHealthResetTimer = -1;
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		mHealthResetTimer = AddTimer(45000);	// to check
@@ -1032,7 +1032,7 @@
 class HandOfGorefiendAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(HandOfGorefiendAI, MoonScriptCreatureAI);
-	HandOfGorefiendAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	HandOfGorefiendAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(HAND_OF_GOREFIEND_FRENZY, Target_Self, 6, 0, 45);
 	}
@@ -1049,7 +1049,7 @@
 class IllidariArchonAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IllidariArchonAI, MoonScriptCreatureAI);
-	IllidariArchonAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	IllidariArchonAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		mIsShadowPriest = false;
 		switch (RandomUInt(1))
@@ -1068,7 +1068,7 @@
 		}
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		ParentClass::OnCombatStop(pTarget);
 		if (mIsShadowPriest && IsAlive())
@@ -1082,7 +1082,7 @@
 		SpellDesc *pDeath = FindSpellById(ILLIDARI_ARCHON_SHADOW_WORD_DEATH);
 		if (mIsShadowPriest && _unit->GetUInt32Value(UNIT_FIELD_HEALTH) <= 2500 && pDeath->mEnabled)
 		{
-			SpellPointer pCurrentSpell = _unit->GetCurrentSpell();
+			Spell * pCurrentSpell = _unit->GetCurrentSpell();
 			if (pCurrentSpell != NULL && pCurrentSpell->pSpellId == pDeath->mInfo->Id)
 			{
 				pCurrentSpell->cancel();
@@ -1116,7 +1116,7 @@
 class IllidariAssassinAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IllidariAssassinAI, MoonScriptCreatureAI);
-	IllidariAssassinAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	IllidariAssassinAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ILLIDARI_ASSASSIN_PARALYZING_POISON, Target_Current, 8, 0, 25, 0, 10);
 		AddSpell(ILLIDARI_ASSASSIN_VANISH, Target_Self, 7, 1, 30);
@@ -1142,7 +1142,7 @@
 class IllidariBattlemageAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IllidariBattlemageAI, MoonScriptCreatureAI);
-	IllidariBattlemageAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	IllidariBattlemageAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		switch (RandomUInt(1))
 		{
@@ -1166,7 +1166,7 @@
 class IllidariBloodLordAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(IllidariBloodLordAI, MoonScriptCreatureAI);
-	IllidariBloodLordAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	IllidariBloodLordAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ILLIDARI_BLOOD_LORD_DIVINE_SHIELD, Target_Self, 8, 0, 30);
 		AddSpell(ILLIDARI_BLOOD_LORD_HAMMER_OF_JUSTICE, Target_Current, 9, 0, 20, 0, 10);
@@ -1178,12 +1178,12 @@
 #define IMAGE_OF_DEMENTIA_WHRILWIND					41399
 #define IMAGE_OF_DEMENTIA_WHIRLWIND2				41400
 
-void SpellFunc_Whirlwind(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_Whirlwind(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType);
 
 class ImageOfDementiaAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ImageOfDementiaAI, MoonScriptCreatureAI);
-	ImageOfDementiaAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ImageOfDementiaAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		mWhirlwind = AddSpell(IMAGE_OF_DEMENTIA_WHRILWIND, Target_Self, 0, 15, 0);
 		AddSpellFunc(&SpellFunc_Whirlwind, Target_Self, 15, 15, 35, 0, 10);
@@ -1192,7 +1192,7 @@
 	SpellDesc*	mWhirlwind;
 };
 
-void SpellFunc_Whirlwind(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Whirlwind(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	ImageOfDementiaAI *Dementia = (pCreatureAI != NULL) ? (ImageOfDementiaAI*)pCreatureAI : NULL;
 	if (Dementia != NULL)
@@ -1209,7 +1209,7 @@
 class ShadowmoonBloodMageAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowmoonBloodMageAI, MoonScriptCreatureAI);
-	ShadowmoonBloodMageAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowmoonBloodMageAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWMOON_BLOOD_MAGE_BLOOD_SIPHON, Target_Self, 8, 0, 35);
 		AddSpell(SHADOWMOON_BLOOD_MAGE_BLOOD_BOLT, Target_RandomPlayer, 9, 3, 25);
@@ -1223,7 +1223,7 @@
 class ShadowmoonChampionAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowmoonChampionAI, MoonScriptCreatureAI);
-	ShadowmoonChampionAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowmoonChampionAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWMOON_CHAMPION_CHAOTIC_LIGHT, Target_Current, 8, 0, 25, 0, 10);
 		AddSpell(SHADOWMOON_CHAMPION_WHIRLING_BLADE, Target_RandomPlayer, 8, 1, 30);	// I must check its mechanics
@@ -1236,12 +1236,12 @@
 #define SHADOWMOON_DEATHSHAPER_RAISE_DEAD			41071
 #define SHADOWMOON_DEATHSHAPER_SHADOW_BOLT			41069
 
-void SpellFunc_RaiseDead(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_RaiseDead(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType);
 
 class ShadowmoonDeathshaperAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowmoonDeathshaperAI, MoonScriptCreatureAI);
-	ShadowmoonDeathshaperAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowmoonDeathshaperAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWMOON_DEATHSHAPER_DEATH_COIL, Target_RandomPlayer, 7, 0, 30);
 		AddSpell(SHADOWMOON_DEATHSHAPER_DEMON_ARMOR, Target_Self, 8, 0, 60);
@@ -1252,7 +1252,7 @@
 		_unit->SetUInt32Value(UNIT_FIELD_POWER1, 100000);	// temporary way to set up mana of this unit
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		if (GetRangeToUnit(pTarget) <= 40.0f)
@@ -1266,7 +1266,7 @@
 	{
 		ParentClass::AIUpdate();
 
-		UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+		Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL)
 		{
 			if (GetRangeToUnit(pTarget) <= 40.0f)
@@ -1280,7 +1280,7 @@
 	SpellDesc*	mRaiseDead;
 };
 
-void SpellFunc_RaiseDead(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_RaiseDead(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	ShadowmoonDeathshaperAI *pDeathshaper = (pCreatureAI != NULL) ? (ShadowmoonDeathshaperAI*)pCreatureAI : NULL;
 	if (pDeathshaper != NULL)
@@ -1302,7 +1302,7 @@
 class ShadowmoonFallenAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowmoonFallenAI, MoonScriptCreatureAI);
-	ShadowmoonFallenAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowmoonFallenAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AggroNearestPlayer(200);
 	}
@@ -1320,7 +1320,7 @@
 class ShadowmoonHoundmasterAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowmoonHoundmasterAI, MoonScriptCreatureAI);
-	ShadowmoonHoundmasterAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowmoonHoundmasterAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWMOON_HOUNDMASTER_FLARE, Target_RandomPlayerDestination, 5, 0, 30);
 		AddSpell(SHADOWMOON_HOUNDMASTER_FREEZING_TRAP, Target_Self, 5, 0, 30);
@@ -1331,7 +1331,7 @@
 		AddSpell(SHADOWMOON_HOUNDMASTER_WING_CLIP, Target_Current, 5, 0, 20, 0, 10, true);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		if (GetRangeToUnit(pTarget) <= 30.0f)
@@ -1344,7 +1344,7 @@
 	void AIUpdate()
 	{
 		ParentClass::AIUpdate();
-		UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+		Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL)
 		{
 			if (GetRangeToUnit(pTarget) <= 30.0f)
@@ -1362,7 +1362,7 @@
 class ShadowmoonReaverAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowmoonReaverAI, MoonScriptCreatureAI);
-	ShadowmoonReaverAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowmoonReaverAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWMOON_REAVER_SPELL_ABSORPTION, Target_Self, 8, 0, 35);
 	}
@@ -1374,7 +1374,7 @@
 class ShadowmoonSoldierAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowmoonSoldierAI, MoonScriptCreatureAI);
-	ShadowmoonSoldierAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowmoonSoldierAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWMOON_SOLDIER_STRIKE, Target_Current, 10, 0, 15, 0, 10);
 	}
@@ -1393,13 +1393,13 @@
 #define SHADOWMOON_WEAPON_MASTER_WHIRLWIND2			41098
 #define SHADOWMOON_WEAPON_MASTER_SHIELD_WALL		41104	// guessed, but close Id :)
 
-void SpellFunc_DefensiveStance(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType);
-void SpellFunc_BerserkerStance(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_DefensiveStance(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType);
+void SpellFunc_BerserkerStance(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType);
 
 class ShadowmoonWeaponMasterAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowmoonWeaponMasterAI, MoonScriptBossAI);
-	ShadowmoonWeaponMasterAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	ShadowmoonWeaponMasterAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddPhaseSpell(1, AddSpell(SHADOWMOON_WEAPON_MASTER_KNOCK_AWAY, Target_Current, 9, 0, 25, 0, 10));
 		AddPhaseSpell(1, AddSpell(SHADOWMOON_WEAPON_MASTER_MUTILATE, Target_Current, 8, 0, 30, 0, 10));
@@ -1415,7 +1415,7 @@
 		ApplyAura(SHADOWMOON_WEAPON_MASTER_BATTLE_AURA);
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		ParentClass::OnCombatStop(pTarget);
 
@@ -1449,7 +1449,7 @@
 	SpellDesc*	mBerserkerStance;
 };
 
-void SpellFunc_DefensiveStance(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_DefensiveStance(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	ShadowmoonWeaponMasterAI *pWeaponMaster = (pCreatureAI != NULL) ? (ShadowmoonWeaponMasterAI*)pCreatureAI : NULL;
 	if (pWeaponMaster != NULL)
@@ -1461,7 +1461,7 @@
 	}
 }
 
-void SpellFunc_BerserkerStance(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_BerserkerStance(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	ShadowmoonWeaponMasterAI *pWeaponMaster = (pCreatureAI != NULL) ? (ShadowmoonWeaponMasterAI*)pCreatureAI : NULL;
 	if (pWeaponMaster != NULL)
@@ -1481,7 +1481,7 @@
 class SpellboundAttendantAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SpellboundAttendantAI, MoonScriptCreatureAI);
-	SpellboundAttendantAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	SpellboundAttendantAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SPELLBOUND_ATTENDANT_KICK, Target_Current, 9, 0, 25, 0, 10);
 		AddSpell(SPELLBOUND_ATTENDANT_SLEEP, Target_RandomPlayerNotCurrent, 8, 1, 25);
@@ -1495,7 +1495,7 @@
 class TempleConcubineAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(TempleConcubineAI, MoonScriptCreatureAI);
-	TempleConcubineAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	TempleConcubineAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(TEMPLE_CONCUBINE_LOVE_TAP, Target_Current, 9, 0, 25, 0, 10);
 		AddSpell(TEMPLE_CONCUBINE_POLYMORPH, Target_RandomPlayerNotCurrent, 7, 1, 25);
@@ -1508,12 +1508,12 @@
 #define CN_STORM_FURY				22848
 #define STORM_FURY_STORM_BLINK		39581
 
-void SpellFunc_StormBlink(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_StormBlink(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class StormFuryAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(StormFuryAI, MoonScriptCreatureAI);
-	StormFuryAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	StormFuryAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		mStormBlink = AddSpell(STORM_FURY_STORM_BLINK, Target_Self, 0, 1, 0);	// Mechanics was guessed
 		AddSpellFunc(&SpellFunc_StormBlink, Target_RandomPlayerNotCurrent, 8, 0, 35);
@@ -1532,12 +1532,12 @@
 	SpellDesc*	mStormBlink;
 };
 
-void SpellFunc_StormBlink(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_StormBlink(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	StormFuryAI *pStormFuryAI = (pCreatureAI != NULL) ? (StormFuryAI*)pCreatureAI : NULL;
 	if (pStormFuryAI != NULL)
 	{
-		UnitPointer pCurrentTarget = pStormFuryAI->GetUnit()->GetAIInterface()->GetNextTarget();
+		Unit * pCurrentTarget = pStormFuryAI->GetUnit()->GetAIInterface()->GetNextTarget();
 		if (pCurrentTarget == NULL)
 			return;
 
@@ -1558,7 +1558,7 @@
 class AqueousSurgerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AqueousSurgerAI, MoonScriptCreatureAI);
-	AqueousSurgerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AqueousSurgerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(AQUEOUS_SURGER_POISON_BOLT_VOLLEY, Target_Self, 7, 0, 20);
 	}
@@ -1571,7 +1571,7 @@
 class AqueousSpawnAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AqueousSpawnAI, MoonScriptCreatureAI);
-	AqueousSpawnAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AqueousSpawnAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(AQUEOUS_SPAWN_MERGE, Target_Self, 7, 11, 45);
 		AddSpell(AQUEOUS_SPAWN_SLUDGE_NOVA, Target_RandomPlayer, 8, 2.5, 20);
@@ -1582,12 +1582,12 @@
 #define AQUEOUS_LORD_CRASHING_WAVE		40100
 #define AQUEOUS_LORD_VILE_SLIME			40099
 
-void SpellFunc_SpawnAqueousSpawn(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_SpawnAqueousSpawn(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class AqueousLordAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AqueousLordAI, MoonScriptCreatureAI);
-	AqueousLordAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AqueousLordAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(AQUEOUS_LORD_CRASHING_WAVE, Target_Self, 8, 0, 35);
 		AddSpell(AQUEOUS_LORD_VILE_SLIME, Target_RandomPlayer, 10, 0, 25);
@@ -1595,7 +1595,7 @@
 	}
 };
 
-void SpellFunc_SpawnAqueousSpawn(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_SpawnAqueousSpawn(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	AqueousLordAI *pAqueousLordAI = (pCreatureAI != NULL) ? (AqueousLordAI*)pCreatureAI : NULL;
 	if (pAqueousLordAI != NULL)
@@ -1618,7 +1618,7 @@
 class PromenadeSentinelAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(PromenadeSentinelAI, MoonScriptCreatureAI);
-	PromenadeSentinelAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	PromenadeSentinelAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(PROMENADE_SENTINEL_L5_ARCANE_CHARGE, Target_RandomPlayer, 8, 2.7f, 35);
 	}
@@ -1633,7 +1633,7 @@
 class AngeredSoulFragmentAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AngeredSoulFragmentAI, MoonScriptCreatureAI);
-	AngeredSoulFragmentAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AngeredSoulFragmentAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ANGERED_SOUL_FRAGMENT_ANGER, Target_Self, 10, 3, 25);
 	}
@@ -1646,7 +1646,7 @@
 class AshtongueFeralSpiritAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AshtongueFeralSpiritAI, MoonScriptCreatureAI);
-	AshtongueFeralSpiritAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AshtongueFeralSpiritAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 	}
 };
@@ -1660,9 +1660,9 @@
 class EnslavedSoulAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(EnslavedSoulAI, MoonScriptCreatureAI);
-	EnslavedSoulAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature) {}
+	EnslavedSoulAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature) {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ApplyAura(ENSLAVED_SOUL_SOUL_RELEASE);			// beg core to support OnDied casts
 		Despawn(120000, 0);
@@ -1676,12 +1676,12 @@
 class HungeringSoulFragmentAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(HungeringSoulFragmentAI, MoonScriptCreatureAI);
-	HungeringSoulFragmentAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	HungeringSoulFragmentAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		ApplyAura(HUNGERING_SOUL_FRAGMENT_CONSUMING_STRIKES);
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		ParentClass::OnCombatStop(pTarget);
 		if (IsAlive())
@@ -1697,7 +1697,7 @@
 class ShadowyConstructAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowyConstructAI, MoonScriptCreatureAI);
-	ShadowyConstructAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowyConstructAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWY_CONSTRUCT_ATROPHY, Target_Current, 10, 0, 45, 0, 10);
 	}
@@ -1709,7 +1709,7 @@
 class SufferingSoulFragmentAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SufferingSoulFragmentAI, MoonScriptCreatureAI);
-	SufferingSoulFragmentAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	SufferingSoulFragmentAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SUFFERING_SOUL_FRAGMENT_SOUL_BLAST, Target_Self, 8, 2, 30);
 	}
@@ -1725,7 +1725,7 @@
 class VangefulSpiritAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(VangefulSpiritAI, MoonScriptCreatureAI);
-	VangefulSpiritAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	VangefulSpiritAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(VANGEFUL_SPIRIT_SPIRIT_CHAINS, Target_Self, 8, 0, 25);
 		AddSpell(VANGEFUL_SPIRIT_SPIRIT_LANCE, Target_RandomPlayer, 6, 0, 35);	// Current?
@@ -1742,7 +1742,7 @@
 class WrathboneFlayerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(WrathboneFlayerAI, MoonScriptCreatureAI);
-	WrathboneFlayerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	WrathboneFlayerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(WRATHBONE_FLAYER_CLEAVE, Target_Current, 10, 0, 15, 0, 10);
 		AddSpell(WRATHBONE_FLAYER_IGNORED, Target_Current, 7, 0, 25, 0, 10);		// Current or random?
@@ -1768,7 +1768,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    NajentusAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    NajentusAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 
@@ -1810,7 +1810,7 @@
 		spells[3].maxdist2cast = 60.0f;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -1825,7 +1825,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1833,7 +1833,7 @@
        RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Lord Illidan will... crush you.");
 		_unit->PlaySoundToSet(11459);
@@ -1841,7 +1841,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		switch (RandomUInt(2))
 		{
@@ -1903,7 +1903,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1949,13 +1949,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget && RandomTarget == _unit->GetAIInterface()->GetMostHated() && i == 3)
@@ -1976,7 +1976,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2023,7 +2023,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(SupremusAI);
-    SupremusAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SupremusAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		m_MoltenFlame = m_HurtfulStrike = m_MoltenPunch = m_VolcanicGazer = true;
 
@@ -2033,7 +2033,7 @@
 		infoVolcanicGazer =  dbcSpell.LookupEntry(VOLCANIC_GAZER);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Bear witness to the agent of your demise!");	// used when he kills Warden Mellichar
@@ -2041,21 +2041,21 @@
 		timer = 0;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
        RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I am merely one of... infinite multitudes.");
 		_unit->PlaySoundToSet(11126);
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)
 		{
@@ -2243,7 +2243,7 @@
 	SP_AI_Spell spells[9];
 	bool m_spellcheck[9];
 
-    GurtoggAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GurtoggAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 5;
 
@@ -2327,7 +2327,7 @@
 		Phase = 1;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < 9; i++)
 		{
@@ -2346,7 +2346,7 @@
 		Phase = 1;
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
     {
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2364,14 +2364,14 @@
 		Phase = 1;
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->PlaySoundToSet(11439);
 
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		switch (RandomUInt(2))
 		{
@@ -2417,7 +2417,7 @@
 			{
 				_unit->setAttackTimer(spells[0].attackstoptimer, false);
 
-				UnitPointer target = _unit->GetAIInterface()->GetNextTarget();
+				Unit * target = _unit->GetAIInterface()->GetNextTarget();
 				_unit->CastSpell(target, spells[0].info, spells[0].instant);
 
 				spells[0].casttime = t + spells[0].cooldown;
@@ -2429,7 +2429,7 @@
 			{
 				_unit->setAttackTimer(spells[5].attackstoptimer, false);
 
-				UnitPointer target = _unit->GetAIInterface()->GetNextTarget();
+				Unit * target = _unit->GetAIInterface()->GetNextTarget();
 				_unit->CastSpell(target, spells[5].info, spells[5].instant);
 
 				if (_unit->GetAIInterface()->GetSecondHated())
@@ -2447,7 +2447,7 @@
 			// Fel Rage check
 			if (t > spells[7].casttime - 62 && LastThreat != 0)
 			{
-				UnitPointer RageTarget = NULLUNIT;
+				Unit * RageTarget = NULLUNIT;
 				RageTarget = _unit->GetAIInterface()->GetNextTarget();
 				if (RageTarget->FindAura(FEL_RAGE1) && RageTarget->FindAura(FEL_RAGE2))
 				{
@@ -2461,7 +2461,7 @@
 			// Acid Geyser
 			if (LastThreat != 0 && RandomUInt(5) == 1 && t > spells[6].casttime)
 			{
-				UnitPointer RageTarget = NULLUNIT;
+				Unit * RageTarget = NULLUNIT;
 				RageTarget = _unit->GetAIInterface()->GetNextTarget();
 				if (RageTarget->FindAura(FEL_RAGE1) || RageTarget->FindAura(FEL_RAGE2))
 				{
@@ -2479,7 +2479,7 @@
 			{
 				_unit->setAttackTimer(spells[0].attackstoptimer, false);
 
-				UnitPointer target = _unit->GetAIInterface()->GetNextTarget();
+				Unit * target = _unit->GetAIInterface()->GetNextTarget();
 				_unit->CastSpell(target, spells[0].info, spells[0].instant);
 
 				spells[0].casttime = t + spells[0].cooldown;
@@ -2491,13 +2491,13 @@
 			{
 				_unit->setAttackTimer(spells[7].attackstoptimer, false);
 
-				std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+				std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 													/* If anyone wants to use this function, then leave this note!										 */
-				for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+				for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 				{ 
 					if (isHostile(_unit, (*itr)) && (*itr) != _unit && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 					{
-						UnitPointer RandomTarget = NULLUNIT;
+						Unit * RandomTarget = NULLUNIT;
 						RandomTarget = TO_UNIT(*itr);
 
 						if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= 0.0f && _unit->GetDistance2dSq(RandomTarget) <= 6400.0f && _unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))
@@ -2512,7 +2512,7 @@
 
 				size_t RandTarget = rand()%TargetTable.size();
 
-				UnitPointer  RTarget = TargetTable[RandTarget];
+				Unit *  RTarget = TargetTable[RandTarget];
 
 				if (!RTarget)
 					return;
@@ -2522,7 +2522,7 @@
 
 				LastThreat = _unit->GetAIInterface()->getThreatByPtr(RTarget);
 
-				UnitPointer Target = _unit->GetAIInterface()->GetMostHated();
+				Unit * Target = _unit->GetAIInterface()->GetMostHated();
 				uint32 MostHatedThreat = 0;
 				if (Target)	// unneeded, but still safe check :P
 				{
@@ -2560,7 +2560,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if ((i == 3 || i == 4) && Phase != 1)
@@ -2608,13 +2608,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -2632,7 +2632,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2650,13 +2650,13 @@
 
 			if (i == 7 || i == 8)
 			{
-				//AuraPointer aura = new AuraPointer(spells[7].info, 30000, _unit, RTarget);
+				//Aura * aura = new Aura *(spells[7].info, 30000, _unit, RTarget);
 				//if (aura)
 				//	RTarget->AddAura(aura);
 				RTarget->CastSpell(RTarget, spells[7].info, spells[7].instant);
 
 				LastThreat = _unit->GetAIInterface()->getThreatByPtr(RTarget);
-				UnitPointer Target = _unit->GetAIInterface()->GetNextTarget();
+				Unit * Target = _unit->GetAIInterface()->GetNextTarget();
 				RTarget->GetAIInterface()->AttackReaction(RTarget, _unit->GetAIInterface()->getThreatByPtr(Target) + 100000, 0);
 			}
 		}
@@ -2693,7 +2693,7 @@
 class EssenceOfSufferingAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(EssenceOfSufferingAI, MoonScriptCreatureAI);
-    EssenceOfSufferingAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    EssenceOfSufferingAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 
 		AddSpell(EOS_FIXATE, Target_ClosestPlayer, 10, 0, 5);
@@ -2709,7 +2709,7 @@
 		Emote("Pain and suffering are all that await you.", Text_Yell, 11415);
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		ParentClass::OnCombatStart(mTarget);
 		CastSpellNowNoScheduling(mAuraOfSuffering);
@@ -2749,7 +2749,7 @@
 class EssenceOfDesireAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(EssenceOfDesireAI, MoonScriptCreatureAI);
-    EssenceOfDesireAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    EssenceOfDesireAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(EOD_RUNE_SHIELD, Target_Self, 6, 0, 15);
 		AddSpell(EOD_DEADEN, Target_Current, 6, 1, 15);
@@ -2764,7 +2764,7 @@
 		Emote("You can have anything you desire... for a price.", Text_Yell, 11408);
     }
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
 		ParentClass::OnCombatStart(mTarget);
 		CastSpellNowNoScheduling(mAuraOfDesire);
@@ -2805,7 +2805,7 @@
 class EssenceOfAngerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(EssenceOfAngerAI, MoonScriptCreatureAI);
-    EssenceOfAngerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    EssenceOfAngerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		mTaunt = AddSpell(EOA_SEETHE, Target_Current, 0, 0, 0); // on Taunt
 		mSoulScream = AddSpell(EOA_SOUL_SCREAM, Target_Current, 6, 1, 15);
@@ -2821,12 +2821,12 @@
 		Emote("Beware - I live!", Text_Yell, 11399);
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
 		ParentClass::OnCombatStart(mTarget);
 		CastSpellNowNoScheduling(mAuraOfAnger);
     }
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
 		RemoveAuraOnPlayers(EOD_AURA_OF_DESIRE);	
@@ -2856,7 +2856,7 @@
 class ReliquaryOfSoulsAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ReliquaryOfSoulsAI, MoonScriptCreatureAI);
-    ReliquaryOfSoulsAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    ReliquaryOfSoulsAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		mSummonSuffering = AddSpell(ROS_SUMMON_SUFFERING, Target_Self, 0, 0, 0);
 		mSummonDesire = AddSpell(ROS_SUMMON_DESIRE, Target_Self, 0, 0, 0);
@@ -2870,7 +2870,7 @@
 		SpawnedEnsalvedSoul = false;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_9);		
 		SetAllowMelee(false);
@@ -2898,7 +2898,7 @@
 					mEoS = GetNearestCreature(CN_ESSENCEOFSUFFERING);
 					if (mEoS && mEoS->GetUnit() && mEoS->IsAlive())
 					{
-						CreaturePointer pEoS = TO_CREATURE(mEoS->GetUnit());
+						Creature * pEoS = TO_CREATURE(mEoS->GetUnit());
 						if ( pEoS->GetHealthPct()<=1 && pEoS->CalcDistance(_unit)<=3 )
 						{
 							_unit->Emote(EMOTE_STATE_STAND);
@@ -2925,7 +2925,7 @@
 					mEoD = GetNearestCreature(CN_ESSENCEOFDESIRE);
 					if (mEoD && mEoD->GetUnit() && mEoD->IsAlive())
 					{
-						CreaturePointer pEoD = TO_CREATURE(mEoD->GetUnit());
+						Creature * pEoD = TO_CREATURE(mEoD->GetUnit());
 						if ( pEoD->GetHealthPct()<=1 && pEoD->CalcDistance(_unit)<=3 )
 						{							
 							_unit->Emote(EMOTE_STATE_STAND);
@@ -2977,9 +2977,9 @@
 					if (SpawnedEnsalvedSoul)
 					{
 						
-						CreaturePointer creature = NULLCREATURE;
+						Creature * creature = NULLCREATURE;
 						DeadSoulCount = 0;
-						for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+						for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 						{
 							if((*itr)->GetTypeId() == TYPEID_UNIT)
 							{
@@ -3029,7 +3029,7 @@
 	SP_AI_Spell spells[6];
 	bool m_spellcheck[6];
 
-    ShahrazAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ShahrazAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 
@@ -3095,7 +3095,7 @@
 		SoundTimer = 0;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "So, business... or pleasure?");
 		_unit->PlaySoundToSet(11504);
@@ -3110,7 +3110,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -3118,7 +3118,7 @@
 		RemoveAIUpdateEvent();
     }
 	
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I wasn't finished.");
 		_unit->PlaySoundToSet(11511);
@@ -3126,7 +3126,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		switch (RandomUInt(2))
 		{
@@ -3210,7 +3210,7 @@
 			}
 
 			//_unit->CastSpell(_unit, SpellId, true);
-			AuraPointer aura = AuraPointer(new Aura(dbcSpell.LookupEntry(SpellId),(uint32)15000, _unit, _unit));
+			Aura * aura = new Aura(dbcSpell.LookupEntry(SpellId),(uint32)15000, _unit, _unit);
 			if (aura)
 			{
 				_unit->AddAura(aura);
@@ -3242,7 +3242,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -3287,13 +3287,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -3311,7 +3311,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -3360,7 +3360,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    VerasAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    VerasAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 
@@ -3396,7 +3396,7 @@
 		Vanish = 0;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "You wish to test me?");
 		_unit->PlaySoundToSet(11524);
@@ -3413,7 +3413,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
     {
 		_unit->GetAIInterface()->disable_melee = false;
 
@@ -3423,7 +3423,7 @@
 		RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "You got lucky!");
 		_unit->PlaySoundToSet(11527);
@@ -3431,7 +3431,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Valiant Effort.");
 		_unit->PlaySoundToSet(11525);
@@ -3450,12 +3450,12 @@
 			uint32 t = (uint32)time(NULL);
 			if (t > spells[2].casttime)
 			{
-				std::vector <UnitPointer> TargetTable;
-				for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+				std::vector <Unit *> TargetTable;
+				for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 				{ 
 					if (isHostile(_unit, (*itr)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 					{
-						UnitPointer Target = NULLUNIT;
+						Unit * Target = NULLUNIT;
 						Target = TO_UNIT(*itr);
 
 						if (Target->isAlive() && _unit->GetDistance2dSq(Target) <= 30.0f && _unit->GetAIInterface()->getThreatByPtr(Target) > 0)
@@ -3467,7 +3467,7 @@
 				{
 					_unit->GetAIInterface()->ClearHateList();
 
-					UnitPointer UnitToFollow = NULLUNIT;
+					Unit * UnitToFollow = NULLUNIT;
 					size_t Rand = rand()%TargetTable.size();
 					UnitToFollow = TargetTable[Rand];
 
@@ -3488,12 +3488,12 @@
 
 			if (_unit->GetAIInterface()->GetNextTarget() && t > spells[1].casttime && Poisoned && RandomUInt(3) != 1)
 			{
-				UnitPointer TargetToAttack = NULLUNIT;
-				for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+				Unit * TargetToAttack = NULLUNIT;
+				for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 				{ 
 					if (isHostile(_unit, (*itr)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 					{
-						UnitPointer PoisonedTarget = NULLUNIT;
+						Unit * PoisonedTarget = NULLUNIT;
 						PoisonedTarget = TO_UNIT(*itr);
 
 						if (PoisonedTarget->isAlive() && _unit->GetAIInterface()->getThreatByPtr(PoisonedTarget) > 0 && PoisonedTarget->FindAura(DEADLY_POISON))
@@ -3524,7 +3524,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget() && !_unit->FindAura(VANISH))
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -3570,13 +3570,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -3594,7 +3594,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -3645,7 +3645,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    ZerevorAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ZerevorAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -3695,7 +3695,7 @@
 		ArcaneCheck = 0;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -3717,7 +3717,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -3725,7 +3725,7 @@
 		RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		//_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "BossDied");
 		_unit->PlaySoundToSet(11443);
@@ -3733,7 +3733,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Shorel'aran.");
 		_unit->PlaySoundToSet(11441);
@@ -3749,7 +3749,7 @@
 			if (ArcaneCheck <= 0)
 			{
 				ArcaneCheck = 5;
-				UnitPointer Target = NULLUNIT;
+				Unit * Target = NULLUNIT;
 				Target = FindTargetForSpell();
 
 				if (Target)
@@ -3784,7 +3784,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -3829,13 +3829,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -3853,7 +3853,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -3872,15 +3872,15 @@
 	}
 
 	// A bit rewritten FindTarget function
-	UnitPointer FindTargetForSpell()
+	Unit * FindTargetForSpell()
 	{
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		float distance = 5.0f;
 
-		UnitPointer pUnit;
+		Unit * pUnit;
 		float dist;
 
-		for (unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
+		for (unordered_set<Object *>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
 		{
 			if((*itr)->GetTypeId() != TYPEID_UNIT && (*itr)->GetTypeId() != TYPEID_PLAYER)
 				continue;
@@ -3937,7 +3937,7 @@
 	SP_AI_Spell spells[8];
 	bool m_spellcheck[8];
 
-    GathiosAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GathiosAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 
@@ -4008,7 +4008,7 @@
 		spells[7].cooldown = 60;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -4023,7 +4023,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -4031,7 +4031,7 @@
 		RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Lord Illidan... I...");
 		_unit->PlaySoundToSet(11425);
@@ -4039,7 +4039,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Selama amor'anore!");
 		_unit->PlaySoundToSet(11423);
@@ -4062,10 +4062,10 @@
 
 			if (t > spells[4].casttime)
 			{
-				UnitPointer TargetToBuff = NULLUNIT;
-				UnitPointer Malande = NULLUNIT;
-				UnitPointer Zerevor = NULLUNIT;
-				UnitPointer Veras = NULLUNIT;
+				Unit * TargetToBuff = NULLUNIT;
+				Unit * Malande = NULLUNIT;
+				Unit * Zerevor = NULLUNIT;
+				Unit * Veras = NULLUNIT;
 
 				Malande = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 22951);
 				if (Malande && Malande->isAlive())
@@ -4073,7 +4073,7 @@
 					TargetToBuff = Malande;
 					if (RandomUInt(10) == 1)
 					{
-						std::vector<UnitPointer> BuffTable;
+						std::vector<Unit *> BuffTable;
 						Zerevor = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 22950);
 						Veras = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 22952);
 
@@ -4092,7 +4092,7 @@
 
 				else
 				{
-					std::vector<UnitPointer> BuffTable;
+					std::vector<Unit *> BuffTable;
 					Zerevor = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 22950);
 					Veras = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 22952);
 
@@ -4149,7 +4149,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -4200,13 +4200,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -4224,7 +4224,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -4269,7 +4269,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    MalandeAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MalandeAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -4308,7 +4308,7 @@
 		spells[3].cooldown = 20;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -4323,7 +4323,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -4331,7 +4331,7 @@
        RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Destiny... awaits!");
 		_unit->PlaySoundToSet(11485);
@@ -4339,7 +4339,7 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "My work is done.");
 		_unit->PlaySoundToSet(11483);
@@ -4352,7 +4352,7 @@
 			uint32 t = (uint32)time(NULL);
 			if (t > spells[2].casttime)
 			{
-				UnitPointer target = _unit->GetAIInterface()->GetNextTarget();
+				Unit * target = _unit->GetAIInterface()->GetNextTarget();
 				_unit->CastSpell(target, spells[2].info, spells[2].instant);
 
 				spells[2].casttime = t + spells[2].cooldown;
@@ -4377,7 +4377,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -4422,13 +4422,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -4446,7 +4446,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -4490,7 +4490,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    TeronGorefiendAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TeronGorefiendAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -4532,7 +4532,7 @@
 		spells[3].maxdist2cast = 60.0f;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Vengeance is mine!");
 		_unit->PlaySoundToSet(11513);
@@ -4547,7 +4547,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	
 		{
@@ -4566,7 +4566,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -4574,7 +4574,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "The wheel...spins...again....");
 		_unit->PlaySoundToSet(11521);
@@ -4612,7 +4612,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -4657,13 +4657,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -4681,7 +4681,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -4722,7 +4722,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    ShadeofakamaAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ShadeofakamaAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -4738,13 +4738,13 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		hm = 100;
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	
 		{
@@ -4766,7 +4766,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		hm = 100;
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -4774,9 +4774,9 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
-		CreaturePointer cre = NULLCREATURE;
+		Creature * cre = NULLCREATURE;
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I don't want to go back!");
 		_unit->PlaySoundToSet(11420);
         cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(22990, 
@@ -4791,7 +4791,7 @@
 	{
 		if(_unit->GetHealthPct() <= 85 && hm == 100) 
         {
-            CreaturePointer cre = NULLCREATURE;
+            Creature * cre = NULLCREATURE;
             for(int i = 0; i < 2; i++)
             {
                 cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(23421, 
@@ -4807,7 +4807,7 @@
 		}
 		else if(_unit->GetHealthPct() <= 70 && hm == 85)
         {
-            CreaturePointer cre = NULLCREATURE;
+            Creature * cre = NULLCREATURE;
             for(int i = 0; i < 2; i++)
             {
                 cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(23215, 
@@ -4823,7 +4823,7 @@
 		}
 		else if(_unit->GetHealthPct() <= 55 && hm == 70)
         {
-            CreaturePointer cre = NULLCREATURE;
+            Creature * cre = NULLCREATURE;
             for(int i = 0; i < 2; i++)
             {
                 cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(23216, 
@@ -4839,7 +4839,7 @@
 		}
 		else if(_unit->GetHealthPct() <= 40 && hm == 55)
         {
-            CreaturePointer cre = NULLCREATURE;
+            Creature * cre = NULLCREATURE;
             for(int i = 0; i < 2; i++)
             {
                 cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(23523, 
@@ -4855,7 +4855,7 @@
 		}
 		else if(_unit->GetHealthPct() <= 25 && hm == 40)
         {
-            CreaturePointer cre = NULLCREATURE;
+            Creature * cre = NULLCREATURE;
             for(int i = 0; i < 5; i++)
             {
                 cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(23318, 
@@ -4871,7 +4871,7 @@
 		}
 		else if(_unit->GetHealthPct() <= 10 && hm == 25)
         {
-            CreaturePointer cre = NULLCREATURE;
+            Creature * cre = NULLCREATURE;
             for(int i = 0; i < 5; i++)
             {
                 cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(23524, 
@@ -4897,7 +4897,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -5208,7 +5208,7 @@
 class UnselectableTriggerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(UnselectableTriggerAI, MoonScriptCreatureAI);
-    UnselectableTriggerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    UnselectableTriggerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
     }
@@ -5239,7 +5239,7 @@
 class GenericTriggerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(GenericTriggerAI, MoonScriptCreatureAI);
-    GenericTriggerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    GenericTriggerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		SetCanMove(false);
 		_unit->m_noRespawn = true;
@@ -5317,7 +5317,7 @@
 class EyeBeamTriggerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(EyeBeamTriggerAI, MoonScriptCreatureAI);
-    EyeBeamTriggerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    EyeBeamTriggerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_2);
 		_unit->GetAIInterface()->SetAIState(STATE_SCRIPTMOVE);
@@ -5329,7 +5329,7 @@
 		mPosition = -1;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -5374,14 +5374,14 @@
 class ShadowDemonAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ShadowDemonAI, MoonScriptCreatureAI);
-    ShadowDemonAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    ShadowDemonAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		mParalyze = AddSpell(SHADOW_DEMON_PARALYZE, Target_Current, 0, 0, 0);
 		mConsumeSoul = AddSpell(SHADOW_DEMON_CONSUME_SOUL, Target_Current, 0, 0, 0);
 		SetDespawnWhenInactive(true);
 		_unit->m_noRespawn = true;
 
-		UnitPointer pTarget = GetBestPlayerTarget();
+		Unit * pTarget = GetBestPlayerTarget();
 		if (pTarget != NULL)
 		{
 			_unit->GetAIInterface()->AttackReaction(pTarget, 200000);
@@ -5396,18 +5396,18 @@
 		}
     }
 
-	void OnDied(UnitPointer  pKiller)
+	void OnDied(Unit *  pKiller)
 	{
 		if (GetTargetToChannel() != NULL)
 		{
-			UnitPointer pUnit = GetTargetToChannel();
+			Unit * pUnit = GetTargetToChannel();
 			pUnit->RemoveAura(SHADOW_DEMON_PARALYZE);
 		}
 
 		ParentClass::OnDied(pKiller);
 	}
 
-	void OnTargetDied(UnitPointer  pTarget)
+	void OnTargetDied(Unit *  pTarget)
 	{
 		Despawn(2000, 0);
 		ParentClass::OnDied(pTarget);
@@ -5416,7 +5416,7 @@
 	void AIUpdate()
 	{
 		// Ugly code :P
-		UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+		Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL && GetTargetToChannel() != NULL && pTarget == GetTargetToChannel())
 		{
 			if (GetRangeToUnit(pTarget) <= 8.0f)
@@ -5452,12 +5452,12 @@
 #define PARASITIC_SHADOWFIEND_PASSIVE				41913
 #define PARASITIC_SHADOWFIEND_WITH_DAMAGE			41917
 
-void SpellFunc_Parasitic(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_Parasitic(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class ParasiticShadowfiendAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ParasiticShadowfiendAI, MoonScriptCreatureAI);
-    ParasiticShadowfiendAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    ParasiticShadowfiendAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		mParasiticDmg = AddSpell(PARASITIC_SHADOWFIEND_WITH_DAMAGE, Target_Current, 0, 0, 0);
 		mParasitic = AddSpellFunc(&SpellFunc_Parasitic, Target_Current, 0, 0, 0);
@@ -5468,7 +5468,7 @@
 		SetDespawnWhenInactive(true);
 		SetScale(0.0f);
 
-		UnitPointer pTarget = GetBestPlayerTarget(TargetFilter_Closest);
+		Unit * pTarget = GetBestPlayerTarget(TargetFilter_Closest);
 		if (pTarget != NULL)
 		{
 			_unit->GetAIInterface()->SetUnitToFollow(pTarget);
@@ -5482,7 +5482,7 @@
     }
 
 	// Won't work until it's hooked in core
-	void OnHit(UnitPointer pTarget, float pAmount)
+	void OnHit(Unit * pTarget, float pAmount)
 	{
 		if (!pTarget->HasAura(PARASITIC_SHADOWFIEND_PASSIVE))
 		{
@@ -5501,7 +5501,7 @@
 			_unit->GetAIInterface()->SetUnitToFollowAngle(0.0f);
 			RemoveAIUpdateEvent();
 
-			UnitPointer pTarget = GetBestPlayerTarget();
+			Unit * pTarget = GetBestPlayerTarget();
 			if (pTarget != NULL)
 			{
 				_unit->GetAIInterface()->SetNextTarget(pTarget);
@@ -5523,7 +5523,7 @@
 	SpellDesc*	mParasitic;
 };
 
-void SpellFunc_Parasitic(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Parasitic(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	ParasiticShadowfiendAI *Parasitic = (pCreatureAI != NULL) ? (ParasiticShadowfiendAI*)pCreatureAI : NULL;
 	if (Parasitic != NULL)
@@ -5545,9 +5545,9 @@
 class SCRIPT_DECL AkamaGossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer pPlayer, bool AutoSend)
+    void GossipHello(Object * pObject, Player * pPlayer, bool AutoSend)
     {
-		CreaturePointer pAIOwner = TO_CREATURE(pObject);
+		Creature * pAIOwner = TO_CREATURE(pObject);
 		if (pAIOwner->GetScript() == NULL)
 			return;
 
@@ -5568,9 +5568,9 @@
 			Menu->SendTo(pPlayer);
     }
  
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer pPlayer, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * pPlayer, uint32 Id, uint32 IntId, const char * EnteredCode)
     {
-		CreaturePointer pAIOwner = TO_CREATURE(pObject);
+		Creature * pAIOwner = TO_CREATURE(pObject);
 		if (pAIOwner->GetScript() == NULL)
 			return;
 
@@ -5617,7 +5617,7 @@
 class AkamaAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(AkamaAI, MoonScriptBossAI);
-	AkamaAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	AkamaAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
     {
 		AddPhaseSpell(2, AddSpell(AKAMA_BLESSING_OF_KINGS, Target_Self, 15, 0, 60));
 		mHealingPotion = AddSpell(AKAMA_HEALING_POTION, Target_Self, 0, 0, 0);
@@ -5646,21 +5646,21 @@
 		mTimeLeft = mScenePart = 0;
 	}
     
-    void OnCombatStart(UnitPointer  pTarget)
+    void OnCombatStart(Unit *  pTarget)
     {
 		ParentClass::OnCombatStart(pTarget);
 		SetWieldWeapon(true);
 		CancelAllCooldowns();
     }
 
-    void OnCombatStop(UnitPointer  pTarget)
+    void OnCombatStop(Unit *  pTarget)
     {
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
 		SetWieldWeapon(false);
     }
 
-	void OnDied(UnitPointer  pKiller)
+	void OnDied(Unit *  pKiller)
 	{
 		ParentClass::OnDied(pKiller);
 	}
@@ -5688,8 +5688,8 @@
 			mScenePart = -1;
 		}
 
-		GameObjectPointer pGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(774.7f, 304.6f, 314.85f, 185905);
-		UnitPointer pDoorTrigger = ForceCreatureFind(CN_DOOR_EVENT_TRIGGER, 771.5f, 304.7f, 319.0f);
+		GameObject * pGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(774.7f, 304.6f, 314.85f, 185905);
+		Unit * pDoorTrigger = ForceCreatureFind(CN_DOOR_EVENT_TRIGGER, 771.5f, 304.7f, 319.0f);
 		if ((mScenePart <= 15 && pGate == NULL) || mScenePart == -1)
 		{
 			Emote("It's strange that Illidan doesn't protect himself against intruders.", Text_Say, 0);
@@ -5818,7 +5818,7 @@
 	{
 		if (mIllidanAI == NULL)
 		{
-			CreaturePointer pIllidan = TO_CREATURE(ForceCreatureFind(22917, 704.539001f, 305.282013f, 353.919006f));
+			Creature * pIllidan = TO_CREATURE(ForceCreatureFind(22917, 704.539001f, 305.282013f, 353.919006f));
 			if (pIllidan != NULL && pIllidan->GetScript() != NULL)
 			{
 				mIllidanAI = (MoonScriptCreatureAI*)(pIllidan->GetScript());
@@ -5889,8 +5889,8 @@
 			mIllidanAI->SetWieldWeapon(true);
 			break;
 		case 15:
-			GameObjectPointer pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
-			GameObjectPointer pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
+			GameObject * pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
+			GameObject * pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
 			if (pRightGate != NULL)
 			{
 				pRightGate->SetState(1);
@@ -5913,7 +5913,7 @@
 			mIllidanAI->SetCanEnterCombat(true);
 			mIllidanAI->SetCanMove(true);
 
-			UnitPointer pTarget = FindClosestTargetToUnit(mIllidanAI->GetUnit());
+			Unit * pTarget = FindClosestTargetToUnit(mIllidanAI->GetUnit());
 			if (pTarget == NULL)
 			{
 				pTarget = _unit;
@@ -6062,7 +6062,7 @@
 		case 1:{
 			Emote("The Light will fill these dismal halls once again. I swear it.", Text_Yell, 11387);
 
-			UnitPointer pIllidan = ForceCreatureFind(22917);
+			Unit * pIllidan = ForceCreatureFind(22917);
 			if (pIllidan != NULL)
 			{
 				_unit->GetAIInterface()->SetNextTarget(pIllidan);
@@ -6121,19 +6121,19 @@
     }
 
 	// A bit rewritten FindTarget function
-	UnitPointer FindClosestTargetToUnit(UnitPointer pSeeker)
+	Unit * FindClosestTargetToUnit(Unit * pSeeker)
 	{
 		if (pSeeker == NULLUNIT)
 			return NULLUNIT;
 
-		UnitPointer pTarget = NULLUNIT;
+		Unit * pTarget = NULLUNIT;
 		float distance = 70.0f;
 		float z_diff;
 
-		UnitPointer pUnit;
+		Unit * pUnit;
 		float dist;
 
-		for (unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr)
+		for (unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr)
 		{
 			pUnit = TO_UNIT(*itr);
 
@@ -6191,7 +6191,7 @@
 class MaievAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(MaievAI, MoonScriptBossAI);
-	MaievAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	MaievAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
     {
 		AddPhaseSpell(1, AddSpell(MAIEV_SHADOW_STRIKE, Target_Current, 10, 0, 30));
 		AddPhaseSpell(2, AddSpell(MAIEV_THROW_DAGGER, Target_Current, 50, 1, 0, 15, 40));
@@ -6212,13 +6212,13 @@
 		mIllidanAI = NULL;
     }
     
-    void OnCombatStart(UnitPointer  pTarget)
+    void OnCombatStart(Unit *  pTarget)
     {
 		SetWieldWeapon(true);
 		CancelAllCooldowns();
     }
 
-    void OnCombatStop(UnitPointer  pTarget)
+    void OnCombatStop(Unit *  pTarget)
     {
 		//OnCombatStop(pTarget);		// causes crashes
 		CancelAllSpells();
@@ -6243,7 +6243,7 @@
 		}
     }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		_unit->SetUInt32Value(UNIT_FIELD_HEALTH, _unit->GetUInt32Value(UNIT_FIELD_MAXHEALTH));
 	}
@@ -6291,7 +6291,7 @@
 			}
 			else if (IsTimerFinished(mTrapTimer))
 			{
-				UnitPointer pTarget = GetBestPlayerTarget();
+				Unit * pTarget = GetBestPlayerTarget();
 				if (pTarget != NULL)
 				{
 					CastSpellNowNoScheduling(mTeleport);
@@ -6426,8 +6426,8 @@
 				SetWieldWeapon(false);
 				break;
 			case 4:{
-				GameObjectPointer pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
-				GameObjectPointer pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
+				GameObject * pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
+				GameObject * pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
 				if (pRightGate != NULL)
 				{
 					pRightGate->SetState(0);
@@ -6446,7 +6446,7 @@
 				break;
 			case 6:{
 				Emote("Farewell, champions.", Text_Yell, 11498);
-				CreaturePointer pAkama = TO_CREATURE(ForceCreatureFind(CN_AKAMA, ToIllidan[19].mX, ToIllidan[19].mY, ToIllidan[19].mZ));
+				Creature * pAkama = TO_CREATURE(ForceCreatureFind(CN_AKAMA, ToIllidan[19].mX, ToIllidan[19].mY, ToIllidan[19].mZ));
 				if (pAkama != NULL)
 				{
 					AkamaAI *pAkamaAI = (AkamaAI*)(static_cast<MoonScriptCreatureAI*>(pAkama->GetScript()));
@@ -6582,12 +6582,12 @@
 #define CN_BLADE_OF_AZZINOTH						22996
 #define ILLIDAN_WAYPOINT_SIZE						5
 
-void SpellFunc_Illidan_Parasitic(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_Illidan_Parasitic(SpellDesc *pThis, MoonScriptCreatureAI *pCreatureAI, Unit * pTarget, TargetType pType);
 
 class IllidanStormrageAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(IllidanStormrageAI, MoonScriptBossAI);
-	IllidanStormrageAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	IllidanStormrageAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		//Phase 1 spells
 		AddPhaseSpell(1, AddSpell(ILLIDAN_SHEAR, Target_Current, 12, 1.5f, 15));
@@ -6644,10 +6644,10 @@
 		mAllow = true;
 	}
 
-	void OnCombatStart(UnitPointer  pTarget)
+	void OnCombatStart(Unit *  pTarget)
 	{
-		GameObjectPointer pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
-		GameObjectPointer pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
+		GameObject * pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
+		GameObject * pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
 		if (pRightGate != NULL)
 		{
 			pRightGate->SetState(1);
@@ -6665,7 +6665,7 @@
 		mParasitic->mEnabled = false;
 	}
 
-	void OnCombatStop(UnitPointer  pTarget)
+	void OnCombatStop(Unit *  pTarget)
 	{
 		// General
 		_unit->SetUInt32Value(UNIT_NPC_EMOTESTATE, 0);
@@ -6692,14 +6692,14 @@
 			mFoA2 = NULL;
 		}
 
-		CreaturePointer pTrigger = TO_CREATURE(ForceCreatureFind(CN_FACE_TRIGGER, 677.399963f, 305.545044f, 353.192169f));
+		Creature * pTrigger = TO_CREATURE(ForceCreatureFind(CN_FACE_TRIGGER, 677.399963f, 305.545044f, 353.192169f));
 		if (pTrigger != NULL)
 		{
 			pTrigger->Despawn(0, 0);
 		}
 		for (int i = 0; i < 2; ++i)
 		{
-			CreaturePointer pBlade = TO_CREATURE(ForceCreatureFind(CN_BLADE_OF_AZZINOTH, UnitPos[i].mX, UnitPos[i].mY, UnitPos[i].mZ));
+			Creature * pBlade = TO_CREATURE(ForceCreatureFind(CN_BLADE_OF_AZZINOTH, UnitPos[i].mX, UnitPos[i].mY, UnitPos[i].mZ));
 			if (pBlade != NULL)
 			{
 				pBlade->SetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT, 0);
@@ -6714,8 +6714,8 @@
 
 		if (IsAlive())
 		{
-			GameObjectPointer pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
-			GameObjectPointer pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
+			GameObject * pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
+			GameObject * pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
 			if (pRightGate != NULL)
 			{
 				pRightGate->SetState(0);
@@ -6725,7 +6725,7 @@
 				pLeftGate->SetState(0);
 			}
 
-			CreaturePointer pMaiev = TO_CREATURE(ForceCreatureFind(CN_MAIEV));
+			Creature * pMaiev = TO_CREATURE(ForceCreatureFind(CN_MAIEV));
 			if (pMaiev != NULL)
 			{
 				pMaiev->Despawn(0, 0);
@@ -6735,9 +6735,9 @@
 		ParentClass::OnCombatStop(pTarget);
 	}
 
-	void OnDied(UnitPointer  pKiller)
+	void OnDied(Unit *  pKiller)
 	{
-		CreaturePointer pMaiev = TO_CREATURE(ForceCreatureFind(CN_MAIEV));
+		Creature * pMaiev = TO_CREATURE(ForceCreatureFind(CN_MAIEV));
 		if (pMaiev != NULL && pMaiev->isAlive())
 		{
 			_unit->SetUInt32Value(UNIT_FIELD_HEALTH, 1);
@@ -6752,8 +6752,8 @@
 		}
 		else
 		{
-			GameObjectPointer pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
-			GameObjectPointer pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
+			GameObject * pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
+			GameObject * pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
 			if (pRightGate != NULL)
 			{
 				pRightGate->SetState(0);
@@ -6768,13 +6768,13 @@
 	}
 
 	// Does not work until it's hooked
-	void OnHit(UnitPointer mVictim, float fAmount)
+	void OnHit(Unit * mVictim, float fAmount)
 	{
 		Emote("ON HIT1!", Text_Yell, 0);
 		if (mVictim->IsCreature() && (mVictim->GetEntry() == CN_MAIEV || mVictim->GetEntry() == CN_AKAMA))
 		{
 			Emote("ON HIT2!", Text_Yell, 0);
-			UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+			Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 			if (pTarget == NULL || !pTarget->IsPlayer())
 			{
 				pTarget = _unit->GetAIInterface()->GetSecondHated();
@@ -6792,11 +6792,11 @@
 		}
 	}
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if (mAttacker->IsCreature() && (mAttacker->GetEntry() == CN_MAIEV || mAttacker->GetEntry() == CN_AKAMA))
 		{
-			UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+			Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 			if (pTarget == NULL || !pTarget->IsPlayer())
 			{
 				pTarget = _unit->GetAIInterface()->GetSecondHated();
@@ -6879,7 +6879,7 @@
 		}
 		else if (GetHealthPercent() <= 65 && !IsCasting())
 		{
-			CreaturePointer pAkama = TO_CREATURE(ForceCreatureFind(CN_AKAMA));
+			Creature * pAkama = TO_CREATURE(ForceCreatureFind(CN_AKAMA));
 			if (pAkama != NULL && pAkama->GetScript() != NULL)
 			{
 				AkamaAI *pAkamaAI = static_cast<AkamaAI*>(pAkama->GetScript());
@@ -6945,7 +6945,7 @@
 			case 2:
 				for (int i = 0; i < 2; ++i)
 				{
-					CreaturePointer pBlade = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_BLADE_OF_AZZINOTH, UnitPos[i].mX, UnitPos[i].mY, UnitPos[i].mZ, UnitPos[i].mO, true, false, 0, 0);
+					Creature * pBlade = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_BLADE_OF_AZZINOTH, UnitPos[i].mX, UnitPos[i].mY, UnitPos[i].mZ, UnitPos[i].mO, true, false, 0, 0);
 					if (pBlade != NULL)
 					{
 						pBlade->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
@@ -6958,7 +6958,7 @@
 				mFoA2 = SpawnCreature(22997, 673.008667f, 283.813660f, 354.267548f, 6.203853f);
 				if (mFoA1 != NULL)
 				{
-					UnitPointer pBlade = ForceCreatureFind(CN_BLADE_OF_AZZINOTH, UnitPos[0].mX, UnitPos[0].mY, UnitPos[0].mZ);
+					Unit * pBlade = ForceCreatureFind(CN_BLADE_OF_AZZINOTH, UnitPos[0].mX, UnitPos[0].mY, UnitPos[0].mZ);
 					if (pBlade != NULL)
 					{
 						pBlade->SetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT, mFoA1->GetUnit()->GetGUID());
@@ -6967,7 +6967,7 @@
 				}
 				if (mFoA2 != NULL)
 				{
-					UnitPointer pBlade = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(UnitPos[1].mX, UnitPos[1].mY, UnitPos[1].mZ, CN_BLADE_OF_AZZINOTH);
+					Unit * pBlade = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(UnitPos[1].mX, UnitPos[1].mY, UnitPos[1].mZ, CN_BLADE_OF_AZZINOTH);
 					if (pBlade != NULL)
 					{
 						pBlade->SetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT, mFoA2->GetUnit()->GetGUID());
@@ -6987,7 +6987,7 @@
 			case 5:
 				for (int i = 0 ; i < 2; ++i)
 				{
-					CreaturePointer Blade = TO_CREATURE(ForceCreatureFind(CN_BLADE_OF_AZZINOTH, UnitPos[i].mX, UnitPos[i].mY, UnitPos[i].mZ));
+					Creature * Blade = TO_CREATURE(ForceCreatureFind(CN_BLADE_OF_AZZINOTH, UnitPos[i].mX, UnitPos[i].mY, UnitPos[i].mZ));
 					if (Blade != NULL)
 					{
 						Blade->Despawn(0,0);
@@ -7008,7 +7008,7 @@
 				_unit->Emote(EMOTE_ONESHOT_LAND);
 				break;
 			case 8:{
-				CreaturePointer pTrigger = TO_CREATURE(ForceCreatureFind(CN_FACE_TRIGGER, 677.399963f, 305.545044f, 353.192169f));
+				Creature * pTrigger = TO_CREATURE(ForceCreatureFind(CN_FACE_TRIGGER, 677.399963f, 305.545044f, 353.192169f));
 				if (pTrigger != NULL)
 				{
 					pTrigger->Despawn(0, 0);
@@ -7046,7 +7046,7 @@
 		{
 			if (!mFoA1->IsAlive())
 			{
-				UnitPointer pBlade = ForceCreatureFind(CN_BLADE_OF_AZZINOTH, UnitPos[0].mX, UnitPos[0].mY, UnitPos[0].mZ);
+				Unit * pBlade = ForceCreatureFind(CN_BLADE_OF_AZZINOTH, UnitPos[0].mX, UnitPos[0].mY, UnitPos[0].mZ);
 				if (pBlade != NULL)
 				{
 					pBlade->SetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT, 0);
@@ -7060,7 +7060,7 @@
 		{
 			if (!mFoA2->IsAlive())
 			{
-				UnitPointer pBlade = ForceCreatureFind(CN_BLADE_OF_AZZINOTH, UnitPos[1].mX, UnitPos[1].mY, UnitPos[1].mZ);
+				Unit * pBlade = ForceCreatureFind(CN_BLADE_OF_AZZINOTH, UnitPos[1].mX, UnitPos[1].mY, UnitPos[1].mZ);
 				if (pBlade != NULL)
 				{
 					pBlade->SetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT, 0);
@@ -7076,7 +7076,7 @@
 			{
 				if (mFoA1 == NULL && mFoA2 == NULL)
 				{
-					UnitPointer pTrigger = ForceCreatureFind(CN_FACE_TRIGGER, 677.399963f, 305.545044f, 353.192169f);
+					Unit * pTrigger = ForceCreatureFind(CN_FACE_TRIGGER, 677.399963f, 305.545044f, 353.192169f);
 					if (pTrigger != NULL)
 					{
 						_unit->GetAIInterface()->SetNextTarget(pTrigger);
@@ -7122,7 +7122,7 @@
 						FireWall = RandomUInt(7);
 					}
 
-					CreaturePointer pTrigger = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_EYE_BEAM_TRIGGER, EyeBeamPaths[FireWall].mX, EyeBeamPaths[FireWall].mY, EyeBeamPaths[FireWall].mZ, EyeBeamPaths[FireWall].mO, true, false, 0, 0);
+					Creature * pTrigger = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_EYE_BEAM_TRIGGER, EyeBeamPaths[FireWall].mX, EyeBeamPaths[FireWall].mY, EyeBeamPaths[FireWall].mZ, EyeBeamPaths[FireWall].mO, true, false, 0, 0);
 					if (pTrigger != NULL && pTrigger->GetScript() != NULL)
 					{
 						Emote("Stare into the eyes of the Betrayer!", Text_Yell, 11481);
@@ -7190,7 +7190,7 @@
 			if (mMiscEventPart == 5)
 			{
 				ClearHateList();
-				UnitPointer pTarget = GetBestPlayerTarget();
+				Unit * pTarget = GetBestPlayerTarget();
 				if (pTarget != NULL)
 				{
 					_unit->GetAIInterface()->AttackReaction(pTarget, 5000);
@@ -7325,7 +7325,7 @@
 		MaievAI *pMaievAI = NULL;
 		if (mScenePart > 3)
 		{
-			CreaturePointer pMaiev = TO_CREATURE(ForceCreatureFind(CN_MAIEV));
+			Creature * pMaiev = TO_CREATURE(ForceCreatureFind(CN_MAIEV));
 			if (pMaiev != NULL && pMaiev->GetScript() != NULL)
 			{
 				pMaievAI = (MaievAI*)(static_cast<MoonScriptCreatureAI*>(pMaiev->GetScript()));
@@ -7531,7 +7531,7 @@
 		}
 		else if (_unit->GetAIInterface()->GetNextTarget() != NULL)
 		{
-			UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+			Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 			if (GetRangeToUnit(pTarget) <= 80.0f)
 			{
 				SetBehavior(Behavior_Spell);
@@ -7550,7 +7550,7 @@
 				if (mFlameBurstTimer <= 0)
 				{
 					CastSpellNowNoScheduling(mFlameBurst);
-					for (unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
+					for (unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 					{
 						MoonScriptCreatureAI *pAI = SpawnCreature(CN_FLAME_BURST, (*itr)->GetPositionX(), (*itr)->GetPositionY(), (*itr)->GetPositionZ(), 0, true);
 						_unit->CastSpell((*itr), ILLIDAN_FLAME_BURST2, true);
@@ -7629,7 +7629,7 @@
 			}
 			if (mYellTimer <= 0 && _unit->GetAIInterface()->GetNextTarget() != NULL)
 			{
-				UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+				Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 				if (pTarget->IsCreature() && pTarget->GetEntry() == CN_MAIEV)
 				{
 					Emote("Feel the hatred of ten thousand years!", Text_Yell, 11470);
@@ -7647,10 +7647,10 @@
 		if (pWaypointId == 1)
 		{
 			ClearHateList();
-			UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+			Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 			if (pTarget != NULL && (!pTarget->IsCreature() || pTarget->GetEntry() != CN_FACE_TRIGGER))
 			{
-				CreaturePointer pTrigger = TO_CREATURE(ForceCreatureFind(CN_FACE_TRIGGER, 677.399963f, 305.545044f, 353.192169f));
+				Creature * pTrigger = TO_CREATURE(ForceCreatureFind(CN_FACE_TRIGGER, 677.399963f, 305.545044f, 353.192169f));
 				if (pTrigger != NULL)
 				{
 					_unit->GetAIInterface()->SetNextTarget(pTrigger);
@@ -7666,7 +7666,7 @@
 
 	void Destroy()
 	{
-		CreaturePointer pAkama = TO_CREATURE(ForceCreatureFind(CN_AKAMA));
+		Creature * pAkama = TO_CREATURE(ForceCreatureFind(CN_AKAMA));
 		if (pAkama != NULL && pAkama->GetScript() != NULL)
 		{
 			AkamaAI *pAI = (AkamaAI*)(pAkama->GetScript());
@@ -7677,7 +7677,7 @@
 			}
 		}
 
-		CreaturePointer pMaiev = TO_CREATURE(ForceCreatureFind(CN_MAIEV));
+		Creature * pMaiev = TO_CREATURE(ForceCreatureFind(CN_MAIEV));
 		if (pMaiev != NULL && pMaiev->GetScript() != NULL)
 		{
 			MaievAI *pAI = (MaievAI*)(pMaiev->GetScript());
@@ -7689,8 +7689,8 @@
 		}
 
 		// commented - due to the creature not being in world when this is called, mapmgr == null -> access violation
-/*		GameObjectPointer pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
-		GameObjectPointer pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
+/*		GameObject * pRightGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(745.07f, 241.802f, 354.292f, 200000);
+		GameObject * pLeftGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(744.829f, 369.276f, 354.324f, 200001);
 		if (pRightGate != NULL)
 		{
 			pRightGate->SetState(0);
@@ -7745,7 +7745,7 @@
 	uint32					mCurrentWaypoint;
 };
 
-void SpellFunc_Illidan_Parasitic(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Illidan_Parasitic(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	IllidanStormrageAI *Illidan = (pCreatureAI != NULL) ? (IllidanStormrageAI*)pCreatureAI : NULL;
 	if (Illidan != NULL)
@@ -7788,7 +7788,7 @@
 class CageTrapTriggerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(CageTrapTriggerAI, MoonScriptCreatureAI);
-    CageTrapTriggerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    CageTrapTriggerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
 		_unit->GetAIInterface()->m_canMove = false;
@@ -7800,9 +7800,9 @@
 		mHasTrapped = false;
     }
 
-	void OnCombatStart(UnitPointer  pTarget) {}
+	void OnCombatStart(Unit *  pTarget) {}
 
-    void OnCombatStop(UnitPointer  pTarget)
+    void OnCombatStop(Unit *  pTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -7810,13 +7810,13 @@
 
     void AIUpdate()
     {
-		UnitPointer pIllidan = ForceCreatureFind(22917);
+		Unit * pIllidan = ForceCreatureFind(22917);
 		if (pIllidan != NULL)
 		{
 			IllidanStormrageAI *pAI = (IllidanStormrageAI*)(static_cast<MoonScriptCreatureAI*>(TO_CREATURE(pIllidan)->GetScript()));
 			if (pAI->mMiscEventPart != 0 && mTriggerAIList.size() == 0)
 			{
-				GameObjectPointer pGameObject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), GO_CAGE_TRAP);
+				GameObject * pGameObject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), GO_CAGE_TRAP);
 				if (pGameObject != NULL)
 				{
 					pGameObject->Despawn(0);
@@ -7870,7 +7870,7 @@
 			}
 			else if (mHasTrapped || !pIllidan->isAlive())
 			{
-				GameObjectPointer pGameObject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), GO_CAGE_TRAP);
+				GameObject * pGameObject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), GO_CAGE_TRAP);
 				if (pGameObject != NULL)
 				{
 					pGameObject->Despawn(0);
@@ -7906,7 +7906,7 @@
 		}
 		else
 		{
-			GameObjectPointer pGameObject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), GO_CAGE_TRAP);
+			GameObject * pGameObject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), GO_CAGE_TRAP);
 			if (pGameObject != NULL)
 			{
 				pGameObject->Despawn(0);
@@ -7939,15 +7939,15 @@
 class CageTrapGO : public GameObjectAIScript
 {
 public:
-	CageTrapGO(GameObjectPointer pGameObject) : GameObjectAIScript(pGameObject)
+	CageTrapGO(GameObject * pGameObject) : GameObjectAIScript(pGameObject)
 	{
 		_gameobject->SetFloatValue(OBJECT_FIELD_SCALE_X, 3);
 	}
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		_gameobject->SetUInt32Value(GAMEOBJECT_FLAGS, 1);
-		CreaturePointer pTrigger = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), CN_CAGE_TRAP_DISTURB_TRIGGER);
+		Creature * pTrigger = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), CN_CAGE_TRAP_DISTURB_TRIGGER);
 		if (pTrigger != NULL && pTrigger->GetScript() != NULL)
 		{
 			CageTrapTriggerAI *pTriggerAI = static_cast<CageTrapTriggerAI*>(pTrigger->GetScript());
@@ -7960,7 +7960,7 @@
 		delete this;
 	}
 
-	static GameObjectAIScript *Create(GameObjectPointer pGameObject) { return new CageTrapGO(pGameObject); }
+	static GameObjectAIScript *Create(GameObject * pGameObject) { return new CageTrapGO(pGameObject); }
 };
 
 // Udalo and Olum AI
@@ -7970,7 +7970,7 @@
 class DranaeiSpiritAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(DranaeiSpiritAI, MoonScriptCreatureAI);
-    DranaeiSpiritAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    DranaeiSpiritAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		Despawn(45000);
 		SetCanEnterCombat(false);
@@ -7979,7 +7979,7 @@
 
 	void Destroy()
 	{
-		CreaturePointer pAkama = TO_CREATURE(ForceCreatureFind(22990));
+		Creature * pAkama = TO_CREATURE(ForceCreatureFind(22990));
 		if (pAkama != NULL && pAkama->GetScript() != NULL)
 		{
 			AkamaAI *pAI = (AkamaAI*)(pAkama->GetScript());
@@ -8004,13 +8004,13 @@
 #define FLAME_OF_AZZINOTH_ENRAGE			40683		// 40683 or 40743
 #define FLAME_OF_AZZINOTH_CHARGE			40602		// CHAOS_CHARGE 40497 CHARGE 40602
 
-void SpellFunc_FlameOfAzzinothFlameBlast(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
-void SpellFunc_FlameOfAzzinothCharge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_FlameOfAzzinothFlameBlast(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
+void SpellFunc_FlameOfAzzinothCharge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class FlameOfAzzinothAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(FlameOfAzzinothAI, MoonScriptCreatureAI);
-    FlameOfAzzinothAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    FlameOfAzzinothAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		mFlameBlast = AddSpell(FLAME_OF_AZZINOTH_FLAME_BLAST, Target_Self, 0, 0, 0);
 		AddSpellFunc(&SpellFunc_FlameOfAzzinothFlameBlast, Target_Current, 15, 0, 25, 0, 10);
@@ -8021,7 +8021,7 @@
 
 		_unit->m_noRespawn = true;
 
-		UnitPointer pTarget = GetBestPlayerTarget(TargetFilter_Closest);
+		Unit * pTarget = GetBestPlayerTarget(TargetFilter_Closest);
 		if (pTarget != NULL)
 		{
 			_unit->GetAIInterface()->AttackReaction(pTarget, 200);
@@ -8029,7 +8029,7 @@
 		}
     }
 
-	void OnCombatStart(UnitPointer  pTarget)
+	void OnCombatStart(Unit *  pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 		CancelAllCooldowns();
@@ -8038,11 +8038,11 @@
 	void AIUpdate()
 	{
 		// Uh... so ugly, but that's what Wiki says
-		UnitPointer pBlade1 = ForceCreatureFind(22996, UnitPos[0].mX, UnitPos[0].mY, UnitPos[0].mZ);
-		UnitPointer pBlade2 = ForceCreatureFind(22996, UnitPos[1].mX, UnitPos[1].mY, UnitPos[1].mZ);
+		Unit * pBlade1 = ForceCreatureFind(22996, UnitPos[0].mX, UnitPos[0].mY, UnitPos[0].mZ);
+		Unit * pBlade2 = ForceCreatureFind(22996, UnitPos[1].mX, UnitPos[1].mY, UnitPos[1].mZ);
 		if (pBlade1 != NULL && pBlade2 != NULL && mChargeSpellFunc->mLastCastTime + mChargeSpellFunc->mCooldown <= (uint32)time(NULL))
 		{
-			for (unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
+			for (unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 			{	// && or || ? - not sure about details too
 				if ((*itr)->CalcDistance(pBlade1) > 40.0f || (*itr)->CalcDistance(pBlade2) > 40.0f)
 				{
@@ -8060,7 +8060,7 @@
 
 	void Destroy()
 	{
-		CreaturePointer pIllidan = TO_CREATURE(ForceCreatureFind(22917));
+		Creature * pIllidan = TO_CREATURE(ForceCreatureFind(22917));
 		if (pIllidan != NULL && pIllidan->GetScript() != NULL)
 		{
 			IllidanStormrageAI *pAI = (IllidanStormrageAI*)(pIllidan->GetScript());
@@ -8086,7 +8086,7 @@
 	SpellDesc*	mEnrage;
 };
 
-void SpellFunc_FlameOfAzzinothFlameBlast(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_FlameOfAzzinothFlameBlast(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	FlameOfAzzinothAI* FlameOfAzzinoth = ( pCreatureAI ) ? (FlameOfAzzinothAI*)pCreatureAI : NULL;
 	if( FlameOfAzzinoth )
@@ -8096,7 +8096,7 @@
 	}
 }
 
-void SpellFunc_FlameOfAzzinothCharge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_FlameOfAzzinothCharge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	FlameOfAzzinothAI* FlameOfAzzinoth = ( pCreatureAI ) ? (FlameOfAzzinothAI*)pCreatureAI : NULL;
 	if( FlameOfAzzinoth )
Index: Trunk/src/InstanceScripts/Raid_BlackwingLair.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_BlackwingLair.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_BlackwingLair.cpp	(working copy)
@@ -40,7 +40,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    DTcaptainAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DTcaptainAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -66,19 +66,19 @@
 		spells[1].attackstoptimer = 2000; // 1sec
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -94,7 +94,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -161,7 +161,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    DTflamescaleAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DTflamescaleAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 1;
@@ -182,19 +182,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -210,7 +210,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -284,7 +284,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    DTwyrmkinAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DTwyrmkinAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 1;
@@ -305,19 +305,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -333,7 +333,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -401,7 +401,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    TechnicianAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TechnicianAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 1;
@@ -422,19 +422,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -450,7 +450,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -508,7 +508,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    BlackWarlockAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BlackWarlockAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -535,19 +535,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -563,7 +563,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -655,7 +655,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    LashlayerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LashlayerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 1;
@@ -676,7 +676,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "None of your kind should be here. You have doomed only yourselves!");
@@ -684,14 +684,14 @@
 		//_unit->PlaySoundToSet(8287);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -707,7 +707,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -763,7 +763,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    FiremawAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FiremawAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -790,19 +790,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -818,7 +818,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -873,7 +873,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    EbonrocAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    EbonrocAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -900,19 +900,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -928,7 +928,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -983,7 +983,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    FlamegorAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FlamegorAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -1010,19 +1010,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1038,7 +1038,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1118,7 +1118,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    VaelastraszAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    VaelastraszAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 3;
@@ -1154,26 +1154,26 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->CastSpell(_unit, spells[0].info, spells[0].instant);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     { 
         _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Forgive me, your death only adds to my failure.");
         _unit->PlaySoundToSet(8284);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "At last the agony ends. I have failed you my Queen... I have failed us all...");
 	//	_unit->PlaySoundToSet(); Missing SoundSet
@@ -1199,7 +1199,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1244,7 +1244,7 @@
 class VaelastraszGossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer  Plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player *  Plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 9903, Plr);
@@ -1254,7 +1254,7 @@
 
     }
 	
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId)
+    void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId)
     {
 
     }
Index: Trunk/src/InstanceScripts/Raid_CoT_BattleOfMountHyjal.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_CoT_BattleOfMountHyjal.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_CoT_BattleOfMountHyjal.cpp	(working copy)
@@ -54,7 +54,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(JainaProudmooreAI);
 
-    JainaProudmooreAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    JainaProudmooreAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		HyjalPhase[_unit->GetInstanceID()] = HYJAL_PHASE_NOT_STARTED;
 		_unit->SetUInt32Value(UNIT_NPC_FLAGS, 1);
@@ -64,7 +64,7 @@
 class JainaProudmooreGS : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1, Plr);
@@ -88,9 +88,9 @@
 			Menu->SendTo(Plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
 	{
-		CreaturePointer creature = TO_CREATURE(pObject);
+		Creature * creature = TO_CREATURE(pObject);
 
 		switch(HyjalPhase[pObject->GetInstanceID()])
 		{
@@ -103,7 +103,7 @@
 		creature->SetUInt32Value(UNIT_NPC_FLAGS, 0);
 	}
 
-	void GossipEnd(ObjectPointer pObject, PlayerPointer Plr) { GossipScript::GossipEnd(pObject, Plr); }
+	void GossipEnd(Object * pObject, Player * Plr) { GossipScript::GossipEnd(pObject, Plr); }
 	void Destroy() { delete this; }
 };
 
@@ -115,7 +115,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(ThrallAI);
 
-    ThrallAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ThrallAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->SetUInt32Value(UNIT_NPC_FLAGS, 1);
 	}
@@ -124,7 +124,7 @@
 class ThrallGS : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer Plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * Plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1, Plr);
@@ -144,9 +144,9 @@
 			Menu->SendTo(Plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code)
 	{
-		CreaturePointer creature = TO_CREATURE(pObject);
+		Creature * creature = TO_CREATURE(pObject);
 
 		switch(HyjalPhase[pObject->GetInstanceID()])
 		{
@@ -158,7 +158,7 @@
 		creature->SetUInt32Value(UNIT_NPC_FLAGS, 0);
 	}
 
-	void GossipEnd(ObjectPointer pObject, PlayerPointer Plr) { GossipScript::GossipEnd(pObject, Plr); }
+	void GossipEnd(Object * pObject, Player * Plr) { GossipScript::GossipEnd(pObject, Plr); }
 	void Destroy() { delete this; }
 };
 
@@ -178,7 +178,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    RageWinterchillAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    RageWinterchillAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -222,7 +222,7 @@
 		spells[3].cooldown = 10;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "The Legion's final conquest has begun! Once again the subjugation of this world is within our grasp. Let none survive!");
 		_unit->PlaySoundToSet(11022);
@@ -233,7 +233,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	
 		{
@@ -266,7 +266,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -274,7 +274,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "You have won this battle, but not... the...war");
 		_unit->PlaySoundToSet(11026);
@@ -293,7 +293,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -338,13 +338,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -362,7 +362,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -407,7 +407,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 
-    AnetheronAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AnetheronAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -458,7 +458,7 @@
 		spells[4].cooldown = 600;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "You are defenders of a doomed world. Flee here and perhaps you will prolong your pathetic lives!");
 		_unit->PlaySoundToSet(10977);
@@ -472,7 +472,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	
 		{
@@ -494,7 +494,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -502,7 +502,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "The clock... is still...ticking.");
 		_unit->PlaySoundToSet(10982);
@@ -530,7 +530,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -539,7 +539,7 @@
 				{
 					if (i == 1)
 					{
-						AuraPointer aura = AuraPointer(new Aura(spells[1].info, (uint32)5000, _unit, _unit));
+						Aura * aura = new Aura(spells[1].info, (uint32)5000, _unit, _unit);
 						if (aura != NULL)
 						{
 							_unit->AddAura(aura);
@@ -588,13 +588,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -612,7 +612,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -656,7 +656,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    KazrogalAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    KazrogalAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -693,7 +693,7 @@
 		MarkDeto = 0;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Cry for mercy! Your meaningless lives will soon be forfeit.");
 		_unit->PlaySoundToSet(11015);
@@ -704,7 +704,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	
 		{
@@ -731,7 +731,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -739,7 +739,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "hahahahaa aahaah");
 		_unit->PlaySoundToSet(11018);
@@ -761,7 +761,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -805,11 +805,11 @@
 
 	void MarkCast()
 	{
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{ 
 			if (isHostile(_unit, (*itr)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 			{
-				UnitPointer Target = NULLUNIT;
+				Unit * Target = NULLUNIT;
 				Target = TO_UNIT(*itr);
 
 				if (Target->isAlive() && Target->FindAura(MARK_OF_KAZROGAL) && (Target->GetPowerType() != POWER_TYPE_MANA || !Target->GetUInt32Value(UNIT_FIELD_BASE_MANA)))
@@ -831,13 +831,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -855,7 +855,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -900,7 +900,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    AzgalorAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AzgalorAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -940,7 +940,7 @@
 		spells[3].maxdist2cast = 50.0f;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Abandon all hope! The legion has returned to finish what was begun so many years ago. This time there will be no escape!");
 		_unit->PlaySoundToSet(10999);
@@ -954,7 +954,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	
 		{
@@ -979,7 +979,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -987,7 +987,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Your time is almost... up!");
 		_unit->PlaySoundToSet(11002);
@@ -1015,7 +1015,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1060,13 +1060,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1084,14 +1084,14 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
 
 			if (i == 3)
 			{
-				AuraPointer aura = AuraPointer(new Aura(spells[3].info, (uint32)20000, _unit, RTarget));
+				Aura * aura = new Aura(spells[3].info, (uint32)20000, _unit, RTarget);
 				if (aura != NULL)
 				{
 					RTarget->AddAura(aura);
@@ -1137,13 +1137,13 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(ArchimondeTriggerAI);
 
-    ArchimondeTriggerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ArchimondeTriggerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
 		_unit->m_noRespawn = true;
 
-		UnitPointer Archimonde = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(5598.629883f, -3447.719971f, 1576.650024f, 17968);
+		Unit * Archimonde = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(5598.629883f, -3447.719971f, 1576.650024f, 17968);
 		if (Archimonde)
 		{
 			_unit->SetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT, Archimonde->GetGUID());
@@ -1161,7 +1161,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(DoomfireAI);
 
-    DoomfireAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DoomfireAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
@@ -1198,7 +1198,7 @@
 			{
 				if (RandomUInt(3) == 1)
 				{
-					UnitPointer NewTarget = NULLUNIT;
+					Unit * NewTarget = NULLUNIT;
 					NewTarget = FindTarget();
 					if (NewTarget)
 					{
@@ -1232,16 +1232,16 @@
 		}
 	}
 	// A bit rewritten FindTarget function
-	UnitPointer FindTarget()
+	Unit * FindTarget()
 	{
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		float distance = 15.0f;
 		float z_diff;
 
-		UnitPointer pUnit;
+		Unit * pUnit;
 		float dist;
 
-		for (unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
+		for (unordered_set<Object *>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
 		{
 			if((*itr)->GetTypeId() != TYPEID_UNIT && (*itr)->GetTypeId() != TYPEID_PLAYER)
 				continue;
@@ -1311,7 +1311,7 @@
 	SP_AI_Spell spells[7];
 	bool m_spellcheck[7];
 
-    ArchimondeAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ArchimondeAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -1382,7 +1382,7 @@
 		}
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Your resistance is insignificant.");
 		_unit->PlaySoundToSet(10987);
@@ -1407,7 +1407,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 		if (_unit->GetHealthPct() > 0)	// Hack to prevent double yelling (OnDied and OnTargetDied when creature is dying)
 		{
@@ -1446,7 +1446,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1463,7 +1463,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "No, it cannot be! Nooo!");
 		_unit->PlaySoundToSet(10992);
@@ -1514,7 +1514,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1560,13 +1560,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1584,7 +1584,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1604,9 +1604,9 @@
 
 	bool FingerOfDeath()
 	{
-		UnitPointer NextTarget = NULLUNIT;
+		Unit * NextTarget = NULLUNIT;
 
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{
 			if (isHostile(_unit, (*itr)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID() && _unit->GetDistance2dSq((*itr)) <= spells[4].mindist2cast*spells[4].mindist2cast)
 			{
@@ -1630,7 +1630,7 @@
 	};
 
 protected:
-	CreaturePointer Trigger;
+	Creature * Trigger;
 	int nrspells;
 };
 
Index: Trunk/src/InstanceScripts/Raid_GruulsLair.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_GruulsLair.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_GruulsLair.cpp	(working copy)
@@ -31,12 +31,12 @@
 #define LAIR_BRUTE_CLEAVE			39174
 #define LAIR_BRUTE_CHARGE			24193
 
-void SpellFunc_LairBrute_Charge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_LairBrute_Charge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class LairBruteAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(LairBruteAI, MoonScriptCreatureAI);
-	LairBruteAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	LairBruteAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(LAIR_BRUTE_CLEAVE, Target_Current, 20, 0, 15, 0, 7);
 		AddSpell(LAIR_BRUTE_MORTALSTRIKE, Target_Current, 8, 0, 20, 0, 7);
@@ -47,12 +47,12 @@
 	SpellDesc*	mCharge;
 };
 
-void SpellFunc_LairBrute_Charge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_LairBrute_Charge(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	LairBruteAI *pBruteAI = (pCreatureAI != NULL) ? (LairBruteAI*)pCreatureAI : NULL;
 	if (pBruteAI != NULL)
 	{
-		UnitPointer pCurrentTarget = pBruteAI->GetUnit()->GetAIInterface()->GetNextTarget();
+		Unit * pCurrentTarget = pBruteAI->GetUnit()->GetAIInterface()->GetNextTarget();
 		if (pCurrentTarget != NULL && pCurrentTarget != pTarget)
 		{
 			pBruteAI->GetUnit()->GetAIInterface()->AttackReaction(pTarget, 500);
@@ -72,7 +72,7 @@
 class GronnPriestAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(GronnPriestAI, MoonScriptCreatureAI);
-	GronnPriestAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	GronnPriestAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(GRONN_PRIEST_PSYCHICSCREAM, Target_Self, 8, 0, 20);
 		AddSpell(GRONN_PRIEST_RENEW, Target_WoundedFriendly, 6, 0, 25, 0, 100);
@@ -90,14 +90,14 @@
 #define HIGH_KING_MAULGAR_WHIRLWIND			33238
 #define HIGH_KING_MAULGAR_WHIRLWIND2		33239
 
-void SpellFunc_Maulgar_Enrage(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_Maulgar_Enrage(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 // 4th unit sometimes cannot be found - blame cell system
 uint32 Adds[4] = { 18832, 18834, 18836, 18835 };
 
 class HighKingMaulgarAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(HighKingMaulgarAI, MoonScriptBossAI);
-	HighKingMaulgarAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	HighKingMaulgarAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddPhaseSpell(2, AddSpell(HIGH_KING_MAULGAR_BERSERKER_CHARGE, Target_RandomPlayer, 10, 0, 25, 0, 40));
 		AddPhaseSpell(2, AddSpell(HIGH_KING_MAULGAR_INTIMIDATING_ROAR, Target_Current, 7, 0, 20, 0, 5));
@@ -116,7 +116,7 @@
 		mAliveAdds = 0;
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		SetDisplayWeapon(true, true);
 		ParentClass::OnCombatStart(pTarget);
@@ -125,10 +125,10 @@
 		mLastYell = -1;
 		for (int i = 0; i < 4; ++i)
 		{
-			UnitPointer pAdd = ForceCreatureFind(Adds[i]);
+			Unit * pAdd = ForceCreatureFind(Adds[i]);
 			if (pAdd != NULL && pAdd->isAlive())
 			{
-				UnitPointer pTarget = GetBestPlayerTarget();
+				Unit * pTarget = GetBestPlayerTarget();
 				if (pTarget != NULL)
 				{
 					pAdd->GetAIInterface()->AttackReaction(pTarget, 200);
@@ -145,17 +145,17 @@
 		}
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		ParentClass::OnCombatStop(pTarget);
 		SetCanEnterCombat(true);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
 
-		GameObjectPointer pDoor = mKiller->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(95.26f, 251.836f, 0.47f, 183817);
+		GameObject * pDoor = mKiller->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(95.26f, 251.836f, 0.47f, 183817);
 		if(pDoor != NULL)
 		{
 			pDoor->SetState(0);
@@ -215,7 +215,7 @@
 	SpellDesc*	mEnrage;
 };
 
-void SpellFunc_Maulgar_Enrage(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Maulgar_Enrage(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	HighKingMaulgarAI *pMaulgarAI = (pCreatureAI != NULL) ? (HighKingMaulgarAI*)pCreatureAI : NULL;
 	if (pMaulgarAI != NULL)
@@ -234,7 +234,7 @@
 class KigglerTheCrazedAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(KigglerTheCrazedAI, MoonScriptCreatureAI);
-	KigglerTheCrazedAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	KigglerTheCrazedAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(KIGGLER_THE_CRAZED_LIGHTNING_BOLT, Target_Current, 70, 2, 0, 0, 40);
 		AddSpell(KIGGLER_THE_CRAZED_GREATER_POLYMORPH, Target_RandomPlayer, 8, 0, 15, 0, 30);	// Additional SpellFunc for removing target from target list if there are different targets?
@@ -242,7 +242,7 @@
 		AddSpell(KIGGLER_THE_CRAZED_ARCANE_SHOCK, Target_RandomPlayer, 10, 0, 15, 0, 30);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 
@@ -253,10 +253,10 @@
 		}
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
-		CreaturePointer pMaulgar = TO_CREATURE(ForceCreatureFind(CN_HIGH_KING_MAULGAR, 143.048996f, 192.725998f, -11.114700f));
+		Creature * pMaulgar = TO_CREATURE(ForceCreatureFind(CN_HIGH_KING_MAULGAR, 143.048996f, 192.725998f, -11.114700f));
 		if (pMaulgar != NULL && pMaulgar->isAlive() && pMaulgar->GetScript())
 		{
 			HighKingMaulgarAI *pMaulgarAI = static_cast<HighKingMaulgarAI*>(pMaulgar->GetScript());
@@ -268,7 +268,7 @@
 	{
 		ParentClass::AIUpdate();
 
-		UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+		Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL)
 		{
 			if (GetRangeToUnit(pTarget) <= 40.0f)
@@ -288,17 +288,17 @@
 class BlindeyeTheSeerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(BlindeyeTheSeerAI, MoonScriptCreatureAI);
-	BlindeyeTheSeerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BlindeyeTheSeerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(BLINDEYE_THE_SEER_PRAYER_OF_HEALING, Target_Self, 5, 4, 30);				// Affects players? Core bugzor?
 		AddSpell(BLINDEYE_THE_SEER_GREAT_POWER_WORD_SHIELD, Target_Self, 8, 0, 30);			// Strategies don't say anything about buffing friends
 		AddSpell(BLINDEYE_THE_SEER_HEAL, Target_WoundedFriendly, 8, 1.5, 25);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
-		CreaturePointer pMaulgar = TO_CREATURE(ForceCreatureFind(CN_HIGH_KING_MAULGAR, 143.048996f, 192.725998f, -11.114700f));
+		Creature * pMaulgar = TO_CREATURE(ForceCreatureFind(CN_HIGH_KING_MAULGAR, 143.048996f, 192.725998f, -11.114700f));
 		if (pMaulgar != NULL && pMaulgar->isAlive() && pMaulgar->GetScript())
 		{
 			HighKingMaulgarAI *pMaulgarAI = static_cast<HighKingMaulgarAI*>(pMaulgar->GetScript());
@@ -315,17 +315,17 @@
 class OlmTheSummonerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(OlmTheSummonerAI, MoonScriptCreatureAI);
-	OlmTheSummonerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	OlmTheSummonerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(OLM_THE_SUMMONER_DEATH_COIL, Target_RandomPlayer, 7, 0, 10, 0, 30);
 		AddSpell(OLM_THE_SUMMONER_SUMMON_WILD_FELHUNTER, Target_Self, 7, 3, 15);
 		AddSpell(OLM_THE_SUMMONER_DARK_DECAY, Target_RandomPlayer, 10, 0, 6);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
-		CreaturePointer pMaulgar = TO_CREATURE(ForceCreatureFind(CN_HIGH_KING_MAULGAR, 143.048996f, 192.725998f, -11.114700f));
+		Creature * pMaulgar = TO_CREATURE(ForceCreatureFind(CN_HIGH_KING_MAULGAR, 143.048996f, 192.725998f, -11.114700f));
 		if (pMaulgar != NULL && pMaulgar->isAlive() && pMaulgar->GetScript())
 		{
 			HighKingMaulgarAI *pMaulgarAI = static_cast<HighKingMaulgarAI*>(pMaulgar->GetScript());
@@ -340,7 +340,7 @@
 class WildFelStalkerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(WildFelStalkerAI, MoonScriptCreatureAI);
-	WildFelStalkerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	WildFelStalkerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(WILD_FEL_STALKER_WILD_BITE, Target_Current, 10, 0, 10, 0, 5);
 		AggroRandomPlayer(200);
@@ -361,7 +361,7 @@
 class KroshFirehandAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(KroshFirehandAI, MoonScriptCreatureAI);
-	KroshFirehandAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	KroshFirehandAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		//spells
 		mBlastWave = AddSpell(BALST_WAVE, Target_Self, 0, 0, 0, 0, 15);
@@ -373,7 +373,7 @@
 		SetAIUpdateFreq(250);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		CastSpellNowNoScheduling(mSpellShield);
 
@@ -386,7 +386,7 @@
 		{
 			if (mBlastWaveTimer == -1 || IsTimerFinished(mBlastWaveTimer))
 			{
-				UnitPointer unit = GetBestUnitTarget(TargetFilter_Closest);
+				Unit * unit = GetBestUnitTarget(TargetFilter_Closest);
 				if (unit && GetRangeToUnit(unit) < 15.0f)
 				{
 					CastSpellNowNoScheduling(mBlastWave);
@@ -409,10 +409,10 @@
 		ParentClass::AIUpdate();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
-		CreaturePointer pMaulgar = TO_CREATURE(ForceCreatureFind(CN_HIGH_KING_MAULGAR, 143.048996f, 192.725998f, -11.114700f));
+		Creature * pMaulgar = TO_CREATURE(ForceCreatureFind(CN_HIGH_KING_MAULGAR, 143.048996f, 192.725998f, -11.114700f));
 		if (pMaulgar != NULL && pMaulgar->isAlive() && pMaulgar->GetScript())
 		{
 			HighKingMaulgarAI *pMaulgarAI = static_cast<HighKingMaulgarAI*>(pMaulgar->GetScript());
@@ -437,14 +437,14 @@
 #define GRUUL_THE_DRAGONKILLER_STONED				33652	// +
 #define GRUUL_THE_DRAGONKILLER_GRONN_LORDS_GRASP	33572	// Should be used only after Ground Slam
 
-void SpellFunc_Gruul_GroundSlam(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
-void SpellFunc_Gruul_Stoned(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
-void SpellFunc_Gruul_Shatter(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_Gruul_GroundSlam(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
+void SpellFunc_Gruul_Stoned(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
+void SpellFunc_Gruul_Shatter(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class GruulTheDragonkillerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(GruulTheDragonkillerAI, MoonScriptCreatureAI);
-	GruulTheDragonkillerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	GruulTheDragonkillerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		mHurtfulStrike = AddSpell(GRUUL_THE_DRAGONKILLER_HURTFUL_STRIKE, Target_Current, 0, 0, 0, 0, 8);
 		mGroundSlam = AddSpell(GRUUL_THE_DRAGONKILLER_GROUND_SLAM, Target_Self, 0, 1, 0);
@@ -469,7 +469,7 @@
 		mGrowthStacks = 0;
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ParentClass::OnCombatStart(pTarget);
 
@@ -477,25 +477,25 @@
 		mHurtfulTimer = AddTimer(8000);
 		mGrowthStacks = 0;
 
-		GameObjectPointer pGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(166.897f, 368.226f, 16.9209f, 184662);
+		GameObject * pGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(166.897f, 368.226f, 16.9209f, 184662);
 		if (pGate != NULL)
 			pGate->SetState(1);
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		ParentClass::OnCombatStop(pTarget);
 
-		GameObjectPointer pGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(166.897f, 368.226f, 16.9209f, 184662);
+		GameObject * pGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(166.897f, 368.226f, 16.9209f, 184662);
 		if (pGate != NULL)
 			pGate->SetState(0);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
 
-		GameObjectPointer pGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(166.897f, 368.226f, 16.9209f, 184662);
+		GameObject * pGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(166.897f, 368.226f, 16.9209f, 184662);
 		if (pGate != NULL)
 			pGate->SetState(0);
 	}
@@ -525,13 +525,13 @@
 			}
 			else if (IsTimerFinished(mHurtfulTimer))
 			{
-				UnitPointer pCurrentTarget = _unit->GetAIInterface()->GetNextTarget();
+				Unit * pCurrentTarget = _unit->GetAIInterface()->GetNextTarget();
 				if (pCurrentTarget != NULL)
 				{
-					UnitPointer pTarget = pCurrentTarget;
-					for (unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
+					Unit * pTarget = pCurrentTarget;
+					for (unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 					{
-						PlayerPointer pPlayer = TO_PLAYER(*itr);
+						Player * pPlayer = TO_PLAYER(*itr);
 						if (!pPlayer->isAlive())
 							continue;
 //						if (pPlayer->m_auracount[SPELL_AURA_MOD_INVISIBILITY])
@@ -562,7 +562,7 @@
 	UnitArray GetInRangePlayers()
 	{
 		UnitArray TargetArray;
-		for (unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
+		for (unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 		{ 
 			if (IsValidUnitTarget(*itr, TargetFilter_None))
 			{
@@ -585,7 +585,7 @@
 	SpellDesc*	mShatter2;
 };
 
-void SpellFunc_Gruul_GroundSlam(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Gruul_GroundSlam(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	GruulTheDragonkillerAI *pGruul = (pCreatureAI != NULL) ? (GruulTheDragonkillerAI*)pCreatureAI : NULL;
 	if (pGruul != NULL)
@@ -596,7 +596,7 @@
 	}
 }
 
-void SpellFunc_Gruul_Stoned(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Gruul_Stoned(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	GruulTheDragonkillerAI *pGruul = (pCreatureAI != NULL) ? (GruulTheDragonkillerAI*)pCreatureAI : NULL;
 	if (pGruul != NULL)
@@ -606,7 +606,7 @@
 		{
 			for (size_t i = 0; i < TargetArray.size(); ++i)
 			{
-				UnitPointer pTarget = TargetArray[i];
+				Unit * pTarget = TargetArray[i];
 				pTarget->CastSpell(pTarget, GRUUL_THE_DRAGONKILLER_STONED, true);
 			}
 		}
@@ -615,7 +615,7 @@
 	}
 }
 
-void SpellFunc_Gruul_Shatter(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Gruul_Shatter(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	GruulTheDragonkillerAI *pGruul = (pCreatureAI != NULL) ? (GruulTheDragonkillerAI*)pCreatureAI : NULL;
 	if (pGruul != NULL)
@@ -626,7 +626,7 @@
 		{
 			for (size_t i = 0; i < TargetArray.size(); ++i)
 			{
-				UnitPointer pTarget = TargetArray[i];
+				Unit * pTarget = TargetArray[i];
 				pTarget->RemoveAura(GRUUL_THE_DRAGONKILLER_STONED);
 			}
 		}
Index: Trunk/src/InstanceScripts/Raid_Karazhan.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_Karazhan.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_Karazhan.cpp	(working copy)
@@ -30,7 +30,7 @@
 class Berthold : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer  Plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player *  Plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 4037, Plr);
@@ -40,7 +40,7 @@
 		Menu->AddItem( 0, "How do you navigate the tower?", 3 );
 
 		//Killing the Shade of Aran makes a teleport to medivh's available from Berthold the Doorman.
-		UnitPointer soa = pObject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-11165.2f, -1912.13f, 232.009f, 16524);
+		Unit * soa = pObject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-11165.2f, -1912.13f, 232.009f, 16524);
 		if(!soa || !soa->isAlive())
 			Menu->AddItem( 0, "Please teleport me to the Guardian's Library.", 4);
 
@@ -48,7 +48,7 @@
 			Menu->SendTo(Plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer  Plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player *  Plr, uint32 Id, uint32 IntId, const char * Code)
 	{
 		switch (IntId)
 		{
@@ -79,7 +79,7 @@
 class AttumenTheHuntsmanAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AttumenTheHuntsmanAI, MoonScriptBossAI);
-	AttumenTheHuntsmanAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	AttumenTheHuntsmanAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		mMidnight = NULL;
 
@@ -103,13 +103,13 @@
 		AggroNearestUnit(); //Aggro on spawn
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mMidnight = (MoonScriptBossAI*)GetNearestCreature(CN_MIDNIGHT);
 		ParentClass::OnCombatStart(pTarget);
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		Despawn(10000);
 		ParentClass::OnCombatStop(pTarget);
@@ -139,18 +139,18 @@
 class MidnightAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(MidnightAI, MoonScriptBossAI);
-	MidnightAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	MidnightAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		mAttumen = NULL;
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mAttumen = NULL;
 		ParentClass::OnCombatStart(pTarget);
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		mAttumen = NULL;
 		SetAllowMelee(true);
@@ -158,7 +158,7 @@
 		ParentClass::OnCombatStop(pTarget);
 	}
 
-	void OnTargetDied(UnitPointer pTarget)
+	void OnTargetDied(Unit * pTarget)
 	{
 		if( mAttumen && mAttumen->IsAlive() )
 		{
@@ -222,7 +222,7 @@
 class MoroesAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(MoroesAI, MoonScriptBossAI);
-	MoroesAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	MoroesAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		//Initialize timers
 		mVanishTimer = mGarroteTimer = INVALIDATE_TIMER;
@@ -246,14 +246,14 @@
 		AddEmote(Event_OnTargetDied, "I've gone and made a mess.", Text_Yell, 9315);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mEnrage->mEnabled = true;
 		mVanishTimer = AddTimer(35000);	//First vanish after 35sec
 		ParentClass::OnCombatStart(pTarget);
 	}
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		RemoveAuraOnPlayers(MOROES_GARROTE);
 		ParentClass::OnDied(pKiller);
@@ -304,7 +304,7 @@
 class MaidenOfVirtueAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(MaidenOfVirtueAI, MoonScriptBossAI);
-	MaidenOfVirtueAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	MaidenOfVirtueAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		//Spells
 		AddSpell(MAIDENOFVIRTUE_HOLY_GROUND, Target_Self, 100, 0, 3);
@@ -322,7 +322,7 @@
 		AddEmote(Event_OnDied, "Death comes. Will your conscience be clear?", Text_Yell, 9206);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mRepentance->TriggerCooldown();	//No repentance at the beginning of the fight
 		ParentClass::OnCombatStart(pTarget);
@@ -348,7 +348,7 @@
 	bool m_spellcheck[4];
 	SP_AI_Spell spells[4];
 
-	BigBadWolfAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	BigBadWolfAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 3;
 		for(int i = 0; i < nrspells; i++)
@@ -387,7 +387,7 @@
 		spells[3].attackstoptimer = 1000;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		for(int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -401,21 +401,21 @@
 		
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		_unit->PlaySoundToSet(9275);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Aarrhhh.");
 		RemoveAIUpdateEvent();
 
-		GameObjectPointer  DoorLeftO = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-		GameObjectPointer  DoorRightO = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+		GameObject *  DoorLeftO = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+		GameObject *  DoorRightO = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
 
 		if(DoorLeftO)
 			DoorLeftO->SetState(0);
@@ -424,7 +424,7 @@
 			DoorRightO->SetState(0);
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		_unit->PlaySoundToSet(9277);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Mmmm... delicious.");
@@ -452,7 +452,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -472,11 +472,11 @@
 					case TARGET_RANDOM_SINGLE:
 						{
 							_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Red Riding Hood cast");
-							std::vector<PlayerPointer > TargetTable;
-							for(unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); 
+							std::vector<Player * > TargetTable;
+							for(unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); 
 								itr != _unit->GetInRangePlayerSetEnd(); ++itr)
 							{
-								PlayerPointer RandomTarget = NULLPLR;
+								Player * RandomTarget = NULLPLR;
 								RandomTarget = TO_PLAYER(*itr);
 								if(RandomTarget && RandomTarget->isAlive())
 									TargetTable.push_back(RandomTarget);
@@ -532,7 +532,7 @@
 	int nrspells;
 	int m_threattimer;
 	bool ThreatAdd;
-	UnitPointer RTarget;
+	Unit * RTarget;
 };
 
 
@@ -547,7 +547,7 @@
 		bool m_spellcheck[3];
 		SP_AI_Spell spells[3];
 
-	THEBIGBADWOLFAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	THEBIGBADWOLFAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		//SpellEntry *infoImmunity;
 		nrspells = 3;
@@ -580,7 +580,7 @@
 	spells[2].speech = "Run away little girl, run away!";
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		CastTime();
 		_unit->PlaySoundToSet(9276);
@@ -588,11 +588,11 @@
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
-		GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-		GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-		GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+		GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+		GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+		GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
 
 		if(DoorLeft)
 			DoorLeft->SetState(1);
@@ -609,11 +609,11 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
-		GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-		GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-		GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+		GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+		GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+		GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
 
 		if(DoorLeft)
 			DoorLeft->SetState(0);
@@ -631,7 +631,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		_unit->PlaySoundToSet(9277);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Mmmm... delicious.");
@@ -654,7 +654,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 		float comulativeperc = 0;
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		for(int i=0;i<nrspells;i++)
 		{
 			spells[i].casttime--;
@@ -712,7 +712,7 @@
 class BarnesGS : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer  Plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player *  Plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		if(WayStartBBW[pObject->GetInstanceID()] == 5)
@@ -731,7 +731,7 @@
 		}
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer  Plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player *  Plr, uint32 Id, uint32 IntId, const char * Code)
 	{
 		switch (IntId)
 		{
@@ -749,7 +749,7 @@
 				}break;
 			case 2:
 				{
-					CreaturePointer pCreature = TO_CREATURE(pObject);
+					Creature * pCreature = TO_CREATURE(pObject);
 					pCreature->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Splendid. I'm going to get the audience ready. Break a leg!");
 					pCreature->CastSpell(pCreature, 32616, false);
 					pCreature->GetAIInterface()->StopMovement(0);
@@ -772,7 +772,7 @@
 class GrandMother : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer  Plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player *  Plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 7245, Plr);
@@ -783,7 +783,7 @@
 			Menu->SendTo(Plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer  Plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player *  Plr, uint32 Id, uint32 IntId, const char * Code)
 	{
 		switch (IntId)
 		{
@@ -794,7 +794,7 @@
 			case 1:
 			{
 				TO_CREATURE(pObject)->Despawn(100, 0);
-				CreaturePointer pop = pObject->GetMapMgr()->GetInterface()->SpawnCreature(17521, pObject->GetPositionX(), pObject->GetPositionY(), 
+				Creature * pop = pObject->GetMapMgr()->GetInterface()->SpawnCreature(17521, pObject->GetPositionX(), pObject->GetPositionY(), 
 					pObject->GetPositionZ(), 0, true, true, 0, 0);
 				pop->GetAIInterface()->AttackReaction(Plr, 1, 0);
 				break;
@@ -824,7 +824,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(BarnesAI);
 
-	BarnesAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	BarnesAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		_unit->GetAIInterface()->addWayPoint(CreateWaypoint(1, 0, 0));
 		_unit->GetAIInterface()->addWayPoint(CreateWaypoint(2, 43000, 0));
@@ -902,9 +902,9 @@
 
 	void cleanStage()
 	{
-		GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-		GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-		GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+		GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+		GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+		GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
 
 		if(DoorLeft)
 			DoorLeft->SetState(1);
@@ -915,21 +915,21 @@
 		if(Curtain)
 			Curtain->SetState(1);
 				
-		CreaturePointer Julianne	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10883.0f, -1751.81f, 90.4765f, 17534);
-		CreaturePointer Romulo	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10883.0f, -1751.81f, 90.4765f, 17533);
-		CreaturePointer BigBadWolf= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10883.0f, -1751.81f, 90.4765f, 17521);
-		CreaturePointer Grandma	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10883.0f, -1751.81f, 90.4765f, 17603);
+		Creature * Julianne	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10883.0f, -1751.81f, 90.4765f, 17534);
+		Creature * Romulo	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10883.0f, -1751.81f, 90.4765f, 17533);
+		Creature * BigBadWolf= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10883.0f, -1751.81f, 90.4765f, 17521);
+		Creature * Grandma	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10883.0f, -1751.81f, 90.4765f, 17603);
 
-		CreaturePointer Dorothee	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10897.650f, -1755.8311f, 90.476f, 17535); //Dorothee
-		CreaturePointer Strawman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10904.088f, -1754.8988f, 90.476f, 17543); //Strawman
-		CreaturePointer Roar		= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10891.115f, -1756.4898f, 90.476f, 17546);//Roar
-		CreaturePointer Tinman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10884.501f, -1757.3249f, 90.476f, 17547); //Tinman
+		Creature * Dorothee	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10897.650f, -1755.8311f, 90.476f, 17535); //Dorothee
+		Creature * Strawman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10904.088f, -1754.8988f, 90.476f, 17543); //Strawman
+		Creature * Roar		= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10891.115f, -1756.4898f, 90.476f, 17546);//Roar
+		Creature * Tinman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10884.501f, -1757.3249f, 90.476f, 17547); //Tinman
 
-		GameObjectPointer  House = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10883.0f, -1751.81f, 90.4765f, 183493);
-		GameObjectPointer  Tree  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10877.7f, -1763.18f, 90.4771f, 183492);
-		GameObjectPointer  Tree2 = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10906.7f, -1750.01f, 90.4765f, 183492);
-		GameObjectPointer  Tree3 = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10909.5f, -1761.79f, 90.4773f, 183492);
-		//GameObjectPointer  BackDrop = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10890.9f, -1744.06f, 90.4765f, 183491);
+		GameObject *  House = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10883.0f, -1751.81f, 90.4765f, 183493);
+		GameObject *  Tree  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10877.7f, -1763.18f, 90.4771f, 183492);
+		GameObject *  Tree2 = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10906.7f, -1750.01f, 90.4765f, 183492);
+		GameObject *  Tree3 = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10909.5f, -1761.79f, 90.4773f, 183492);
+		//GameObject *  BackDrop = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10890.9f, -1744.06f, 90.4765f, 183491);
 
 		if(Julianne)
 			Julianne->SafeDelete();
@@ -988,9 +988,9 @@
 
 	void EventWOZ()
 	{
-		GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-		GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-		GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+		GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+		GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+		GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
 
 		if(DoorLeft)
 			DoorLeft->SetState(1);
@@ -1041,9 +1041,9 @@
 
 	void EventRJ()
 	{
-		GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-		GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-		GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+		GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+		GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+		GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
 
 		if(DoorLeft)
 			DoorLeft->SetState(1);
@@ -1084,14 +1084,14 @@
 
 	void EventRed()
 	{
-		GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-		GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-		GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
-		/*GameObjectPointer  House = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(183493, -10883.0f, -1751.81f, 90.4765f, -1.72788f, false, 0, 0);
-		GameObjectPointer  Tree = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(183492, -10877.7f, -1763.18f, 90.4771f, -1.6297f, false, 0, 0);
-		GameObjectPointer  Tree2 = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(183492, -10906.7f, -1750.01f, 90.4765f, -1.69297f, false, 0, 0);
-		GameObjectPointer  Tree3 = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(183492, -10909.5f, -1761.79f, 90.4773f, -1.65806f, false, 0, 0);
-		GameObjectPointer  BackDrop = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(183491, -10890.9f, -1744.06f, 90.4765f, -1.67552f, false, 0, 0);*/
+		GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+		GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+		GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+		/*GameObject *  House = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(183493, -10883.0f, -1751.81f, 90.4765f, -1.72788f, false, 0, 0);
+		GameObject *  Tree = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(183492, -10877.7f, -1763.18f, 90.4771f, -1.6297f, false, 0, 0);
+		GameObject *  Tree2 = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(183492, -10906.7f, -1750.01f, 90.4765f, -1.69297f, false, 0, 0);
+		GameObject *  Tree3 = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(183492, -10909.5f, -1761.79f, 90.4773f, -1.65806f, false, 0, 0);
+		GameObject *  BackDrop = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(183491, -10890.9f, -1744.06f, 90.4765f, -1.67552f, false, 0, 0);*/
 		
 		if(DoorLeft)
 			DoorLeft->SetState(1);
@@ -1177,7 +1177,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(StageLight);
-	StageLight(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	StageLight(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		_unit->SetUInt32Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
 		_unit->GetAIInterface()->disable_melee = true;
@@ -1208,7 +1208,7 @@
 	bool m_spellcheck[4];
 	SP_AI_Spell spells[4];
 
-	CuratorAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	CuratorAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 2;
 		for(int i = 0; i < nrspells; i++)
@@ -1236,7 +1236,7 @@
 		spells[3].attackstoptimer = 1000;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		for(int i = 0; i < nrspells; i++)
 			spells[i].casttime = spells[i].cooldown;
@@ -1250,21 +1250,21 @@
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		_unit->PlaySoundToSet(9184);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "This Curator is no longer op... er... ation... al.");
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer  mTarget)
+	void OnTargetDied(Unit *  mTarget)
 	{
 		if(_unit->GetHealthPct() > 0)
 		{
@@ -1321,7 +1321,7 @@
 		uint32 t = (uint32)time(NULL);
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget() && t > spells[0].casttime)
 		{
-			UnitPointer target = _unit->GetAIInterface()->GetSecondHated();
+			Unit * target = _unit->GetAIInterface()->GetSecondHated();
 			_unit->CastSpell(target, spells[0].info, spells[0].instant);
 			target = NULLUNIT;
 			spells[0].casttime = t + spells[0].cooldown;
@@ -1336,11 +1336,11 @@
 
 	void AstralSpawn()
 	{
-		std::vector<PlayerPointer> Target_List;
-		for(unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); 
+		std::vector<Player *> Target_List;
+		for(unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); 
 			itr != _unit->GetInRangePlayerSetEnd(); ++itr)
 		{
-			PlayerPointer RandomTarget = NULLPLR;
+			Player * RandomTarget = NULLPLR;
 			RandomTarget = TO_PLAYER(*itr);
 			if(RandomTarget && RandomTarget->isAlive() && isHostile(_unit, (*itr)))
 				Target_List.push_back(RandomTarget);
@@ -1350,7 +1350,7 @@
 			return;
 
 		size_t Target = rand()%Target_List.size();
-		UnitPointer RTarget = Target_List[Target];
+		Unit * RTarget = Target_List[Target];
 		if(!RTarget)
 			return;
 
@@ -1373,7 +1373,7 @@
 		_unit->SetUInt32Value(UNIT_FIELD_POWER1, _unit->GetUInt32Value(UNIT_FIELD_POWER1) - (_unit->GetUInt32Value(UNIT_FIELD_MAXPOWER1) / 10));
 		float dX = _unit->GetPositionX();
 		float dY = _unit->GetPositionY();
-		CreaturePointer AstralFlare = NULLCREATURE;
+		Creature * AstralFlare = NULLCREATURE;
 		switch(RandomUInt(3))
 		{
 		case 0:
@@ -1429,7 +1429,7 @@
 class AstralFlareAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AstralFlareAI, MoonScriptCreatureAI);
-	AstralFlareAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AstralFlareAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(ASTRAL_FLARE_PASSIVE, Target_Self, 100, 0, 3);
 		AddSpell(ASTRAL_FLARE_VISUAL, Target_Self, 100, 0, 6);
@@ -1485,7 +1485,7 @@
 	bool m_spellcheck[6];
 	SP_AI_Spell spells[6];
 
-	ShadeofAranAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	ShadeofAranAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 6;
 		for(int i=0;i<nrspells;i++)
@@ -1551,13 +1551,13 @@
 		info_pyroblast = dbcSpell.LookupEntry(AOE_PYROBLAST);
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		//Atiesh check
 		bool HasAtiesh = false;
 		if(mTarget->GetTypeId() == TYPEID_PLAYER)
 		{
-			for(unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr)
+			for(unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr)
 			{
 				if(*itr)
 				{
@@ -1612,7 +1612,7 @@
 		slow = false;
 		LastSuperSpell = RandomUInt(100)%3;
 		// Door closing
-		GameObjectPointer SDoor = NULLGOB;
+		GameObject * SDoor = NULLGOB;
 		SDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-11190.012f, -1881.016f, 231.95f, 184517);
 		if(SDoor)
 		{
@@ -1621,7 +1621,7 @@
 		}
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		CastTime();
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1629,26 +1629,26 @@
 		RemoveAIUpdateEvent();
 		_unit->SetUInt32Value(UNIT_FIELD_POWER1, _unit->GetUInt32Value(UNIT_FIELD_MAXPOWER1));
 		// Door opening
-		GameObjectPointer SDoor = NULLGOB;
+		GameObject * SDoor = NULLGOB;
 		SDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-11190.012f, -1881.016f, 231.95f, 184517);
 		if(SDoor)
 			SDoor->SetUInt32Value(GAMEOBJECT_FLAGS, 34);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		CastTime();
 		_unit->PlaySoundToSet(9244);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "At last... The nightmare is.. over...");
 		RemoveAIUpdateEvent();
 		// Door opening
-		GameObjectPointer SDoor = NULLGOB;
+		GameObject * SDoor = NULLGOB;
 		SDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-11190.012f, -1881.016f, 231.95f, 184517);
 		if(SDoor)
 			SDoor->SetUInt32Value(GAMEOBJECT_FLAGS, 34);
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		switch(rand()%2)
 		{
@@ -1675,7 +1675,7 @@
 				if(!FlameWreathTarget[i])
 					continue;
 
-				UnitPointer pTarget = _unit->GetMapMgr()->GetUnit(FlameWreathTarget[i]);
+				Unit * pTarget = _unit->GetMapMgr()->GetUnit(FlameWreathTarget[i]);
 				if (pTarget && pTarget->GetDistanceSq(FWTargPosX[i], FWTargPosY[i], _unit->GetPositionZ()) > 3)
 				{
 					pTarget->CastSpell(pTarget, 20476, true);
@@ -1801,11 +1801,11 @@
 		FlameWreathTarget[1] = 0;
 		FlameWreathTarget[2] = 0;
 		
-		std::vector<PlayerPointer> Targets;
-		unordered_set<PlayerPointer>::iterator hostileItr = _unit->GetInRangePlayerSetBegin();
+		std::vector<Player *> Targets;
+		unordered_set<Player *>::iterator hostileItr = _unit->GetInRangePlayerSetBegin();
 		for(; hostileItr != _unit->GetInRangePlayerSetEnd(); ++hostileItr) 
 		{ 
-			PlayerPointer RandomTarget = NULLPLR;
+			Player * RandomTarget = NULLPLR;
 			RandomTarget = TO_PLAYER(*hostileItr);
 
 			if (RandomTarget && RandomTarget->isAlive() && _unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0)
@@ -1816,7 +1816,7 @@
 			Targets.erase(Targets.begin()+rand()%Targets.size());
 
 		uint32 i = 0;
-		for (std::vector<PlayerPointer>::iterator itr = Targets.begin(); itr != Targets.end(); ++itr)
+		for (std::vector<Player *>::iterator itr = Targets.begin(); itr != Targets.end(); ++itr)
 		{
 			if(*itr)
 			{
@@ -1919,7 +1919,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -1969,10 +1969,10 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
-			std::vector<PlayerPointer > TargetTable;
-			for(unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
+			std::vector<Player * > TargetTable;
+			for(unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 			{ 
-				PlayerPointer RandomTarget = NULLPLR;
+				Player * RandomTarget = NULLPLR;
 				RandomTarget = TO_PLAYER(*itr);
 
 				if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget)))
@@ -1984,7 +1984,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2042,24 +2042,24 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(WaterEleAI);
 
-	WaterEleAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	WaterEleAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		WaterBolt = (RandomUInt(3)+5);
 		RegisterAIUpdateEvent(1250);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		RemoveAIUpdateEvent();
 		_unit->Despawn(20000, 0);
@@ -2071,7 +2071,7 @@
 		if(!WaterBolt)
 		{
 			_unit->setAttackTimer(2000, false);
-			UnitPointer target = _unit->GetAIInterface()->GetNextTarget();
+			Unit * target = _unit->GetAIInterface()->GetNextTarget();
 			if(target)
 				_unit->CastSpell(target, WATERBOLT, true);
 		}
@@ -2091,17 +2091,17 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ShadowofAranAI);
 
-	ShadowofAranAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	ShadowofAranAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		ShadowPyro = (RandomUInt(2)+4);
 		RegisterAIUpdateEvent(1250);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2109,7 +2109,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		RemoveAIUpdateEvent();
 		_unit->Despawn(5000, 0);
@@ -2120,7 +2120,7 @@
 		ShadowPyro--;
 		if(!ShadowPyro)
 		{
-			UnitPointer target = _unit->GetAIInterface()->GetNextTarget();
+			Unit * target = _unit->GetAIInterface()->GetNextTarget();
 			if(target != NULL)
 				_unit->CastSpell(target, SHADOWPYRO, true);
 		}
@@ -2168,7 +2168,7 @@
 	bool m_spellcheck[2];
 	SP_AI_Spell spells[2];
 
-	IllhoofAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	IllhoofAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 2;
 		for(int i = 0; i < nrspells; i++)
@@ -2197,7 +2197,7 @@
 */
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		uint32 t = (uint32)time(NULL);
 		for(int i = 0; i < nrspells; i++)
@@ -2212,7 +2212,7 @@
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		clean();
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2220,7 +2220,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		clean();
 		_unit->PlaySoundToSet(9262);
@@ -2230,8 +2230,8 @@
 
 	void clean()
 	{
-		CreaturePointer portal = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-11249.51f, -1702.182f, 179.237f, CN_FPORTAL);
-		CreaturePointer portal2 = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-11239.534f, -1715.338f, 179.237f, CN_FPORTAL);
+		Creature * portal = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-11249.51f, -1702.182f, 179.237f, CN_FPORTAL);
+		Creature * portal2 = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-11239.534f, -1715.338f, 179.237f, CN_FPORTAL);
 
 		if(portal != NULL && portal2 != NULL)
 		{
@@ -2240,7 +2240,7 @@
 		}
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		uint32 sound = 0;
 		const char* text = 0;
@@ -2325,14 +2325,14 @@
 				break;
 		}
 
-		std::vector<PlayerPointer > TargetTable;
-		unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin();
+		std::vector<Player * > TargetTable;
+		unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin();
 		std::advance(itr, 1);
 		for(; itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 		{
 			if(isHostile(_unit, (*itr)) && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 			{
-				PlayerPointer RandomTarget = NULLPLR;
+				Player * RandomTarget = NULLPLR;
 				RandomTarget = TO_PLAYER(*itr);
 				if (RandomTarget && RandomTarget->isAlive() && isHostile(_unit, RandomTarget))
 					TargetTable.push_back(RandomTarget);
@@ -2343,7 +2343,7 @@
 			return;
 
 		size_t RandTarget = rand()%TargetTable.size();
-		UnitPointer  RTarget = TargetTable[RandTarget];
+		Unit *  RTarget = TargetTable[RandTarget];
 
 		if (!RTarget) return;
 
@@ -2362,7 +2362,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i = 0; i < nrspells; i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2419,7 +2419,7 @@
 	bool m_spellcheck[2];
 	SP_AI_Spell spells[2];
 
-	KilrekAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	KilrekAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -2439,25 +2439,25 @@
 		spells[1].instant = true;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		spells[0].casttime = (uint32)time(NULL) + spells[0].cooldown;
 
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		RemoveAIUpdateEvent();
 
-		UnitPointer Illhoof = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 15688);
+		Unit * Illhoof = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 15688);
 		if(Illhoof != NULL && Illhoof->isAlive())
 			Illhoof->CastSpell(Illhoof, spells[1].info, spells[1].instant);
 	}
@@ -2473,7 +2473,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2519,12 +2519,12 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
-			std::vector<UnitPointer > TargetTable;
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			std::vector<Unit * > TargetTable;
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if((*itr) != _unit && isHostile(_unit, (*itr)) && (*itr)->GetInstanceID() == _unit->GetInstanceID() && ((*itr)->GetTypeId() == TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER))
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 					
 					if (RandomTarget && RandomTarget->isAlive() && _unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0)
@@ -2537,7 +2537,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -2571,7 +2571,7 @@
 	SP_AI_Spell spells[1]; 
 	bool m_spellcheck[1]; 
 
-	FiendishImpAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	FiendishImpAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 1; 
 		for(int i=0;i<nrspells;i++)
@@ -2587,7 +2587,7 @@
 		spells[0].attackstoptimer = 1000;
 		spells[0].casttime = 0;
 
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		target = FindTargetForSpell();
 		if (target != NULL)
 		{
@@ -2595,7 +2595,7 @@
 		}
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, 0);
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(true);
@@ -2608,7 +2608,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2617,7 +2617,7 @@
 		_unit->SafeDelete();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		RemoveAIUpdateEvent();
 		_unit->SafeDelete();
@@ -2633,7 +2633,7 @@
 			{
 				_unit->setAttackTimer(spells[2].attackstoptimer, false);
 
-				UnitPointer target = NULLUNIT;
+				Unit * target = NULLUNIT;
 				target = _unit->GetAIInterface()->GetNextTarget();
 				
 				_unit->CastSpell(target, spells[0].info, spells[0].instant);
@@ -2650,7 +2650,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2687,15 +2687,15 @@
 		}
 	}
 
-	UnitPointer FindTargetForSpell()
+	Unit * FindTargetForSpell()
 	{
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		float distance = 90.0f;
 
-		UnitPointer pUnit;
+		Unit * pUnit;
 		float dist;
 
-		for (unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
+		for (unordered_set<Object *>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
 		{
 			if((*itr)->GetTypeId() != TYPEID_UNIT && (*itr)->GetTypeId() != TYPEID_PLAYER)
 				continue;
@@ -2737,14 +2737,14 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(DemonChains);
-	DemonChains(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	DemonChains(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		_unit->CastSpell(_unit, dbcSpell.LookupEntry(CHAINS_VISUAL), true);
 		_unit->Root();
 		_unit->DisableAI();
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2752,9 +2752,9 @@
 			_unit->Despawn(10000, 0);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
-		UnitPointer uIllhoof = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), 
+		Unit * uIllhoof = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), 
 			_unit->GetPositionZ(), CN_ILLHOOF);
 		if(uIllhoof != NULL && uIllhoof->isAlive())
 			uIllhoof->RemoveAura(SACRIFICE);
@@ -2767,7 +2767,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(FiendPortal);
-	FiendPortal(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	FiendPortal(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		_unit->Root();
 
@@ -2828,7 +2828,7 @@
 	bool m_spellcheck[9];
 	SP_AI_Spell spells[9];
 
-	MalchezaarAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	MalchezaarAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		m_phase = 1;
 		nrspells = 5;
@@ -2908,7 +2908,7 @@
 		MDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-11018.5f, -1967.92f, 276.652f, 185134);
 	}
 
-	void OnCombatStart(UnitPointer  mTarget)
+	void OnCombatStart(Unit *  mTarget)
 	{
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -2932,7 +2932,7 @@
 		}
 	}
 
-	void OnCombatStop(UnitPointer  mTarget)
+	void OnCombatStop(Unit *  mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2960,13 +2960,13 @@
 		if(MDoor != NULL)
 			MDoor->SetState(0);
 		
-		CreaturePointer MAxes = NULLCREATURE;
+		Creature * MAxes = NULLCREATURE;
 		MAxes = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), CN_AXES);
 		if(MAxes != NULL)
 			MAxes->Despawn(1000, 0);		
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		_unit->PlaySoundToSet(9221);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I refuse to concede defeat. I am a prince of the Eredar! I am...");
@@ -2975,7 +2975,7 @@
 		if(InfernalDummy)
 			InfernalDummy->Despawn(10000, 0);
 
-		CreaturePointer MAxes = NULLCREATURE;
+		Creature * MAxes = NULLCREATURE;
 		MAxes = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), 
 			_unit->GetPositionZ(), CN_AXES);
 		if(MAxes)
@@ -2986,7 +2986,7 @@
 			MDoor->SetState(0);
 	}
 
-	void OnTargetDied(UnitPointer  mTarget)
+	void OnTargetDied(Unit *  mTarget)
 	{
 		switch(rand()%3)
 		{
@@ -3173,14 +3173,14 @@
 
 	void Enfeebler()
 	{
-		std::vector<PlayerPointer> Targets;
-		unordered_set<PlayerPointer>::iterator Itr = _unit->GetInRangePlayerSetBegin();
+		std::vector<Player *> Targets;
+		unordered_set<Player *>::iterator Itr = _unit->GetInRangePlayerSetBegin();
 		std::advance(Itr, 1);
 		for( ; Itr != _unit->GetInRangePlayerSetEnd(); ++Itr)
 		{
 			if(isHostile(_unit, (*Itr)) && (*Itr)->GetInstanceID() == _unit->GetInstanceID())
 			{
-				PlayerPointer RandomTarget = NULLPLR;
+				Player * RandomTarget = NULLPLR;
 				RandomTarget = TO_PLAYER(*Itr);
 
 				if(RandomTarget->isAlive() && isHostile(_unit, RandomTarget))
@@ -3192,7 +3192,7 @@
 			Targets.erase(Targets.begin()+rand()%Targets.size());
 
 		int i = 0;
-		for(std::vector<PlayerPointer>::iterator E_Itr = Targets.begin(); E_Itr != Targets.end(); ++E_Itr)
+		for(std::vector<Player *>::iterator E_Itr = Targets.begin(); E_Itr != Targets.end(); ++E_Itr)
 		{
 			if(*E_Itr && (*E_Itr)->GetGUID() != _unit->GetAIInterface()->GetMostHated()->GetGUID())
 			{
@@ -3209,7 +3209,7 @@
 	{
 		for(int i = 0; i < 5; ++i)
 		{
-			UnitPointer ETarget = _unit->GetMapMgr()->GetUnit(Enfeeble_Targets[i]);
+			Unit * ETarget = _unit->GetMapMgr()->GetUnit(Enfeeble_Targets[i]);
 			if(ETarget && ETarget->isAlive())
 				ETarget->SetUInt64Value(UNIT_FIELD_HEALTH, Enfeeble_Health[i]);
 			Enfeeble_Targets[i] = 0;
@@ -3222,7 +3222,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -3267,10 +3267,10 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
-			std::vector<PlayerPointer > TargetTable;
-			for(unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
+			std::vector<Player * > TargetTable;
+			for(unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 			{ 
-				PlayerPointer RandomTarget = NULLPLR;
+				Player * RandomTarget = NULLPLR;
 				RandomTarget = TO_PLAYER(*itr);
 
 				if (RandomTarget && RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast)
@@ -3282,7 +3282,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -3314,15 +3314,15 @@
 	uint32 m_spawn_infernal;
 	uint64 Enfeeble_Targets[5];
 	uint64 Enfeeble_Health[5];
-	CreaturePointer InfernalDummy;
-	GameObjectPointer MDoor;
+	Creature * InfernalDummy;
+	GameObject * MDoor;
 };
 
 class NetherInfernalAI : public MoonScriptBossAI
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(NetherInfernalAI, MoonScriptBossAI);
-	NetherInfernalAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature){};
+	NetherInfernalAI(Creature * pCreature) : MoonScriptBossAI(pCreature){};
 
 	void OnLoad()
 	{
@@ -3352,7 +3352,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(InfernalDummyAI);
-	InfernalDummyAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	InfernalDummyAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		_unit->GetAIInterface()->addWayPoint(CreateWaypoint(1, 0, 768));
 	}
@@ -3388,7 +3388,7 @@
 	ADD_CREATURE_FACTORY_FUNCTION(MAxesAI);
 	SP_AI_Spell spells[1];
 
-	MAxesAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	MAxesAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		_unit->SetUInt32Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_2);
 		
@@ -3398,18 +3398,18 @@
 		spells[0].cooldown = 1;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		RegisterAIUpdateEvent(6000);
 
 		spells[0].casttime = (uint32)time(NULL) + spells[0].cooldown;
 
-		std::vector<UnitPointer > TargetTable;
-		for(unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
+		std::vector<Unit * > TargetTable;
+		for(unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 		{
 			if(isHostile(_unit, (*itr)) && (*itr)->isAlive())
 			{
-				PlayerPointer RandomTarget = NULLPLR;
+				Player * RandomTarget = NULLPLR;
 				RandomTarget = TO_PLAYER(*itr);
 
 				if (RandomTarget && RandomTarget->isAlive() && isHostile(_unit, RandomTarget))
@@ -3422,7 +3422,7 @@
 
 		size_t RandTarget = rand()%TargetTable.size();
 
-		UnitPointer  RTarget = TargetTable[RandTarget];
+		Unit *  RTarget = TargetTable[RandTarget];
 
 		if (!RTarget)
 			return;
@@ -3430,14 +3430,14 @@
 		_unit->GetAIInterface()->taunt(RTarget, true);
 	}
 	
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		RemoveAIUpdateEvent();
 	}
@@ -3476,7 +3476,7 @@
 	bool m_spellcheck[3];
 	SP_AI_Spell spells[3];
 
-	NetherspiteAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	NetherspiteAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -3505,7 +3505,7 @@
 		NDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-11186.2f, -1665.14f, 281.398f, 185521);
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		for(int i=0;i<nrspells;i++)
 			spells[i].casttime = spells[i].cooldown;
@@ -3523,7 +3523,7 @@
 		}
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->RemoveAura(NETHERBURN);
 
@@ -3535,7 +3535,7 @@
 			NDoor->SetState(0);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		RemoveAIUpdateEvent();
 
@@ -3549,10 +3549,10 @@
 		if(t > VoidTimer && _unit->GetAIInterface()->GetNextTarget())
 		{
 			VoidTimer = t + 20;
-			std::vector<UnitPointer > TargetTable;
-			for(unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
+			std::vector<Unit * > TargetTable;
+			for(unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 			{ 
-				UnitPointer RandomTarget = NULLUNIT;
+				Unit * RandomTarget = NULLUNIT;
 				RandomTarget = TO_UNIT(*itr);
 
 				if (RandomTarget && RandomTarget->isAlive() && isHostile(_unit, (*itr)))
@@ -3564,7 +3564,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -3584,7 +3584,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -3626,7 +3626,7 @@
 protected:
 	int nrspells;
 	uint32 VoidTimer;
-	GameObjectPointer NDoor;
+	GameObject * NDoor;
 };
 
 class VoidZoneAI : public CreatureAIScript
@@ -3635,7 +3635,7 @@
 	ADD_CREATURE_FACTORY_FUNCTION(VoidZoneAI);
 	SP_AI_Spell spells[1];
 
-	VoidZoneAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	VoidZoneAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		_unit->Root();
 		_unit->DisableAI();
@@ -3719,7 +3719,7 @@
 	bool m_spellcheck[5];
 	SP_AI_Spell spells[5];
 
-	NightbaneAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	NightbaneAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 5;
 		for(int i=0;i<nrspells;i++)
@@ -3771,7 +3771,7 @@
 		}
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		ResetCastTime();
 		m_phase = 0;
@@ -3782,7 +3782,7 @@
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setMoveType(MOVEMENTTYPE_DONTMOVEWP);
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -3793,7 +3793,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		RemoveAIUpdateEvent();
 	}
@@ -3867,7 +3867,7 @@
 		if(m_FlyPhaseTimer > 15)
 			return;
 
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 
 		//first cast
 		if(m_FlyPhaseTimer == 15)
@@ -3888,7 +3888,7 @@
 
 		target = NULLUNIT;
 		//fireball barrage check
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{
 			if ((*itr)->GetTypeId() == TYPEID_PLAYER && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 			{
@@ -3931,8 +3931,8 @@
 		mTailSweepTimer--;
 		if(!mTailSweepTimer)
 		{
-			UnitPointer target = NULLUNIT;
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			Unit * target = NULLUNIT;
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{
 				if ((*itr)->GetTypeId() == TYPEID_PLAYER && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 				{
@@ -4004,7 +4004,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -4046,13 +4046,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{
 				if (((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && _unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))
@@ -4065,7 +4065,7 @@
 			if (!TargetTable.size())
 				return;
 
-			UnitPointer  RTarget = *(TargetTable.begin()+rand()%TargetTable.size());
+			Unit *  RTarget = *(TargetTable.begin()+rand()%TargetTable.size());
 
 			if (!RTarget)
 				return;
@@ -4124,7 +4124,7 @@
 	uint32 summontito;
 	
 
-	DorotheeAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	DorotheeAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -4146,7 +4146,7 @@
 		spells[1].attackstoptimer = 1000;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		CastTime();
 		RegisterAIUpdateEvent(1000);
@@ -4155,7 +4155,7 @@
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_AGGRO_DOROTHEE);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		CastTime();
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -4165,13 +4165,13 @@
 		_unit->SafeDelete();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		//Check to see if we can spawn The Crone now
-		CreaturePointer Dorothee	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10897.650f, -1755.8311f, 90.476f, 17535); //Dorothee
-		CreaturePointer Strawman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10904.088f, -1754.8988f, 90.476f, 17543); //Strawman
-		CreaturePointer Roar		= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10891.115f, -1756.4898f, 90.476f, 17546);//Roar
-		CreaturePointer Tinman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10884.501f, -1757.3249f, 90.476f, 17547); //Tinman
+		Creature * Dorothee	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10897.650f, -1755.8311f, 90.476f, 17535); //Dorothee
+		Creature * Strawman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10904.088f, -1754.8988f, 90.476f, 17543); //Strawman
+		Creature * Roar		= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10891.115f, -1756.4898f, 90.476f, 17546);//Roar
+		Creature * Tinman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10884.501f, -1757.3249f, 90.476f, 17547); //Tinman
 
 		if ((Dorothee == NULL || Dorothee->isDead()) && (Strawman == NULL || Strawman->isDead()) && (Roar == NULL || Roar->isDead()) && (Tinman == NULL || Tinman->isDead()))
 		{
@@ -4185,7 +4185,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer  mTarget)
+	void OnTargetDied(Unit *  mTarget)
 	{
 	}
     void SpawnTito()	// Lacking in collision checks!
@@ -4242,12 +4242,12 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			std::vector<Unit *> TargetTable;		
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget && RandomTarget == _unit->GetAIInterface()->GetMostHated() && i == 3)
@@ -4268,7 +4268,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -4282,7 +4282,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -4333,7 +4333,7 @@
 
 protected:
 	int nrspells;
-	UnitPointer tito;
+	Unit * tito;
 	bool titoSpawned;
 	bool titoDeadSpeech;
 };	
@@ -4352,7 +4352,7 @@
 	SP_AI_Spell spells[1];
 	
 
-	TitoAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	TitoAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -4369,13 +4369,13 @@
 		_unit->m_noRespawn = true;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		CastTime();
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		CastTime();
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -4385,7 +4385,7 @@
 		_unit->SafeDelete();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -4408,7 +4408,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -4479,7 +4479,7 @@
 	bool m_spellcheck[2];
 	SP_AI_Spell spells[2];
 
-	StrawmanAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	StrawmanAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -4502,7 +4502,7 @@
  
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		CastTime();
 		RegisterAIUpdateEvent(1000);
@@ -4511,7 +4511,7 @@
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_AGGRO_STRAWMAN);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		CastTime();
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -4521,13 +4521,13 @@
 		_unit->SafeDelete();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		//Check to see if we can spawn The Crone now
-		CreaturePointer Dorothee	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10897.650f, -1755.8311f, 90.476f, 17535);	//Dorothee
-		CreaturePointer Strawman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10904.088f, -1754.8988f, 90.476f, 17543);	//Strawman
-		CreaturePointer Roar		= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10891.115f, -1756.4898f, 90.476f, 17546);	//Roar
-		CreaturePointer Tinman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10884.501f, -1757.3249f, 90.476f, 17547);	//Tinman
+		Creature * Dorothee	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10897.650f, -1755.8311f, 90.476f, 17535);	//Dorothee
+		Creature * Strawman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10904.088f, -1754.8988f, 90.476f, 17543);	//Strawman
+		Creature * Roar		= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10891.115f, -1756.4898f, 90.476f, 17546);	//Roar
+		Creature * Tinman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10884.501f, -1757.3249f, 90.476f, 17547);	//Tinman
 		
 		if ((Dorothee == NULL || Dorothee->isDead()) && (Strawman == NULL || Strawman->isDead()) && (Roar == NULL || Roar->isDead()) && (Tinman == NULL || Tinman->isDead()))
 		{
@@ -4541,7 +4541,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer  mTarget)
+	void OnTargetDied(Unit *  mTarget)
 	{
 		_unit->PlaySoundToSet(SOUND_KILL_STRAWMAN);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_KILL_STRAWMAN);
@@ -4564,7 +4564,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -4635,7 +4635,7 @@
 	bool m_spellcheck[1];
 	SP_AI_Spell spells[1];
 
-	TinheadAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	TinheadAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -4657,7 +4657,7 @@
 		spells[1].attackstoptimer = 1000;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		CastTime();
 		RegisterAIUpdateEvent(1000);
@@ -4666,7 +4666,7 @@
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_AGGRO_TINHEAD);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		CastTime();
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -4676,13 +4676,13 @@
 		_unit->SafeDelete();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		//Check to see if we can spawn The Crone now
-		CreaturePointer Dorothee	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10897.650f, -1755.8311f, 90.476f, 17535);	//Dorothee
-		CreaturePointer Strawman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10904.088f, -1754.8988f, 90.476f, 17543);	//Strawman
-		CreaturePointer Roar		= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10891.115f, -1756.4898f, 90.476f, 17546);	//Roar
-		CreaturePointer Tinman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10884.501f, -1757.3249f, 90.476f, 17547);	//Tinman
+		Creature * Dorothee	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10897.650f, -1755.8311f, 90.476f, 17535);	//Dorothee
+		Creature * Strawman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10904.088f, -1754.8988f, 90.476f, 17543);	//Strawman
+		Creature * Roar		= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10891.115f, -1756.4898f, 90.476f, 17546);	//Roar
+		Creature * Tinman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10884.501f, -1757.3249f, 90.476f, 17547);	//Tinman
 		
 		if ((Dorothee == NULL || Dorothee->isDead()) && (Strawman == NULL || Strawman->isDead()) && (Roar == NULL || Roar->isDead()) && (Tinman == NULL || Tinman->isDead()))
 		{
@@ -4696,7 +4696,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer  mTarget)
+	void OnTargetDied(Unit *  mTarget)
 	{
 		_unit->PlaySoundToSet(SOUND_KILL_TINHEAD);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_KILL_TINHEAD);
@@ -4719,7 +4719,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -4781,28 +4781,28 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(RoarAI);
 
-	RoarAI(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	RoarAI(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		_unit->PlaySoundToSet(SOUND_AGGRO_ROAR);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_AGGRO_ROAR);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
 		_unit->SafeDelete();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		//Check to see if we can spawn The Crone now
-		CreaturePointer Dorothee	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10897.650f, -1755.8311f, 90.476f, 17535); //Dorothee
-		CreaturePointer Strawman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10904.088f, -1754.8988f, 90.476f, 17543); //Strawman
-		CreaturePointer Roar		= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10891.115f, -1756.4898f, 90.476f, 17546);//Roar
-		CreaturePointer Tinman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10884.501f, -1757.3249f, 90.476f, 17547); //Tinman
+		Creature * Dorothee	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10897.650f, -1755.8311f, 90.476f, 17535); //Dorothee
+		Creature * Strawman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10904.088f, -1754.8988f, 90.476f, 17543); //Strawman
+		Creature * Roar		= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10891.115f, -1756.4898f, 90.476f, 17546);//Roar
+		Creature * Tinman	= _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-10884.501f, -1757.3249f, 90.476f, 17547); //Tinman
 		
 		if((Dorothee == NULL || Dorothee->isDead()) && (Strawman == NULL || Strawman->isDead()) && (Roar == NULL || Roar->isDead()) && (Tinman == NULL || Tinman->isDead()))
 		{
@@ -4842,7 +4842,7 @@
 	bool m_spellcheck[2];
 	SP_AI_Spell spells[2];
 
-	CroneAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	CroneAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -4863,7 +4863,7 @@
 		spells[1].attackstoptimer = 1000;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		CastTime();
 		RegisterAIUpdateEvent(1000);
@@ -4872,13 +4872,13 @@
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_AGGRO_CRONE);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		if(_unit->GetHealthPct() > 0)
 		{
-			GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-			GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-			GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+			GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+			GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+			GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
 
 			if(DoorLeft)
 				DoorLeft->SetState(1);
@@ -4898,11 +4898,11 @@
 		_unit->SafeDelete();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
-		GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-		GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-		GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+		GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+		GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+		GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
 
 		if(DoorLeft)
 			DoorLeft->SetState(0);
@@ -4920,7 +4920,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer  mTarget)
+	void OnTargetDied(Unit *  mTarget)
 	{
 	}
 
@@ -4941,7 +4941,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -4998,7 +4998,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(CycloneOZ);
-	CycloneOZ(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	CycloneOZ(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		_unit->CastSpell(_unit, dbcSpell.LookupEntry(CYCLONE_VISUAL), true);
 		_unit->SetUInt32Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_2);
@@ -5007,17 +5007,17 @@
 		_unit->m_noRespawn = true;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		RemoveAIUpdateEvent();
 	}
@@ -5075,7 +5075,7 @@
 	bool m_spellcheck[4];
 	SP_AI_Spell spells[4];
 
-	RomuloAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	RomuloAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -5112,7 +5112,7 @@
 		spells[3].attackstoptimer = 1000;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		CastTime();
 		RegisterAIUpdateEvent(1000);
@@ -5121,13 +5121,13 @@
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_AGGRO_ROMULO);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		if(_unit->GetHealthPct() > 0)
 		{
-			GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-			GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-			GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+			GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+			GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+			GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
 
 			if(DoorLeft)
 				DoorLeft->SetState(1);
@@ -5147,11 +5147,11 @@
 			_unit->SafeDelete();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
-		GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-		GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-		GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+		GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+		GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+		GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
 
 		if(DoorLeft)
 			DoorLeft->SetState(0);
@@ -5169,7 +5169,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer  mTarget)
+	void OnTargetDied(Unit *  mTarget)
 	{
 		_unit->PlaySoundToSet(SOUND_KILL_ROMULO);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_KILL_ROMULO);
@@ -5192,7 +5192,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -5270,7 +5270,7 @@
 	bool m_spellcheck[4];
 	SP_AI_Spell spells[4];
 
-	JulianneAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	JulianneAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -5307,7 +5307,7 @@
 		spells[3].attackstoptimer = 1000;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		CastTime();
 		RegisterAIUpdateEvent(1000);
@@ -5316,13 +5316,13 @@
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_AGGRO_JULIANNE);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		if(_unit->GetHealthPct() > 0)
 		{
-			GameObjectPointer  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
-			GameObjectPointer  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
-			GameObjectPointer  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
+			GameObject *  DoorLeft = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10917.1445f, -1774.05f, 90.478f, 184279);
+			GameObject *  DoorRight = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10872.195f, -1779.42f, 90.45f, 184278);
+			GameObject *  Curtain = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-10894.17f, -1774.218f, 90.477f, 183932);
 
 			if(DoorLeft)
 				DoorLeft->SetState(1);
@@ -5342,7 +5342,7 @@
 			_unit->SafeDelete();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		//_unit->RemoveAllAuras();
 		//_unit->setEmoteState(EMOTE_ONESHOT_EAT);
@@ -5358,7 +5358,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer  mTarget)
+	void OnTargetDied(Unit *  mTarget)
 	{
 		_unit->PlaySoundToSet(SOUND_KILL_JULIANNE);
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, TEXT_KILL_JULIANNE);
@@ -5381,7 +5381,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
Index: Trunk/src/InstanceScripts/Raid_Magtheridons_Lair.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_Magtheridons_Lair.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_Magtheridons_Lair.cpp	(working copy)
@@ -102,10 +102,10 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(MagtheridonTriggerAI);
-	std::vector<UnitPointer> ChannelersTable;	// Vector "list" of Channelers
+	std::vector<Unit *> ChannelersTable;	// Vector "list" of Channelers
 	bool KilledChanneler[5];			// Bool that says if channeler died or not
 
-    MagtheridonTriggerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MagtheridonTriggerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// We set default value for KillerdChanneler array to avoid any unexpected situations
 		for (int i = 0; i < 5; i++)
@@ -122,7 +122,7 @@
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
 		RegisterAIUpdateEvent(1000);
 		// We set Gate (if exists) as opened
-		GameObjectPointer  Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-72.5866f, 1.559f, 0.0f, 183847);
+		GameObject *  Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-72.5866f, 1.559f, 0.0f, 183847);
 		if (Gate)
 			Gate->SetState(0);
 	}
@@ -134,7 +134,7 @@
 		if (Phase <= 1 && !YellTimer)
 		{
 			// If Magtheridon can be found we let him yell one of six different texts
-			UnitPointer Magtheridon = NULLUNIT;
+			Unit * Magtheridon = NULLUNIT;
 			Magtheridon = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-22.657900f, 2.159050f, -0.345542f, 17257);
 			if (Magtheridon)
 			{
@@ -187,7 +187,7 @@
 			// We clear old "list"
 			ChannelersTable.clear();
 			// In order to recreate channeler "list" we need ot look for them in hardcoded spawn positions
-			UnitPointer Channeler;
+			Unit * Channeler;
 			for (int i = 0; i < 5; i++)
 			{
 				Channeler = NULLUNIT;
@@ -197,7 +197,7 @@
 				// If Channeler was found we push him at the end of our "list"
 				ChannelersTable.push_back(Channeler);
 				// If Magtheridon is spawned we tell channeler to cast spell on Pit Lord
-				UnitPointer Magtheridon = NULLUNIT;
+				Unit * Magtheridon = NULLUNIT;
 				Magtheridon = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-22.657900f, 2.159050f, -0.345542f, 17257);
 				if (Magtheridon && Channeler->isAlive() && !Channeler->GetAIInterface()->GetNextTarget())
 				{
@@ -221,7 +221,7 @@
 				}
 
 				// Safe check to prevent memory corruptions
-				UnitPointer Channeler = ChannelersTable[i];
+				Unit * Channeler = ChannelersTable[i];
 				if ( Channeler && !Channeler->IsInWorld() )
 				{
 					ChannelersTable[i] = NULLUNIT;
@@ -233,7 +233,7 @@
 				if ( Channeler && !Channeler->isAlive() && Channeler->IsInWorld() )
 				{
 					// We look through list of channelers to find alive ones and buff them
-					UnitPointer BuffedChanneler;
+					Unit * BuffedChanneler;
 					for (size_t x = 0; x < ChannelersTable.size(); x++)
 					{
 						// Safe check to prevent memory corruption
@@ -249,7 +249,7 @@
 						if (BuffedChanneler && BuffedChanneler != Channeler && BuffedChanneler->isAlive())
 						{
 							// We apply Soul Transfer Aura to channeler who should be buffed
-							AuraPointer aura = AuraPointer(new Aura(dbcSpell.LookupEntry(SOUL_TRANSFER), (uint32)-1, BuffedChanneler, BuffedChanneler));
+							Aura * aura = new Aura(dbcSpell.LookupEntry(SOUL_TRANSFER), (uint32)-1, BuffedChanneler, BuffedChanneler);
 							if (aura != NULLAURA)
 							{
 								BuffedChanneler->AddAura(aura);
@@ -268,7 +268,7 @@
 		// If table is empty (0 channelers spawned) we remove banish and go to phase 2 at once
 		if (!ChannelersTable.size() && !Phase)
 		{
-			UnitPointer Magtheridon = NULLUNIT;
+			Unit * Magtheridon = NULLUNIT;
 			Magtheridon = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-22.657900f, 2.159050f, -0.345542f, 17257);
 			if (Magtheridon)
 			{
@@ -284,8 +284,8 @@
 		if (!EventStarted)
 		{
 			// We look for channeler that may be In Combat or was killed by that unit enemy
-			UnitPointer Channeler = NULLUNIT;
-			UnitPointer UnitTarget = NULLUNIT;
+			Unit * Channeler = NULLUNIT;
+			Unit * UnitTarget = NULLUNIT;
 			for (size_t i = 0; i < ChannelersTable.size(); i++)
 			{
 				// Safe check to prevent memory corruptions
@@ -333,13 +333,13 @@
 					}
 				}
 				// If Magtheridon is found we remove Banish aura from him
-				UnitPointer Magtheridon = NULLUNIT;
+				Unit * Magtheridon = NULLUNIT;
 				Magtheridon = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-22.657900f, 2.159050f, -0.345542f, 17257);
 				if (Magtheridon)
 					Magtheridon->RemoveAura(BANISH);
 
 				// If Gate is found we close it
-				GameObjectPointer  Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-72.5866f, 1.559f, 0.0f, 183847);
+				GameObject *  Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-72.5866f, 1.559f, 0.0f, 183847);
 				if (Gate)
 					Gate->SetState(1);
 			}
@@ -352,7 +352,7 @@
 			PhaseOneTimer++;
 			if (PhaseOneTimer == BANISH_TIMER-2)
 			{
-				UnitPointer Magtheridon = NULLUNIT;
+				Unit * Magtheridon = NULLUNIT;
 				Magtheridon = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-22.657900f, 2.159050f, -0.345542f, 17257);
 				if (Magtheridon)
 				{
@@ -375,7 +375,7 @@
 			// Time runs out, phase switches and Magtheridon can get In Combat
 			if (PhaseOneTimer == BANISH_TIMER)
 			{
-				UnitPointer Magtheridon = NULLUNIT;
+				Unit * Magtheridon = NULLUNIT;
 				Magtheridon = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-22.657900f, 2.159050f, -0.345542f, 17257);
 				if (Magtheridon)
 				{
@@ -390,11 +390,11 @@
 				PhaseOneTimer == 60 || PhaseOneTimer == 45 || PhaseOneTimer == 30 || PhaseOneTimer == 15)
 			{
 				// We check if any of channelers casts banish spell on Magtheridon and then we reset timer and setting
-				UnitPointer Magtheridon = NULLUNIT;
+				Unit * Magtheridon = NULLUNIT;
 				Magtheridon = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-22.657900f, 2.159050f, -0.345542f, 17257);
 				if (Magtheridon)
 				{
-					AuraPointer aura = Magtheridon->FindAura(BANISH);
+					Aura * aura = Magtheridon->FindAura(BANISH);
 					if (aura)
 					{
 						EventStarted = false;
@@ -403,9 +403,9 @@
 					}
 				}
 				// Script creates vector "list" of alive channelers and counts those In Combat
-				UnitPointer Channeler = NULLUNIT;
+				Unit * Channeler = NULLUNIT;
 				size_t AliveInCombat = 0;
-				std::vector <UnitPointer> AliveChannelers;
+				std::vector <Unit *> AliveChannelers;
 				for (size_t i = 0; i < ChannelersTable.size(); i++)
 				{
 					Channeler = ChannelersTable[i];
@@ -426,7 +426,7 @@
 				// If less than half of alive channelers is out of combat we open Magtheridon's gate
 				if (AliveInCombat < AliveChannelers.size()/2)
 				{
-					GameObjectPointer  Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-72.5866f, 1.559f, 0.0f, 183847);
+					GameObject *  Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-72.5866f, 1.559f, 0.0f, 183847);
 					if (Gate)
 						Gate->SetState(0);
 				}
@@ -463,15 +463,15 @@
 class ManticronCubeGO : public GameObjectAIScript
 {
 public:
-	ManticronCubeGO(GameObjectPointer  pGameObject) : GameObjectAIScript(pGameObject)
+	ManticronCubeGO(GameObject *  pGameObject) : GameObjectAIScript(pGameObject)
 	{
 		Magtheridon = CubeTrigger = NULLUNIT;
 	}
 
-	void OnActivate(PlayerPointer  pPlayer)
+	void OnActivate(Player *  pPlayer)
 	{
 		// We check if player has aura that prevents anyone from using this GO
-		AuraPointer aura = pPlayer->FindAura(MIND_EXHAUSTION);
+		Aura * aura = pPlayer->FindAura(MIND_EXHAUSTION);
 		if (aura)
 			return;
 
@@ -540,7 +540,7 @@
 		}
 		
 		// If player still exists (is in world, alive and so on) we check if he has "channeling aura"
-		AuraPointer aura = NULLAURA;
+		Aura * aura = NULLAURA;
 		if (Channeler)
 			aura = Channeler->FindAura(SHADOW_GRASP2);
 
@@ -562,7 +562,7 @@
 			uint32 Counter = 0;
 			for (int i = 0; i < 5; i++)
 			{
-				UnitPointer GlobalCubeTrigger = NULLUNIT;
+				Unit * GlobalCubeTrigger = NULLUNIT;
 				GlobalCubeTrigger = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(CubeTriggers[i].x, CubeTriggers[i].y, CubeTriggers[i].z, 17376);
 				if (GlobalCubeTrigger && GlobalCubeTrigger->GetUInt32Value(UNIT_CHANNEL_SPELL) == SHADOW_GRASP && CubeTrigger->GetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT) == Magtheridon->GetGUID())
 					Counter++;
@@ -590,7 +590,7 @@
 		uint32 Counter = 0;
 		for (int i = 0; i < 5; i++)
 		{
-			UnitPointer GlobalCubeTrigger = NULLUNIT;
+			Unit * GlobalCubeTrigger = NULLUNIT;
 			GlobalCubeTrigger = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(CubeTriggers[i].x, CubeTriggers[i].y, CubeTriggers[i].z, 17376);
 			if (GlobalCubeTrigger && GlobalCubeTrigger->GetUInt32Value(UNIT_CHANNEL_SPELL) == SHADOW_GRASP && CubeTrigger->GetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT) == Magtheridon->GetGUID())
 				Counter++;
@@ -616,7 +616,7 @@
 				Magtheridon->GetCurrentSpell()->cancel();
 
 			// We add channeling player aura that does not allow that go to be used again in 1.3 min
-			AuraPointer aura = AuraPointer(new Aura(dbcSpell.LookupEntry(MIND_EXHAUSTION),(uint32)78000, Magtheridon, Channeler));
+			Aura * aura = new Aura(dbcSpell.LookupEntry(MIND_EXHAUSTION),(uint32)78000, Magtheridon, Channeler);
 			if (aura != NULL)
 			{
 				Channeler->AddAura(aura);
@@ -637,15 +637,15 @@
 
 	}
 
-	static GameObjectAIScript *Create(GameObjectPointer  GO) { return new ManticronCubeGO(GO); }
+	static GameObjectAIScript *Create(GameObject *  GO) { return new ManticronCubeGO(GO); }
 
 protected:
 
 	bool MagYell;
 	float x, y, z;
-	UnitPointer Magtheridon;
-	PlayerPointer Channeler;
-	UnitPointer CubeTrigger;
+	Unit * Magtheridon;
+	Player * Channeler;
+	Unit * CubeTrigger;
 };
 
 #define CN_CUBE_TRIGGER 17376
@@ -655,7 +655,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CubeTriggerAI);
 
-    CubeTriggerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CubeTriggerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
@@ -680,7 +680,7 @@
 	SP_AI_Spell spells[7];
 	bool m_spellcheck[7];
 
-    HellfireWarderAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    HellfireWarderAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 7;
 		for(int i=0;i<nrspells;i++)
@@ -758,7 +758,7 @@
 		spells[6].attackstoptimer = 8;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 
@@ -766,14 +766,14 @@
 			spells[i].casttime = 0;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -789,7 +789,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -834,13 +834,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -858,7 +858,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -901,7 +901,7 @@
 	SP_AI_Spell spells[5];
 	bool m_spellcheck[5];
 	
-	HellfireChannelerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	HellfireChannelerAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 4;
 		for(int i=0;i<nrspells;i++)
@@ -957,7 +957,7 @@
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 
@@ -968,7 +968,7 @@
 			spells[i].casttime = 0;
 	}
 		
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -977,7 +977,7 @@
 		if (_unit->isAlive())
 		{
 
-			UnitPointer Magtheridon = NULLUNIT;
+			Unit * Magtheridon = NULLUNIT;
 			Magtheridon = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-22.657900f, 2.159050f, -0.345542f, 17257);
 			if (Magtheridon && Magtheridon->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_9))
 			{
@@ -989,13 +989,13 @@
 		}
 	}
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if (!_unit->GetAIInterface()->GetAllowedToEnterCombat())
 			_unit->GetAIInterface()->SetAllowedToEnterCombat(true);
 	}
 		
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		RemoveAIUpdateEvent();
 
@@ -1014,7 +1014,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1062,13 +1062,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1086,7 +1086,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1127,7 +1127,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    BurningAbyssalAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BurningAbyssalAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1150,7 +1150,7 @@
 		_unit->m_noRespawn = true;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 
@@ -1158,14 +1158,14 @@
 			spells[i].casttime = 0;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
 		RemoveAIUpdateEvent();
     }
@@ -1181,7 +1181,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1226,13 +1226,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1250,7 +1250,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1300,7 +1300,7 @@
 	SP_AI_Spell spells[7];
 	bool m_spellcheck[7];
 
-    MagtheridonAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    MagtheridonAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1347,7 +1347,7 @@
 		spells[6].instant = true;
 
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_9);
-		AuraPointer aura = AuraPointer(new Aura(dbcSpell.LookupEntry(BANISHMENT), (uint32)-1, _unit, _unit));
+		Aura * aura = new Aura(dbcSpell.LookupEntry(BANISHMENT), (uint32)-1, _unit, _unit);
 		if (aura != NULL)
 		{
 			_unit->AddAura(aura);
@@ -1360,7 +1360,7 @@
 		PhaseSwitch = false;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
     {		
 		timer_quake = timer_enrage = timer_blastNova = timer_caveIn = 0;
 		PhaseSwitch = false;
@@ -1370,12 +1370,12 @@
 		for (int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
 
-		GameObjectPointer Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-72.5866f, 1.559f, 0.0f, 183847);
+		GameObject * Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-72.5866f, 1.559f, 0.0f, 183847);
 		if (Gate)
 			Gate->SetState(1);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1384,7 +1384,7 @@
 		if (_unit->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_9) || _unit->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_2))
 			return;
 
-		GameObjectPointer  Gate = NULLGOB;
+		GameObject *  Gate = NULLGOB;
 		for (int i = 0; i < 6; i++)
 		{
 			Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Columns[i].x, Columns[i].y, Columns[i].z, 184634+i);
@@ -1401,7 +1401,7 @@
 			Gate->SetState(0);
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "The Legion... will consume you... all....");
 		_unit->PlaySoundToSet(10258);
@@ -1409,7 +1409,7 @@
        RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		if (_unit->GetHealthPct() > 0)
 		{
@@ -1427,7 +1427,7 @@
 
 	void PhaseTwo()
 	{
-		AuraPointer aura = _unit->FindAura(BANISH);
+		Aura * aura = _unit->FindAura(BANISH);
 
 		if (_unit->GetHealthPct() <= 30)
 		{
@@ -1447,7 +1447,7 @@
 
 				for (int i = 0; i < 6; i++)
 				{
-					UnitPointer Trigger = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(CaveInPos[i].x, CaveInPos[i].y, CaveInPos[i].z, 17474);
+					Unit * Trigger = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(CaveInPos[i].x, CaveInPos[i].y, CaveInPos[i].z, 17474);
 					if (Trigger)
 					{
 						Trigger->CastSpell(Trigger, spells[3].info, spells[3].instant);
@@ -1491,7 +1491,7 @@
 
 	void PhaseThree()
 	{
-		AuraPointer aura = _unit->FindAura(BANISH);
+		Aura * aura = _unit->FindAura(BANISH);
 
 		timer_quake++;
 		timer_enrage++;
@@ -1505,7 +1505,7 @@
 
 				for (int i = 0; i < 6; i++)
 				{
-					UnitPointer Trigger = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(CaveInPos[i].x, CaveInPos[i].y, CaveInPos[i].z, 17474);
+					Unit * Trigger = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(CaveInPos[i].x, CaveInPos[i].y, CaveInPos[i].z, 17474);
 					if (Trigger)
 					{
 						Trigger->CastSpell(Trigger, spells[3].info, spells[3].instant);
@@ -1550,7 +1550,7 @@
 
 			if (timer_caveIn == 3)
 			{
-				GameObjectPointer  Gate = NULLGOB;
+				GameObject *  Gate = NULLGOB;
 				for (int i = 0; i < 6; i++)
 				{
 					Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Columns[i].x, Columns[i].y, Columns[i].z, 184634+i);
@@ -1567,7 +1567,7 @@
 			{
 				for (int i = 0; i < 6; i++)
 				{
-					UnitPointer Trigger = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(CaveInPos[i].x, CaveInPos[i].y, CaveInPos[i].z, 17474);
+					Unit * Trigger = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(CaveInPos[i].x, CaveInPos[i].y, CaveInPos[i].z, 17474);
 					if (Trigger)
 					{
 						Trigger->CastSpellAoF(CaveInPos[i].x, CaveInPos[i].y, CaveInPos[i].z, spells[5].info, spells[5].instant);
@@ -1598,7 +1598,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1643,13 +1643,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1667,7 +1667,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
Index: Trunk/src/InstanceScripts/Raid_MoltenCore.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_MoltenCore.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_MoltenCore.cpp	(working copy)
@@ -35,26 +35,26 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CoreRagerAI);
-    CoreRagerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CoreRagerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		m_mangle = true;
 
         info_mangle = dbcSpell.LookupEntry(MANGLE);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
        RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -69,7 +69,7 @@
     {
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())//_unit->getAttackTarget())
         {
-			//UnitPointer target = _unit->GetAIInterface()->GetNextTarget();
+			//Unit * target = _unit->GetAIInterface()->GetNextTarget();
             if(m_mangle)
             {
                 _unit->CastSpell(_unit, info_mangle, false);
@@ -108,7 +108,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(SulfuronAI);
-    SulfuronAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SulfuronAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		m_demoralizingshout = m_inspire = m_flamespear = true;
 
@@ -117,19 +117,19 @@
 		info_flamespear = dbcSpell.LookupEntry(FLAME_SPEAR);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
        RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -144,7 +144,7 @@
     {
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())//_unit->getAttackTarget())
         {
-			//UnitPointer target = _unit->GetAIInterface()->GetNextTarget();
+			//Unit * target = _unit->GetAIInterface()->GetNextTarget();
                       
             if(m_demoralizingshout)
             {
@@ -231,7 +231,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(RagnarosAI);
-    RagnarosAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    RagnarosAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		m_elementalfire = m_wrath = m_hammer = m_meltweapon = m_summonsons = true;
 
@@ -243,26 +243,26 @@
 		_unit->Root();
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->GetAIInterface()->skip_reset_hp=true;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
        RemoveAIUpdateEvent();
     }
     
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "DIE, INSECT!");
         _unit->PlaySoundToSet(8051);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -277,7 +277,7 @@
     {
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())//_unit->getAttackTarget())
         {
-			UnitPointer target = _unit->GetAIInterface()->GetNextTarget();
+			Unit * target = _unit->GetAIInterface()->GetNextTarget();
 			                      
             if(m_elementalfire)
             {
@@ -366,7 +366,7 @@
 class MoltenGiantAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(MoltenGiantAI, MoonScriptCreatureAI);
-    MoltenGiantAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    MoltenGiantAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(MOLTENGIANT_STOMP, Target_Current, 10, 0, 5);
 		AddSpell(MOLTENGIANT_KNOCKBACK, Target_Self, 10, 0, 5);
@@ -383,7 +383,7 @@
 class MoltenDestroyerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(MoltenDestroyerAI, MoonScriptCreatureAI);
-    MoltenDestroyerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    MoltenDestroyerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(MOLTENDESTROYER_MASSIVE_TREMOR, Target_Self, 12.5f, 0, 0);
 //		AddSpell(MOLTENDESTROYER_SMASH_ATTACK, Target_Self, 10, 0, 0);
@@ -400,7 +400,7 @@
 class FirelordAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(FirelordAI, MoonScriptCreatureAI);
-    FirelordAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    FirelordAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(FIRELORD_SUMMON_LAVA_SPAWN, Target_Self, 20, 0, 10);
 		AddSpell(FIRELORD_SOUL_BURN, Target_RandomPlayer, 20, 0, 5);
@@ -414,7 +414,7 @@
 class LavaAnnihilatorAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(LavaAnnihilatorAI, MoonScriptCreatureAI);
-    LavaAnnihilatorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    LavaAnnihilatorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpellFunc(&SpellFunc_ClearHateList, Target_Self, 20, 0, 0);
     }
@@ -435,7 +435,7 @@
 class AncientCoreHoundAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(AncientCoreHoundAI, MoonScriptCreatureAI);
-    AncientCoreHoundAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    AncientCoreHoundAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(ANCIENTCOREHOUND_LAVA_BREATH, Target_Self, 20, 0, 3);
 		AddSpell(ANCIENTCOREHOUND_VICIOUS_BITE, Target_Self, 20, 0, 0);
@@ -461,7 +461,7 @@
 class LavaSurgerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(LavaSurgerAI, MoonScriptCreatureAI);
-    LavaSurgerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    LavaSurgerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(LAVASURGER_SURGE, Target_RandomUnit, 20, 0, 5, 0, 40);
     }
@@ -475,7 +475,7 @@
 class FlameImpAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(FlameImpAI, MoonScriptCreatureAI);
-    FlameImpAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    FlameImpAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(FLAMEIMP_FIRE_NOVA, Target_Current, 25, 0, 0);
     }
@@ -489,7 +489,7 @@
 class CoreHoundAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(CoreHoundAI, MoonScriptCreatureAI);
-    CoreHoundAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    CoreHoundAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(COREHOUND_SERRATED_BITE, Target_RandomPlayer, 10, 0, 0, 0, 10);
     }
@@ -503,7 +503,7 @@
 class LavaReaverAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(LavaReaverAI, MoonScriptCreatureAI);
-    LavaReaverAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    LavaReaverAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(LAVAREAVER_CLEAVE, Target_Current, 20, 0, 0, 0, 15);
     }
@@ -517,7 +517,7 @@
 class LavaElementalAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(LavaElementalAI, MoonScriptCreatureAI);
-    LavaElementalAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    LavaElementalAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(LAVAELEMENTAL_PYROCLAST_BARRAGE, Target_Self, 10, 0, 10);
     }
@@ -532,13 +532,13 @@
 class FlameguardAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(FlameguardAI, MoonScriptCreatureAI);
-    FlameguardAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    FlameguardAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(FLAMEGUARD_FIRE_SHIELD, Target_Self, 100, 0, 0);
 		mFlames = AddSpell(FLAMEGUARD_FLAMES, Target_Self, 0, 0, 0);
     }
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		CastSpellNowNoScheduling(mFlames);
 		ParentClass::OnDied(pKiller);
@@ -557,7 +557,7 @@
 class FirewalkerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(FirewalkerAI, MoonScriptCreatureAI);
-    FirewalkerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    FirewalkerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(FIREWALKER_MELT_ARMOR, Target_Self, 10, 0, 0);
 		AddSpell(FIREWALKER_INCITE_FLAMES, Target_Self, 10, 0, 0);
@@ -575,7 +575,7 @@
 class LucifronAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(LucifronAI, MoonScriptBossAI);
-	LucifronAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	LucifronAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(LUCIFRON_IMPEDING_DOOM, Target_Self, 8, 0, 0);
 		AddSpell(LUCIFRON_LUCIFRONS_CURSE, Target_Self, 8, 0, 0);
@@ -592,7 +592,7 @@
 class FlamewakerProtectorAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(FlamewakerProtectorAI, MoonScriptCreatureAI);
-	FlamewakerProtectorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	FlamewakerProtectorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(FLAMEWAKERPROTECTOR_CLEAVE, Target_Current, 8, 0, 0, 0, 15);
 		AddSpell(FLAMEWAKERPROTECTOR_DOMINATE_MIND, Target_RandomPlayer, 4, 0, 0, 0, 20);
@@ -610,7 +610,7 @@
 class MagmadarAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(MagmadarAI, MoonScriptBossAI);
-	MagmadarAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	MagmadarAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(MAGMADAR_MAGMA_SPIT, Target_Self, 8, 0, 0);
 		AddSpell(MAGMADAR_LAVA_BREATH, Target_Self, 8, 0, 0);
@@ -629,7 +629,7 @@
 class GehennasAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(GehennasAI, MoonScriptBossAI);
-	GehennasAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	GehennasAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(GEHENNAS_SHADOW_BOLT, Target_RandomPlayer, 8, 0, 0, 0, 45);
 		AddSpell(GEHENNAS_GEHENNAS_CURSE, Target_Self, 8, 0, 0);
@@ -647,7 +647,7 @@
 class FlamewakerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(FlamewakerAI, MoonScriptCreatureAI);
-	FlamewakerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	FlamewakerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(FLAMEWAKER_SUNDER_ARMOR, Target_Current, 8, 0, 0);
 		AddSpell(FLAMEWAKER_FIST_OF_RAGNAROS, Target_Self, 8, 0, 0);
@@ -664,7 +664,7 @@
 class GarrAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(GarrAI, MoonScriptBossAI);
-	GarrAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	GarrAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(GARR_ANTIMAGIC_PULSE, Target_Self, 10, 0, 0);
 		AddSpell(GARR_MAGMA_SHACKES, Target_Self, 10, 0, 0);
@@ -681,7 +681,7 @@
 class FireswornAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(FireswornAI, MoonScriptCreatureAI);
-	FireswornAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	FireswornAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		mGarr = NULL;
 
@@ -691,13 +691,13 @@
 		mSeparationAnxiety = AddSpell(FIRESWORN_SEPARATION_ANXIETY, Target_Self, 0, 5, 5);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mGarr = (MoonScriptBossAI*)GetNearestCreature(CN_GARR);
 		ParentClass::OnCombatStart(pTarget);
 	}
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		CastSpellNowNoScheduling(mEruption);
 		ParentClass::OnDied(pKiller);
@@ -727,7 +727,7 @@
 class BaronGeddonAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(BaronGeddonAI, MoonScriptBossAI);
-	BaronGeddonAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	BaronGeddonAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(BARONGEDDON_INFERNO, Target_Self, 8, 0, 0);
 		AddSpell(BARONGEDDON_IGNITE_MANA, Target_Self, 8, 0, 0);
@@ -744,12 +744,12 @@
 #define SHAZZRAH_COUNTERSPELL		19715
 #define SHAZZRAH_BLINK				29883	//dummy spell, need to be coded in core
 
-void SpellFunc_ShazzrahBlinkArcaneExplosions(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_ShazzrahBlinkArcaneExplosions(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class ShazzrahAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ShazzrahAI, MoonScriptBossAI);
-	ShazzrahAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	ShazzrahAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(SHAZZRAH_SHAZZRAHS_CURSE, Target_Self, 8, 0, 0);
 		AddSpell(SHAZZRAH_MAGIC_GROUNDING, Target_Self, 6, 0, 0);
@@ -764,7 +764,7 @@
 	SpellDesc* mArcaneExplosion;
 };
 
-void SpellFunc_ShazzrahBlinkArcaneExplosions(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_ShazzrahBlinkArcaneExplosions(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	ShazzrahAI* Shazzrah = ( pCreatureAI ) ? (ShazzrahAI*)pCreatureAI : NULL;
 	if( Shazzrah )
@@ -786,7 +786,7 @@
 class GolemaggAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(GolemaggAI, MoonScriptBossAI);
-	GolemaggAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	GolemaggAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(GOLEMAGG_GOLEMAGGS_TRUST, Target_Self, 8, 0, 0);
 		AddSpell(GOLEMAGG_MAGMA_SPLASH, Target_Self, 8, 0, 0);
Index: Trunk/src/InstanceScripts/Raid_Naxxramas.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_Naxxramas.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_Naxxramas.cpp	(working copy)
@@ -24,7 +24,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Carrion Spinner
-CarrionSpinnerAI::CarrionSpinnerAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+CarrionSpinnerAI::CarrionSpinnerAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( CARRION_SPINNER_POISON_BOLT_HEROIC, Target_Self, 15, 0, 15 );
@@ -42,7 +42,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Dread Creeper
-DreadCreeperAI::DreadCreeperAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+DreadCreeperAI::DreadCreeperAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( DREAD_CREEPER_VEIL_OF_SHADOW_HEROIC, Target_Self, 15, 0, 10 );
@@ -57,7 +57,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Naxxramas Cultist
-NaxxramasCultistAI::NaxxramasCultistAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+NaxxramasCultistAI::NaxxramasCultistAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( NAXXRAMAS_CULTIST_KNOCKBACK_HEROIC, Target_Destination, 10, 0, 10, 0, 8 );
@@ -72,7 +72,7 @@
 //Necro Stalker AI
 /////////////////////////////////////////////////////////////////////////////////
 ////// Venom Stalker
-VenomStalkerAI::VenomStalkerAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+VenomStalkerAI::VenomStalkerAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	// Do those really work ?
 	if ( IsHeroic() )
@@ -88,7 +88,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Tomb Horror
-TombHorrorAI::TombHorrorAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+TombHorrorAI::TombHorrorAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 	{
@@ -111,7 +111,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Naxxramas Acolyte
-NaxxramasAcolyteAI::NaxxramasAcolyteAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+NaxxramasAcolyteAI::NaxxramasAcolyteAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 	{
@@ -132,7 +132,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Vigilant Shade
-VigilantShadeAI::VigilantShadeAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+VigilantShadeAI::VigilantShadeAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	// Does it really work ?
 	if ( IsHeroic() )
@@ -143,13 +143,13 @@
 	ApplyAura( VIGILANT_SHADE_INVISIBILITY );
 };
 
-void VigilantShadeAI::OnCombatStart( UnitPointer pTarget )
+void VigilantShadeAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	RemoveAura( VIGILANT_SHADE_INVISIBILITY );
 };
 
-void VigilantShadeAI::OnCombatStop( UnitPointer pTarget )
+void VigilantShadeAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	ApplyAura( VIGILANT_SHADE_INVISIBILITY );
@@ -162,7 +162,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Crypt Reaver
-CryptReaverAI::CryptReaverAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+CryptReaverAI::CryptReaverAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( CRYPT_REAVER_CLEAVE, Target_Current, 10, 0, 5, 0, 8 );
 	AddSpell( CRYPT_REAVER_FRENZY, Target_Self, 7, 0, 40 );
@@ -175,30 +175,30 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Web Wrap
-WebWrapAI::WebWrapAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+WebWrapAI::WebWrapAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	mPlayerGuid = 0;
 };
 
-void WebWrapAI::OnCombatStart( UnitPointer pTarget )
+void WebWrapAI::OnCombatStart( Unit * pTarget )
 {
 	SetAllowMelee( false );
 	SetCanMove( false );
 	StopMovement();
 };
 
-void WebWrapAI::OnCombatStop( UnitPointer pTarget )
+void WebWrapAI::OnCombatStop( Unit * pTarget )
 {
 	SetAllowMelee( true );
 	SetCanMove( true );
 };
 
-void WebWrapAI::OnDied( UnitPointer pKiller )
+void WebWrapAI::OnDied( Unit * pKiller )
 {
 	// Slower, but safer
 	if ( mPlayerGuid != 0 )
 	{
-		PlayerPointer PlayerPtr = objmgr.GetPlayer( mPlayerGuid );
+		Player * PlayerPtr = objmgr.GetPlayer( mPlayerGuid );
 		if ( PlayerPtr != NULL && PlayerPtr->HasAura( MAEXXNA_WEB_WRAP ) )
 		{
 			PlayerPtr->RemoveAura( MAEXXNA_WEB_WRAP );
@@ -214,7 +214,7 @@
 {
 	if ( mPlayerGuid != 0 )
 	{
-		PlayerPointer PlayerPtr = objmgr.GetPlayer( mPlayerGuid );
+		Player * PlayerPtr = objmgr.GetPlayer( mPlayerGuid );
 		if ( PlayerPtr == NULLPLR || !PlayerPtr->isAlive() || !PlayerPtr->HasAura( MAEXXNA_WEB_WRAP ) )
 		{
 			mPlayerGuid = 0;
@@ -228,7 +228,7 @@
 {
 	if ( mPlayerGuid != 0 )
 	{
-		PlayerPointer PlayerPtr = objmgr.GetPlayer( mPlayerGuid );
+		Player * PlayerPtr = objmgr.GetPlayer( mPlayerGuid );
 		if ( PlayerPtr != NULL && PlayerPtr->HasAura( MAEXXNA_WEB_WRAP ) )
 		{
 			PlayerPtr->RemoveAura( MAEXXNA_WEB_WRAP );
@@ -243,7 +243,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Maexxna Spiderling
-MaexxnaSpiderlingAI::MaexxnaSpiderlingAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+MaexxnaSpiderlingAI::MaexxnaSpiderlingAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( MAEXXNA_SPIDERLING_NECROTIC_POISON_HEROIC, Target_Current, 10, 0, 20, 0, 8 );
@@ -258,7 +258,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Maexxna
-MaexxnaAI::MaexxnaAI( CreaturePointer pCreature ) : MoonScriptBossAI( pCreature )
+MaexxnaAI::MaexxnaAI( Creature * pCreature ) : MoonScriptBossAI( pCreature )
 {
 	if ( IsHeroic() )
 	{
@@ -277,7 +277,7 @@
 	mLeftWall = true;
 };
 
-void MaexxnaAI::OnCombatStart( UnitPointer pTarget )
+void MaexxnaAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	mAddsSummonTimer = AddTimer( 30000 );
@@ -288,7 +288,7 @@
 		mLeftWall = !mLeftWall;
 };
 
-void MaexxnaAI::OnCombatStop( UnitPointer pTarget )
+void MaexxnaAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	RemoveTimer( mWebWrapTimer );
@@ -351,7 +351,7 @@
 	delete this;
 };
 
-void SpellFunc_MaexxnaWebWrap( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_MaexxnaWebWrap( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	MaexxnaAI* Maexxna = ( pCreatureAI != NULL ) ? static_cast< MaexxnaAI* >( pCreatureAI ) : NULL;
 	if ( Maexxna != NULL )
@@ -383,7 +383,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Naxxramas Worshipper
-NaxxramasWorshipperAI::NaxxramasWorshipperAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+NaxxramasWorshipperAI::NaxxramasWorshipperAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( NAXXRAMAS_WORSHIPPER_FIREBALL_HEROIC, Target_Current, 10, 2.5, 0, 0, 45 );
@@ -406,7 +406,7 @@
 	};*/
 };
 
-void NaxxramasWorshipperAI::OnDied( UnitPointer pKiller )
+void NaxxramasWorshipperAI::OnDied( Unit * pKiller )
 {
 	ParentClass::OnDied( pKiller );
 	if ( mGrandWidow != NULL )//&& !IsHeroic() )
@@ -425,7 +425,7 @@
 			// Should be applied on Grand Widow, but is on the enemies - to script ?
 			//ApplyAura( NAXXRAMAS_WORSHIPPER_WIDOW_EMBRACE );
 			// I don't like the way we apply it
-			AuraPointer WidowEmbrace( new Aura( dbcSpell.LookupEntry( NAXXRAMAS_WORSHIPPER_WIDOW_EMBRACE ), 30000, _unit, mGrandWidow->GetUnit() ) );
+			Aura * WidowEmbrace( new Aura( dbcSpell.LookupEntry( NAXXRAMAS_WORSHIPPER_WIDOW_EMBRACE ), 30000, _unit, mGrandWidow->GetUnit() ) );
 			if ( WidowEmbrace != NULLAURA )
 				_unit->AddAura( WidowEmbrace );
 
@@ -450,7 +450,7 @@
 {
 	/*if ( !mPossessed && _unit->HasFlag( UNIT_FIELD_FLAGS, UNIT_FLAG_PLAYER_CONTROLLED_CREATURE ) )
 	{
-		PlayerPointer PlayerPtr = objmgr.GetPlayer( _unit->GetUInt64Value( UNIT_FIELD_CHARMEDBY ) );
+		Player * PlayerPtr = objmgr.GetPlayer( _unit->GetUInt64Value( UNIT_FIELD_CHARMEDBY ) );
 		if ( PlayerPtr != NULLPLR )
 		{
 			AI_Spell* NewSpell = new AI_Spell;
@@ -528,7 +528,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Naxxramas Follower
-NaxxramasFollowerAI::NaxxramasFollowerAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+NaxxramasFollowerAI::NaxxramasFollowerAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	mCharge = AddSpell( NAXXRAMAS_FOLLOWER_BERSERKER_CHARGE_HEROIC, Target_Current, 0, 0, 0 );
 	AddSpellFunc( &SpellFunc_NaxxramasFollowerCharge, Target_RandomPlayer, 8, 0, 20, 0, 40 );
@@ -551,12 +551,12 @@
 	delete this;
 };
 
-void SpellFunc_NaxxramasFollowerCharge( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_NaxxramasFollowerCharge( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	NaxxramasFollowerAI *NaxxramasFollower = ( pCreatureAI != NULL ) ? static_cast< NaxxramasFollowerAI* >( pCreatureAI ) : NULL;
 	if ( NaxxramasFollower != NULL )
 	{
-		UnitPointer CurrentTarget = NaxxramasFollower->GetUnit()->GetAIInterface()->GetNextTarget();
+		Unit * CurrentTarget = NaxxramasFollower->GetUnit()->GetAIInterface()->GetNextTarget();
 		if ( CurrentTarget != NULL && CurrentTarget != pTarget )
 		{
 			NaxxramasFollower->GetUnit()->GetAIInterface()->AttackReaction( pTarget, 500 );
@@ -570,7 +570,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Grand Widow Faerlina
-GrandWidowFaerlinaAI::GrandWidowFaerlinaAI( CreaturePointer pCreature ) : MoonScriptBossAI( pCreature )
+GrandWidowFaerlinaAI::GrandWidowFaerlinaAI( Creature * pCreature ) : MoonScriptBossAI( pCreature )
 {
 	MoonScriptCreatureAI* AddAI = NULL;
 	for ( uint32 i = 0; i < 4; ++i )
@@ -618,18 +618,18 @@
 	mFrenzy->AddEmote( "Run while you still can!", Text_Yell, 8797 );
 	mPoisonVolleyBoltTimer = mFrenzyTimer = INVALIDATE_TIMER;
 
-	GameObjectPointer WebGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 3318.65f, -3695.85f, 259.094f, 181235 );
+	GameObject * WebGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 3318.65f, -3695.85f, 259.094f, 181235 );
 	if ( WebGate != NULLGOB )
 		WebGate->SetState( 0 );
 };
 
-void GrandWidowFaerlinaAI::OnCombatStart( UnitPointer pTarget )
+void GrandWidowFaerlinaAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	mPoisonVolleyBoltTimer = AddTimer( 15000 );
 	mFrenzyTimer = AddTimer( 60000 + RandomUInt( 20 ) * 1000 );
 
-	GameObjectPointer WebGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 3318.65f, -3695.85f, 259.094f, 181235 );
+	GameObject * WebGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 3318.65f, -3695.85f, 259.094f, 181235 );
 	if ( WebGate != NULLGOB )
 		WebGate->SetState( 1 );
 
@@ -644,12 +644,12 @@
 	};
 };
 
-void GrandWidowFaerlinaAI::OnCombatStop( UnitPointer pTarget )
+void GrandWidowFaerlinaAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	mPoisonVolleyBoltTimer = mFrenzyTimer = INVALIDATE_TIMER;
 
-	GameObjectPointer WebGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 3318.65f, -3695.85f, 259.094f, 181235 );
+	GameObject * WebGate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 3318.65f, -3695.85f, 259.094f, 181235 );
 	if ( WebGate != NULLGOB )
 		WebGate->SetState( 0 );
 
@@ -743,7 +743,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Crypt Guard
-CryptGuardAI::CryptGuardAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+CryptGuardAI::CryptGuardAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( CRYPT_GUARD_ACID_SPLIT_HEROIC, Target_RandomPlayer, 8, 0, 15, 0, 40 );
@@ -755,7 +755,7 @@
 	mEnraged = false;
 };
 
-void CryptGuardAI::OnCombatStart( UnitPointer pTarget )
+void CryptGuardAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	mEnraged = false;
@@ -788,7 +788,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Corpse Scarab
-CorpseScarabAI::CorpseScarabAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+CorpseScarabAI::CorpseScarabAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	mAnubRekhanAI = NULL;
 };
@@ -809,7 +809,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Anub'Rekhan
-AnubRekhanAI::AnubRekhanAI( CreaturePointer pCreature ) : MoonScriptBossAI( pCreature )
+AnubRekhanAI::AnubRekhanAI( Creature * pCreature ) : MoonScriptBossAI( pCreature )
 {
 	if ( IsHeroic() )
 	{
@@ -849,7 +849,7 @@
 	mLocustSwarmTimer = mCryptSpawnTimer = INVALIDATE_TIMER;
 };
 
-void AnubRekhanAI::OnCombatStart( UnitPointer pTarget )
+void AnubRekhanAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	mLocustSwarmTimer = AddTimer( 70000 + RandomUInt( 50 ) * 1000 );
@@ -865,7 +865,7 @@
 		mCryptSpawnTimer = AddTimer( 20000 );
 };
 
-void AnubRekhanAI::OnCombatStop( UnitPointer pTarget )
+void AnubRekhanAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	mLocustSwarmTimer = mCryptSpawnTimer = INVALIDATE_TIMER;
@@ -961,15 +961,15 @@
 	delete this;
 };
 
-void SpellFunc_AnubRekhanCorpseScarabsPlayer( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_AnubRekhanCorpseScarabsPlayer( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	AnubRekhanAI *AnubRekhan = ( pCreatureAI != NULL ) ? static_cast< AnubRekhanAI* >( pCreatureAI ) : NULL;
 	if ( AnubRekhan != NULL )
 	{
-		std::vector< pair< PlayerPointer, Coords > > PlayerCorpses;
-		PlayerPointer PlayerPtr = NULLPLR;
-		ObjectPointer ObjectPtr = NULLOBJ;
-		for( unordered_set< PlayerPointer >::iterator Iter = AnubRekhan->GetUnit()->GetInRangePlayerSetBegin(); Iter != AnubRekhan->GetUnit()->GetInRangePlayerSetEnd(); ++Iter ) 
+		std::vector< pair< Player *, Coords > > PlayerCorpses;
+		Player * PlayerPtr = NULLPLR;
+		Object * ObjectPtr = NULLOBJ;
+		for( unordered_set< Player * >::iterator Iter = AnubRekhan->GetUnit()->GetInRangePlayerSetBegin(); Iter != AnubRekhan->GetUnit()->GetInRangePlayerSetEnd(); ++Iter ) 
 		{ 
 			if ( ( *Iter ) == NULLPLR )
 				continue;
@@ -1033,14 +1033,14 @@
 	};
 };
 
-void SpellFunc_AnubRekhanCorpseScarabsCryptGuard( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_AnubRekhanCorpseScarabsCryptGuard( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	AnubRekhanAI *AnubRekhan = ( pCreatureAI != NULL ) ? static_cast< AnubRekhanAI* >( pCreatureAI ) : NULL;
 	if ( AnubRekhan != NULL )
 	{
-		std::vector< CreaturePointer > CryptCorpses;
-		CreaturePointer CreaturePtr = NULLCREATURE;
-		for( unordered_set< ObjectPointer >::iterator Iter = AnubRekhan->GetUnit()->GetInRangeSetBegin(); Iter != AnubRekhan->GetUnit()->GetInRangeSetEnd(); ++Iter )
+		std::vector< Creature * > CryptCorpses;
+		Creature * CreaturePtr = NULLCREATURE;
+		for( unordered_set< Object * >::iterator Iter = AnubRekhan->GetUnit()->GetInRangeSetBegin(); Iter != AnubRekhan->GetUnit()->GetInRangeSetEnd(); ++Iter )
 		{
 			if ( ( *Iter ) == NULLPLR || !( *Iter )->IsCreature() )
 				continue;
@@ -1091,7 +1091,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Infectious Ghoul
-InfectiousGhoulAI::InfectiousGhoulAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+InfectiousGhoulAI::InfectiousGhoulAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( INFECTIOUS_GHOUL_FLESH_ROT, Target_Current, 10, 0, 15, 0, 8 );
 	if ( IsHeroic() )
@@ -1102,7 +1102,7 @@
 	mEnraged = false;
 };
 
-void InfectiousGhoulAI::OnCombatStart( UnitPointer pTarget )
+void InfectiousGhoulAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	mEnraged = false;
@@ -1130,7 +1130,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Stoneskin Gargoyle
-StoneskinGargoyleAI::StoneskinGargoyleAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+StoneskinGargoyleAI::StoneskinGargoyleAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 	{
@@ -1177,7 +1177,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Frenzied Bat
-FrenziedBatAI::FrenziedBatAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+FrenziedBatAI::FrenziedBatAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( FRENZIED_BAT_FRENZIED_DIVE, Target_Self, 10, 0, 15 );
 };
@@ -1189,7 +1189,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Plague Beast
-PlagueBeastAI::PlagueBeastAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+PlagueBeastAI::PlagueBeastAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( PLAGUE_BEAST_PLAGUE_SPLASH_HEROIC, Target_RandomPlayerDestination, 8, 0, 15, 0, 50 );
@@ -1200,13 +1200,13 @@
 	ApplyAura( PLAGUE_BEAST_MUTATED_SPORES );
 };
 
-void PlagueBeastAI::OnCombatStart( UnitPointer pTarget )
+void PlagueBeastAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	ApplyAura( PLAGUE_BEAST_MUTATED_SPORES );
 };
 
-void PlagueBeastAI::OnCombatStop( UnitPointer pTarget )
+void PlagueBeastAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	ApplyAura( PLAGUE_BEAST_MUTATED_SPORES );
@@ -1219,7 +1219,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Eye Stalker
-EyeStalkerAI::EyeStalkerAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+EyeStalkerAI::EyeStalkerAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( EYE_STALKER_MIND_FLAY_HEROIC, Target_Current, 100, 6, 8, 0, 35 );
@@ -1227,7 +1227,7 @@
 		AddSpell( EYE_STALKER_MIND_FLAY_NORMAL, Target_Current, 100, 6, 8, 0, 45 );
 };
 
-void EyeStalkerAI::OnCombatStart( UnitPointer pTarget )
+void EyeStalkerAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	SetBehavior( Behavior_Spell );
@@ -1237,7 +1237,7 @@
 
 void EyeStalkerAI::AIUpdate()
 {
-	UnitPointer CurrentTarget = _unit->GetAIInterface()->GetNextTarget();
+	Unit * CurrentTarget = _unit->GetAIInterface()->GetNextTarget();
 	if ( !IsCasting() && CurrentTarget != NULLUNIT )
 	{
 		float MaxRange = 45.0f;
@@ -1246,7 +1246,7 @@
 
 		if ( GetRangeToUnit( CurrentTarget ) > MaxRange )
 		{
-			UnitPointer NewTarget = GetBestUnitTarget( TargetFilter_Closest );
+			Unit * NewTarget = GetBestUnitTarget( TargetFilter_Closest );
 			if ( NewTarget != NULLUNIT && GetRangeToUnit( NewTarget ) <= MaxRange )
 			{
 				_unit->GetAIInterface()->SetNextTarget( NewTarget );
@@ -1272,7 +1272,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Noth the Plaguebringer
-NothThePlaguebringerAI::NothThePlaguebringerAI( CreaturePointer pCreature ) : MoonScriptBossAI( pCreature )
+NothThePlaguebringerAI::NothThePlaguebringerAI( Creature * pCreature ) : MoonScriptBossAI( pCreature )
 {
 	if ( IsHeroic() )
 	{
@@ -1294,7 +1294,7 @@
 
 	if ( _unit->GetMapMgr() != NULLMAPMGR && _unit->GetMapMgr()->GetInterface() != NULL )
 	{
-		GameObjectPointer Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2740.689209f, -3489.697266f, 262.117767f, 181200 );
+		GameObject * Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2740.689209f, -3489.697266f, 262.117767f, 181200 );
 		if ( Gate != NULLGOB )
 			Gate->SetState( 0 );
 
@@ -1311,7 +1311,7 @@
 	AddEmote( Event_OnTargetDied, "Breathe no more.", Text_Yell, 8850 );
 };
 
-void NothThePlaguebringerAI::OnCombatStart( UnitPointer pTarget )
+void NothThePlaguebringerAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	if ( IsHeroic() )
@@ -1323,7 +1323,7 @@
 
 	if ( _unit->GetMapMgr() != NULLMAPMGR && _unit->GetMapMgr()->GetInterface() != NULL )
 	{
-		GameObjectPointer Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2740.689209f, -3489.697266f, 262.117767f, 181200 );
+		GameObject * Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2740.689209f, -3489.697266f, 262.117767f, 181200 );
 		if ( Gate != NULLGOB )
 			Gate->SetState( 1 );
 
@@ -1333,12 +1333,12 @@
 	};
 };
 
-void NothThePlaguebringerAI::OnCombatStop( UnitPointer pTarget )
+void NothThePlaguebringerAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( _unit->GetMapMgr() != NULLMAPMGR && _unit->GetMapMgr()->GetInterface() != NULL )
 	{
-		GameObjectPointer Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2740.689209f, -3489.697266f, 262.117767f, 181200 );
+		GameObject * Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2740.689209f, -3489.697266f, 262.117767f, 181200 );
 		if ( Gate != NULLGOB )
 			Gate->SetState( 0 );
 
@@ -1570,7 +1570,7 @@
 	delete this;
 };
 
-void SpellFunc_NothToBalconyPhaseSwitch( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_NothToBalconyPhaseSwitch( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	NothThePlaguebringerAI *Noth = ( pCreatureAI != NULL ) ? static_cast< NothThePlaguebringerAI* >( pCreatureAI ) : NULL;
 	if ( Noth != NULL )
@@ -1584,7 +1584,7 @@
 	};
 };
 
-void SpellFunc_NothFromBalconyPhaseSwitch( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_NothFromBalconyPhaseSwitch( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	NothThePlaguebringerAI *Noth = ( pCreatureAI != NULL ) ? static_cast< NothThePlaguebringerAI* >( pCreatureAI ) : NULL;
 	if ( Noth != NULL )
@@ -1601,7 +1601,7 @@
 	};
 };
 
-void SpellFunc_NothCriple( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_NothCriple( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	NothThePlaguebringerAI *Noth = ( pCreatureAI != NULL ) ? static_cast< NothThePlaguebringerAI* >( pCreatureAI ) : NULL;
 	if ( Noth != NULL )
@@ -1612,7 +1612,7 @@
 	};
 };
 
-void SpellFunc_NothBlink( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_NothBlink( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	NothThePlaguebringerAI *Noth = ( pCreatureAI != NULL ) ? static_cast< NothThePlaguebringerAI* >( pCreatureAI ) : NULL;
 	if ( Noth != NULL )
@@ -1632,7 +1632,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Plagued Warrior
-PlaguedWarriorAI::PlaguedWarriorAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+PlaguedWarriorAI::PlaguedWarriorAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( PLAGUED_WARRIOR_STRIKE, Target_Current, 10, 0, 5, 0, 8 );
 	AddSpell( PLAGUED_WARRIOR_CLEAVE, Target_Current, 10, 0, 10, 0, 8 );
@@ -1652,7 +1652,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Plagued Champion
-PlaguedChampionAI::PlaguedChampionAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+PlaguedChampionAI::PlaguedChampionAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 	{
@@ -1680,7 +1680,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Plagued Guardian
-PlaguedGuardianAI::PlaguedGuardianAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+PlaguedGuardianAI::PlaguedGuardianAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( PLAGUED_GUARDIAN_ARCANE_EXPLOSION_HEROIC, Target_Self, 10, 1.5, 10 );
@@ -1702,7 +1702,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Heigan the Unclean
-HeiganTheUncleanAI::HeiganTheUncleanAI( CreaturePointer pCreature ) : MoonScriptBossAI( pCreature )
+HeiganTheUncleanAI::HeiganTheUncleanAI( Creature * pCreature ) : MoonScriptBossAI( pCreature )
 {
 	AddPhaseSpell( 1, AddSpell( HEIGAN_THE_UNCLEAN_SPELL_DISRUPTION, Target_Self, 100, 0, 5 ) );
 	if ( IsHeroic() )
@@ -1727,7 +1727,7 @@
 
 	if ( _unit->GetMapMgr() != NULLMAPMGR && _unit->GetMapMgr()->GetInterface() != NULL )
 	{
-		GameObjectPointer Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2790.709961f, -3708.669922f, 276.584991f, 181202 );
+		GameObject * Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2790.709961f, -3708.669922f, 276.584991f, 181202 );
 		if ( Gate != NULLGOB )
 			Gate->SetState( 0 );
 
@@ -1782,7 +1782,7 @@
 		--mEruptionPhase;
 };
 
-void HeiganTheUncleanAI::OnCombatStart( UnitPointer pTarget )
+void HeiganTheUncleanAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	mPhaseSwitchTimer = AddTimer( 90000 );
@@ -1792,7 +1792,7 @@
 
 	/*if ( _unit->GetMapMgr() != NULLMAPMGR && _unit->GetMapMgr()->GetInterface() != NULL )
 	{
-		GameObjectPointer Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2790.709961f, -3708.669922f, 276.584991f, 181202 );
+		GameObject * Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2790.709961f, -3708.669922f, 276.584991f, 181202 );
 		if ( Gate != NULLGOB )
 			Gate->SetState( 1 );
 
@@ -1802,10 +1802,10 @@
 
 		if ( mFissures.size() == 0 )
 		{
-			GameObjectPointer Fissure = NULLGOB;
+			GameObject * Fissure = NULLGOB;
 			PlagueFissureGO* FissureGO = NULL;
 			FissureTriggerAI* TriggerAI = NULL;
-			for ( unordered_set< ObjectPointer >::iterator Iter = _unit->GetInRangeSetBegin(); Iter != _unit->GetInRangeSetEnd(); ++Iter )
+			for ( unordered_set< Object * >::iterator Iter = _unit->GetInRangeSetBegin(); Iter != _unit->GetInRangeSetEnd(); ++Iter )
 			{
 				if ( ( *Iter ) == NULLOBJ || ( *Iter )->GetTypeId() != TYPEID_GAMEOBJECT )
 					continue;
@@ -1840,13 +1840,13 @@
 	};*/
 };
 
-void HeiganTheUncleanAI::OnCombatStop( UnitPointer pTarget )
+void HeiganTheUncleanAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	SetTargetToChannel( NULLUNIT, 0 );
 	if ( _unit->GetMapMgr() != NULLMAPMGR && _unit->GetMapMgr()->GetInterface() != NULL )
 	{
-		GameObjectPointer Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2790.709961f, -3708.669922f, 276.584991f, 181202 );
+		GameObject * Gate = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2790.709961f, -3708.669922f, 276.584991f, 181202 );
 		if ( Gate != NULLGOB )
 			Gate->SetState( 0 );
 
@@ -1929,12 +1929,12 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Plague Fissure
-GameObjectAIScript* PlagueFissureGO::Create( GameObjectPointer pGameObject )
+GameObjectAIScript* PlagueFissureGO::Create( GameObject * pGameObject )
 {
 	return new PlagueFissureGO( pGameObject );
 };
 
-PlagueFissureGO::PlagueFissureGO( GameObjectPointer pGameObject ) : GameObjectAIScript( pGameObject )
+PlagueFissureGO::PlagueFissureGO( GameObject * pGameObject ) : GameObjectAIScript( pGameObject )
 {
 	mHeiganAI = NULL;
 };
@@ -1965,7 +1965,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Fissure Trigger
-FissureTriggerAI::FissureTriggerAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+FissureTriggerAI::FissureTriggerAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	mHeiganAI = NULL;
 };
@@ -1991,7 +1991,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Loatheb
-LoathebAI::LoathebAI( CreaturePointer pCreature ) : MoonScriptBossAI( pCreature )
+LoathebAI::LoathebAI( Creature * pCreature ) : MoonScriptBossAI( pCreature )
 {
 	AddSpell( LOATHEB_NECROTIC_AURA, Target_Self, 100, 0, 20 );
 	if ( IsHeroic() )
@@ -2004,7 +2004,7 @@
 	mDeathbloomDamagePhase = false;
 };
 	
-void LoathebAI::OnCombatStart( UnitPointer pTarget )
+void LoathebAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	mDoomStaticTimer = 120000;
@@ -2014,7 +2014,7 @@
 	mDeathbloomDamagePhase = false;
 };
 
-void LoathebAI::OnCombatStop( UnitPointer pTarget )
+void LoathebAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	for ( set< SporeAI* >::iterator Iter = mSpores.begin(); Iter != mSpores.end(); ++Iter )
@@ -2089,8 +2089,8 @@
 		{
 			if ( mDeathbloomDamagePhase )
 			{
-				PlayerPointer PlayerPtr = NULLPLR;
-				for ( unordered_set< PlayerPointer >::iterator Iter = _unit->GetInRangePlayerSetBegin(); Iter != _unit->GetInRangePlayerSetEnd(); ++Iter )
+				Player * PlayerPtr = NULLPLR;
+				for ( unordered_set< Player * >::iterator Iter = _unit->GetInRangePlayerSetBegin(); Iter != _unit->GetInRangePlayerSetEnd(); ++Iter )
 				{
 					if ( ( *Iter ) == NULLPLR )
 						continue;
@@ -2142,14 +2142,14 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Spore
-SporeAI::SporeAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+SporeAI::SporeAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	Despawn( 90000 );
 
 	mLoathebAI = NULL;
 };
 
-void SporeAI::OnDied( UnitPointer pKiller )
+void SporeAI::OnDied( Unit * pKiller )
 {
 	ParentClass::OnDied( pKiller );
 	ApplyAura( SPORE_FUNGAL_CREEP );
@@ -2174,7 +2174,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Death Knight
-DeathKnightAI::DeathKnightAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+DeathKnightAI::DeathKnightAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( DEATH_KNIGHT_DEATH_COIL_HEROIC, Target_RandomPlayer, 9, 0, 15, 0, 45 );
@@ -2185,7 +2185,7 @@
 	AddSpell( DEATH_KNIGHT_HYSTERIA, Target_RandomFriendly, 7, 0, 30, 0, 45 );
 };
 
-void DeathKnightAI::OnCombatStart( UnitPointer pTarget )
+void DeathKnightAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	ApplyAura( DEATH_KNIGHT_BLOOD_PRESENCE );
@@ -2198,7 +2198,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Death Knight Captain
-DeathKnightCaptainAI::DeathKnightCaptainAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+DeathKnightCaptainAI::DeathKnightCaptainAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( DEATH_KNIGHT_CAPTAIN_PLAGUE_STRIKE_HEROIC, Target_Current, 8, 0, 20, 0, 8 );
@@ -2209,7 +2209,7 @@
 	AddSpell( DEATH_KNIGHT_CAPTAIN_WHIRLWIND, Target_Self, 10, 0, 10 );
 };
 
-void DeathKnightCaptainAI::OnCombatStart( UnitPointer pTarget )
+void DeathKnightCaptainAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	ApplyAura( DEATH_KNIGHT_CAPTAIN_UNHOLY_PRESENCE );
@@ -2225,7 +2225,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Ghost of Naxxramas
-GhostOfNaxxramasAI::GhostOfNaxxramasAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+GhostOfNaxxramasAI::GhostOfNaxxramasAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 };
 
@@ -2236,7 +2236,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Shade of Naxxramas
-ShadeOfNaxxramasAI::ShadeOfNaxxramasAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+ShadeOfNaxxramasAI::ShadeOfNaxxramasAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( SHADE_OF_NAXXRAMAS_SHADOW_BOLT_VOLLEY_HEROIC, Target_Self, 10, 0, 10 );
@@ -2246,7 +2246,7 @@
 	AddSpell( SHADE_OF_NAXXRAMAS_PORTAL_OF_SHADOWS, Target_Self, 8, 0, 60 );
 };
 
-void ShadeOfNaxxramasAI::OnDied( UnitPointer pKiller )
+void ShadeOfNaxxramasAI::OnDied( Unit * pKiller )
 {
 	MoonScriptCreatureAI* Ghost = SpawnCreature( CN_GHOST_OF_NAXXRAMAS, true );
 	if ( Ghost != NULL )
@@ -2280,7 +2280,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Portal of Shadows - timer value is a wild guess
-PortalOfShadowsAI::PortalOfShadowsAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+PortalOfShadowsAI::PortalOfShadowsAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	RegisterAIUpdateEvent( 1000 );
 	mSpawnTimer = AddTimer( 15000 );
@@ -2292,7 +2292,7 @@
 	if ( _unit->GetUInt64Value( UNIT_FIELD_SUMMONEDBY ) != 0 && _unit->GetMapMgr() != NULLMAPMGR && _unit->GetMapMgr()->GetInterface() != NULL )
 	{
 		//mShadeAI = static_cast< ShadeOfNaxxramasAI* >( GetNearestCreature( CN_SHADE_OF_NAXXRAMAS ) );
-		UnitPointer UnitPtr = ForceCreatureFind( CN_SHADE_OF_NAXXRAMAS );
+		Unit * UnitPtr = ForceCreatureFind( CN_SHADE_OF_NAXXRAMAS );
 		if ( UnitPtr != NULLUNIT )
 		{
 			mShadeAI = static_cast< ShadeOfNaxxramasAI* >( TO_CREATURE( UnitPtr )->GetScript() );
@@ -2302,14 +2302,14 @@
 	};
 };
 
-void PortalOfShadowsAI::OnCombatStart( UnitPointer pTarget )
+void PortalOfShadowsAI::OnCombatStart( Unit * pTarget )
 {
 	SetBehavior( Behavior_Spell );
 	SetCanMove( false );
 	StopMovement();
 };
 
-void PortalOfShadowsAI::OnCombatStop( UnitPointer pTarget )
+void PortalOfShadowsAI::OnCombatStop( Unit * pTarget )
 {
 	CancelAllSpells();
 	CancelAllTimers();
@@ -2363,7 +2363,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Necro Knight
-NecroKnightAI::NecroKnightAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+NecroKnightAI::NecroKnightAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( NECRO_KNIGHT_ARCANE_EXPLOSION, Target_Self, 8, 1.5, 5 );
 	AddSpell( NECRO_KNIGHT_BLAST_WAVE, Target_Self, 7, 0, 5 );
@@ -2378,7 +2378,7 @@
 	delete this;
 };
 
-void SpellFunc_NecroKnightBlink( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_NecroKnightBlink( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	NecroKnightAI *NecroKnight = ( pCreatureAI != NULL ) ? static_cast< NecroKnightAI* >( pCreatureAI ) : NULL;
 	if ( NecroKnight != NULL && pTarget != NULLUNIT )
@@ -2392,7 +2392,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Skeletal Smith
-SkeletalSmithAI::SkeletalSmithAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+SkeletalSmithAI::SkeletalSmithAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( SKELETAL_SMITH_CRUSH_ARMOR, Target_Current, 10, 0, 10, 0, 8);
 	AddSpell( SKELETAL_SMITH_DISARM, Target_Current, 10, 0, 15, 0, 8 );
@@ -2407,7 +2407,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Death Knight Cavalier
-DeathKnightCavalierAI::DeathKnightCavalierAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+DeathKnightCavalierAI::DeathKnightCavalierAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 	{
@@ -2430,7 +2430,7 @@
 	mIsMounted = true;
 };
 
-void DeathKnightCavalierAI::OnCombatStop( UnitPointer pTarget )
+void DeathKnightCavalierAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( mChargerAI != NULL )
@@ -2474,7 +2474,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Deathcharger Steed
-DeathchargerSteedAI::DeathchargerSteedAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+DeathchargerSteedAI::DeathchargerSteedAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	mDeathKnightAI = NULL;
 	mCharge = AddSpell( DEATHCHARGER_STEED_CHARGE, Target_Current, 0, 0, 0, 5, 45 );
@@ -2490,7 +2490,7 @@
 	};
 };
 
-void DeathchargerSteedAI::OnCombatStop( UnitPointer pTarget )
+void DeathchargerSteedAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( mDeathKnightAI != NULL )
@@ -2517,12 +2517,12 @@
 	delete this;
 };
 
-void SpellFunc_DeathchargerSteedCharge( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType )
+void SpellFunc_DeathchargerSteedCharge( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType )
 {
 	DeathchargerSteedAI *Deathcharger = ( pCreatureAI != NULL ) ? static_cast< DeathchargerSteedAI* >( pCreatureAI ) : NULL;
 	if ( Deathcharger != NULL )
 	{
-		UnitPointer CurrentTarget = Deathcharger->GetUnit()->GetAIInterface()->GetNextTarget();
+		Unit * CurrentTarget = Deathcharger->GetUnit()->GetAIInterface()->GetNextTarget();
 		if ( CurrentTarget != NULL && CurrentTarget != pTarget )
 		{
 			Deathcharger->GetUnit()->GetAIInterface()->AttackReaction( pTarget, 500 );
@@ -2536,14 +2536,14 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Dark Touched Warrior
-DarkTouchedWarriorAI::DarkTouchedWarriorAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+DarkTouchedWarriorAI::DarkTouchedWarriorAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( DARK_TOUCHED_WARRIOR_WHIRLWIND, Target_Self, 10, 0, 15 );
 
 	mResetHateTimer = INVALIDATE_TIMER;
 };
 
-void DarkTouchedWarriorAI::OnCombatStart( UnitPointer pTarget )
+void DarkTouchedWarriorAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	mResetHateTimer = AddTimer( 8000 + RandomUInt( 7 ) * 1000 );
@@ -2567,7 +2567,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Risen Squire
-RisenSquireAI::RisenSquireAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+RisenSquireAI::RisenSquireAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( RISEN_SQUIRE_PIERCE_ARMOR, Target_Current, 10, 0, 15, 0, 8 );
 };
@@ -2579,7 +2579,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Unholy Axe
-UnholyAxeAI::UnholyAxeAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+UnholyAxeAI::UnholyAxeAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 	{
@@ -2600,7 +2600,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Unholy Sword
-UnholySwordAI::UnholySwordAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+UnholySwordAI::UnholySwordAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( UNHOLY_SWORD_CLEAVE_HEROIC, Target_Current, 10, 0, 15, 0, 8 );
@@ -2615,7 +2615,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Unholy Staff
-UnholyStaffAI::UnholyStaffAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+UnholyStaffAI::UnholyStaffAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( UNHOLY_STAFF_ARCANE_EXPLOSION_HEROIC, Target_Self, 8, 0.5, 15 );
@@ -2636,7 +2636,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Patchwork Golem
-PatchworkGolemAI::PatchworkGolemAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+PatchworkGolemAI::PatchworkGolemAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( PATCHWORK_GOLEM_CLEAVE, Target_Current, 10, 0, 10, 0, 8 );
 	if ( IsHeroic() )
@@ -2653,7 +2653,7 @@
 	};
 };
 
-void PatchworkGolemAI::OnCombatStart( UnitPointer pTarget )
+void PatchworkGolemAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	if ( IsHeroic() )
@@ -2662,7 +2662,7 @@
 		ApplyAura( PATCHWORK_GOLEM_DISEASE_CLOUD_NORMAL );
 };
 
-void PatchworkGolemAI::OnCombatStop( UnitPointer pTarget )
+void PatchworkGolemAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	if ( IsAlive() )
@@ -2681,7 +2681,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Bile Retcher
-BileRetcherAI::BileRetcherAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+BileRetcherAI::BileRetcherAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( BILE_RETCHER_BILE_VOMIT_NORMAL, Target_Destination, 10, 0, 10, 0, 20 );
@@ -2698,18 +2698,18 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Sewage Slime
-SewageSlimeAI::SewageSlimeAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+SewageSlimeAI::SewageSlimeAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	ApplyAura( SEWAGE_SLIME_DISEASE_CLOUD );
 };
 
-void SewageSlimeAI::OnCombatStart( UnitPointer pTarget )
+void SewageSlimeAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	ApplyAura( SEWAGE_SLIME_DISEASE_CLOUD );
 };
 
-void SewageSlimeAI::OnCombatStop( UnitPointer pTarget )
+void SewageSlimeAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	ApplyAura( SEWAGE_SLIME_DISEASE_CLOUD );
@@ -2722,18 +2722,18 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Embalming Slime
-EmbalmingSlimeAI::EmbalmingSlimeAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+EmbalmingSlimeAI::EmbalmingSlimeAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	ApplyAura( EMBALMING_SLIME_EMBALMING_CLOUD );
 };
 
-void EmbalmingSlimeAI::OnCombatStart( UnitPointer pTarget )
+void EmbalmingSlimeAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	ApplyAura( EMBALMING_SLIME_EMBALMING_CLOUD );
 };
 
-void EmbalmingSlimeAI::OnCombatStop( UnitPointer pTarget )
+void EmbalmingSlimeAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 	ApplyAura( EMBALMING_SLIME_EMBALMING_CLOUD );
@@ -2746,7 +2746,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Mad Scientist
-MadScientistAI::MadScientistAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+MadScientistAI::MadScientistAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 	{
@@ -2767,7 +2767,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Living Monstrosity
-LivingMonstrosityAI::LivingMonstrosityAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+LivingMonstrosityAI::LivingMonstrosityAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( LIVING_MONSTROSITY_FEAR, Target_Self, 8, 1, 20 );
 	AddSpell( LIVING_MONSTROSITY_LIGHTNING_TOTEM, Target_Self, 8, 0.5, 25 );
@@ -2784,7 +2784,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Lightning Totem
-LightningTotemAI::LightningTotemAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+LightningTotemAI::LightningTotemAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( LIGHTNING_TOTEM_SHOCK_HEROIC, Target_Self, 100, 0.5, 2 );
@@ -2795,7 +2795,7 @@
 	Despawn( 60000 );
 };
 
-void LightningTotemAI::OnCombatStart( UnitPointer pTarget )
+void LightningTotemAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	SetBehavior( Behavior_Spell );
@@ -2820,7 +2820,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Stitched Colossus
-StitchedColossusAI::StitchedColossusAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+StitchedColossusAI::StitchedColossusAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	if ( IsHeroic() )
 		AddSpell( STITCHED_COLOSSUS_MASSIVE_STOMP_HEROIC, Target_Self, 8, 0, 15 );
@@ -2828,7 +2828,7 @@
 		AddSpell( STITCHED_COLOSSUS_MASSIVE_STOMP_NORMAL, Target_Self, 8, 0, 15 );
 };
 
-void StitchedColossusAI::OnCombatStart( UnitPointer pTarget )
+void StitchedColossusAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 	mEnraged = false;
@@ -2852,7 +2852,7 @@
 
 /////////////////////////////////////////////////////////////////////////////////
 ////// Marauding Geist
-MaraudingGeistAI::MaraudingGeistAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+MaraudingGeistAI::MaraudingGeistAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( MARAUDING_GEIST_FRENZIED_LEAP, Target_RandomPlayer, 8, 0, 10 );
 };
Index: Trunk/src/InstanceScripts/Raid_Naxxramas.h
===================================================================
--- Trunk/src/InstanceScripts/Raid_Naxxramas.h	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_Naxxramas.h	(working copy)
@@ -45,7 +45,7 @@
 class CarrionSpinnerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( CarrionSpinnerAI, MoonScriptCreatureAI );
-	CarrionSpinnerAI( CreaturePointer pCreature );
+	CarrionSpinnerAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -59,7 +59,7 @@
 class DreadCreeperAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( DreadCreeperAI, MoonScriptCreatureAI );
-	DreadCreeperAI( CreaturePointer pCreature );
+	DreadCreeperAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -73,7 +73,7 @@
 class NaxxramasCultistAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( NaxxramasCultistAI, MoonScriptCreatureAI );
-	NaxxramasCultistAI( CreaturePointer pCreature );
+	NaxxramasCultistAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -87,7 +87,7 @@
 class VenomStalkerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( VenomStalkerAI, MoonScriptCreatureAI );
-	VenomStalkerAI( CreaturePointer pCreature );
+	VenomStalkerAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -104,7 +104,7 @@
 class TombHorrorAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( TombHorrorAI, MoonScriptCreatureAI );
-	TombHorrorAI( CreaturePointer pCreature );
+	TombHorrorAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -120,7 +120,7 @@
 class NaxxramasAcolyteAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( NaxxramasAcolyteAI, MoonScriptCreatureAI );
-	NaxxramasAcolyteAI( CreaturePointer pCreature );
+	NaxxramasAcolyteAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -135,10 +135,10 @@
 class VigilantShadeAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( VigilantShadeAI, MoonScriptCreatureAI );
-	VigilantShadeAI( CreaturePointer pCreature );
+	VigilantShadeAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void Destroy();
 };
 
@@ -151,7 +151,7 @@
 class CryptReaverAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( CryptReaverAI, MoonScriptCreatureAI );
-	CryptReaverAI( CreaturePointer pCreature );
+	CryptReaverAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -163,11 +163,11 @@
 class WebWrapAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( WebWrapAI, MoonScriptCreatureAI );
-	WebWrapAI( CreaturePointer pCreature );
+	WebWrapAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
-	void OnDied( UnitPointer pKiller );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
+	void OnDied( Unit * pKiller );
 	void AIUpdate();
 	void Destroy();
 
@@ -183,7 +183,7 @@
 class MaexxnaSpiderlingAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( MaexxnaSpiderlingAI, MoonScriptCreatureAI );
-	MaexxnaSpiderlingAI( CreaturePointer pCreature );
+	MaexxnaSpiderlingAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -213,15 +213,15 @@
 	{ 3523.486572f, -3946.144287f, 309.651611f, 1.973552f, 0 }
 };
 
-void SpellFunc_MaexxnaWebWrap( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType );
+void SpellFunc_MaexxnaWebWrap( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType );
 
 class MaexxnaAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( MaexxnaAI, MoonScriptBossAI );
-	MaexxnaAI( CreaturePointer pCreature );
+	MaexxnaAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -244,11 +244,11 @@
 class NaxxramasWorshipperAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( NaxxramasWorshipperAI, MoonScriptCreatureAI );
-	NaxxramasWorshipperAI( CreaturePointer pCreature );
+	NaxxramasWorshipperAI( Creature * pCreature );
 	friend class GrandWidowFaerlinaAI;
 
 	void OnCastSpell( uint32 pSpellId );
-	void OnDied( UnitPointer pKiller );
+	void OnDied( Unit * pKiller );
 	void AIUpdate();
 	void Destroy();
 
@@ -262,12 +262,12 @@
 #define NAXXRAMAS_FOLLOWER_BERSERKER_CHARGE_HEROIC		56107
 #define NAXXRAMAS_FOLLOWER_SILENCE_HEROIC				54093
 
-void SpellFunc_NaxxramasFollowerCharge( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType );
+void SpellFunc_NaxxramasFollowerCharge( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType );
 
 class NaxxramasFollowerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( NaxxramasFollowerAI, MoonScriptCreatureAI );
-	NaxxramasFollowerAI( CreaturePointer pCreature );
+	NaxxramasFollowerAI( Creature * pCreature );
 	friend class GrandWidowFaerlinaAI;
 
 	void Destroy();
@@ -303,10 +303,10 @@
 class GrandWidowFaerlinaAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( GrandWidowFaerlinaAI, MoonScriptBossAI );
-	GrandWidowFaerlinaAI( CreaturePointer pCreature );
+	GrandWidowFaerlinaAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -329,10 +329,10 @@
 class CryptGuardAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( CryptGuardAI, MoonScriptCreatureAI );
-	CryptGuardAI( CreaturePointer pCreature );
+	CryptGuardAI( Creature * pCreature );
 	friend class AnubRekhanAI;
 
-	void OnCombatStart( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -347,7 +347,7 @@
 class CorpseScarabAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( CorpseScarabAI, MoonScriptCreatureAI );
-	CorpseScarabAI( CreaturePointer pCreature );
+	CorpseScarabAI( Creature * pCreature );
 	friend class AnubRekhanAI;
 
 	void Destroy();
@@ -373,16 +373,16 @@
 	{ 3332.591797f, -3476.102539f, 287.073425f, 0.015707f, 0 }
 };
 
-void SpellFunc_AnubRekhanCorpseScarabsPlayer( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType );
-void SpellFunc_AnubRekhanCorpseScarabsCryptGuard( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType );
+void SpellFunc_AnubRekhanCorpseScarabsPlayer( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType );
+void SpellFunc_AnubRekhanCorpseScarabsCryptGuard( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType );
 
 class AnubRekhanAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( AnubRekhanAI, MoonScriptBossAI );
-	AnubRekhanAI( CreaturePointer pCreature );
+	AnubRekhanAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -409,9 +409,9 @@
 class InfectiousGhoulAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( InfectiousGhoulAI, MoonScriptCreatureAI );
-	InfectiousGhoulAI( CreaturePointer pCreature );
+	InfectiousGhoulAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -429,7 +429,7 @@
 class StoneskinGargoyleAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( StoneskinGargoyleAI, MoonScriptCreatureAI );
-	StoneskinGargoyleAI( CreaturePointer pCreature );
+	StoneskinGargoyleAI( Creature * pCreature );
 
 	bool HasStoneskin();
 	void AIUpdate();
@@ -446,7 +446,7 @@
 class FrenziedBatAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( FrenziedBatAI, MoonScriptCreatureAI );
-	FrenziedBatAI( CreaturePointer pCreature );
+	FrenziedBatAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -462,10 +462,10 @@
 class PlagueBeastAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( PlagueBeastAI, MoonScriptCreatureAI );
-	PlagueBeastAI( CreaturePointer pCreature );
+	PlagueBeastAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void Destroy();
 };
 
@@ -478,9 +478,9 @@
 class EyeStalkerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( EyeStalkerAI, MoonScriptCreatureAI );
-	EyeStalkerAI( CreaturePointer pCreature );
+	EyeStalkerAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 };
@@ -509,21 +509,21 @@
 	{ 2717.878906f, -3518.062988f, 261.905945f, 3.177050f, 0 }
 };
 
-void SpellFunc_NothToBalconyPhaseSwitch( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType );
-void SpellFunc_NothFromBalconyPhaseSwitch( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType );
-void SpellFunc_NothCriple( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType );
-void SpellFunc_NothBlink( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType );
+void SpellFunc_NothToBalconyPhaseSwitch( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType );
+void SpellFunc_NothFromBalconyPhaseSwitch( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType );
+void SpellFunc_NothCriple( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType );
+void SpellFunc_NothBlink( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType );
 
 class NothThePlaguebringerAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( NothThePlaguebringerAI, MoonScriptBossAI );
-	NothThePlaguebringerAI( CreaturePointer pCreature );
+	NothThePlaguebringerAI( Creature * pCreature );
 	friend class PlaguedWarriorAI;
 	friend class PlaguedChampionAI;
 	friend class PlaguedGuardianAI;
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -549,7 +549,7 @@
 class PlaguedWarriorAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( PlaguedWarriorAI, MoonScriptCreatureAI );
-	PlaguedWarriorAI( CreaturePointer pCreature );
+	PlaguedWarriorAI( Creature * pCreature );
 
 	void Destroy();
 
@@ -567,7 +567,7 @@
 class PlaguedChampionAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( PlaguedChampionAI, MoonScriptCreatureAI );
-	PlaguedChampionAI( CreaturePointer pCreature );
+	PlaguedChampionAI( Creature * pCreature );
 
 	void Destroy();
 
@@ -584,7 +584,7 @@
 class PlaguedGuardianAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( PlaguedGuardianAI, MoonScriptCreatureAI );
-	PlaguedGuardianAI( CreaturePointer pCreature );
+	PlaguedGuardianAI( Creature * pCreature );
 
 	void Destroy();
 
@@ -627,14 +627,14 @@
 class HeiganTheUncleanAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( HeiganTheUncleanAI, MoonScriptBossAI );
-	HeiganTheUncleanAI( CreaturePointer pCreature );
+	HeiganTheUncleanAI( Creature * pCreature );
 	friend class PlagueFissureGO;
 	friend class FissureTriggerAI;
 
 	uint32	CalculateTriggerArea( float pPosX, float pPosY );
 	void	CallEruptionEvent( int32 pTimerId, int32 pNewTime );
-	void	OnCombatStart( UnitPointer pTarget );
-	void	OnCombatStop( UnitPointer pTarget );
+	void	OnCombatStart( Unit * pTarget );
+	void	OnCombatStop( Unit * pTarget );
 	void	AIUpdate();
 	void	Destroy();
 
@@ -654,8 +654,8 @@
 {
 public:
 
-	static GameObjectAIScript* Create( GameObjectPointer pGameObject );
-	PlagueFissureGO( GameObjectPointer pGameObject );
+	static GameObjectAIScript* Create( GameObject * pGameObject );
+	PlagueFissureGO( GameObject * pGameObject );
 
 	// I believe it's nowhere hooked in the core.
 	void SetState( uint32 pState );
@@ -672,7 +672,7 @@
 class FissureTriggerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( FissureTriggerAI, MoonScriptCreatureAI );
-	FissureTriggerAI( CreaturePointer pCreature );
+	FissureTriggerAI( Creature * pCreature );
 
 	void Destroy();
 
@@ -703,11 +703,11 @@
 class LoathebAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( LoathebAI, MoonScriptBossAI );
-	LoathebAI( CreaturePointer pCreature );
+	LoathebAI( Creature * pCreature );
 	friend class SporeAI;
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -727,9 +727,9 @@
 class SporeAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( SporeAI, MoonScriptCreatureAI );
-	SporeAI( CreaturePointer pCreature );
+	SporeAI( Creature * pCreature );
 
-    void OnDied( UnitPointer pKiller );
+    void OnDied( Unit * pKiller );
 	void Destroy();
 
 	LoathebAI* mLoathebAI;
@@ -750,9 +750,9 @@
 class DeathKnightAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( DeathKnightAI, MoonScriptCreatureAI );
-	DeathKnightAI( CreaturePointer pCreature );
+	DeathKnightAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
 	void Destroy();
 };
 
@@ -768,9 +768,9 @@
 class DeathKnightCaptainAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( DeathKnightCaptainAI, MoonScriptCreatureAI );
-	DeathKnightCaptainAI( CreaturePointer pCreature );
+	DeathKnightCaptainAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
 	void Destroy();
 };
 
@@ -784,7 +784,7 @@
 class GhostOfNaxxramasAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( GhostOfNaxxramasAI, MoonScriptCreatureAI );
-	GhostOfNaxxramasAI( CreaturePointer pCreature );
+	GhostOfNaxxramasAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -799,10 +799,10 @@
 class ShadeOfNaxxramasAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( ShadeOfNaxxramasAI, MoonScriptCreatureAI );
-	ShadeOfNaxxramasAI( CreaturePointer pCreature );
+	ShadeOfNaxxramasAI( Creature * pCreature );
 	friend class PortalOfShadowsAI;
 
-	void OnDied( UnitPointer pKiller );
+	void OnDied( Unit * pKiller );
 	void Destroy();
 
 	set< PortalOfShadowsAI* >	mPortals;
@@ -815,10 +815,10 @@
 class PortalOfShadowsAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( PortalOfShadowsAI, MoonScriptCreatureAI );
-	PortalOfShadowsAI( CreaturePointer pCreature );
+	PortalOfShadowsAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -836,12 +836,12 @@
 #define NECRO_KNIGHT_FLAMESTRIKE				30091
 #define NECRO_KNIGHT_FROST_NOVA					30094
 
-void SpellFunc_NecroKnightBlink( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType );
+void SpellFunc_NecroKnightBlink( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType );
 
 class NecroKnightAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( NecroKnightAI, MoonScriptCreatureAI );
-	NecroKnightAI( CreaturePointer pCreature );
+	NecroKnightAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -857,7 +857,7 @@
 class SkeletalSmithAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( SkeletalSmithAI, MoonScriptCreatureAI );
-	SkeletalSmithAI( CreaturePointer pCreature );
+	SkeletalSmithAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -879,10 +879,10 @@
 class DeathKnightCavalierAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( DeathKnightCavalierAI, MoonScriptCreatureAI );
-	DeathKnightCavalierAI( CreaturePointer pCreature );
+	DeathKnightCavalierAI( Creature * pCreature );
 	friend class DeathchargerSteedAI;
 
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -895,15 +895,15 @@
 #define CN_DEATHCHARGER_STEED					29818
 #define DEATHCHARGER_STEED_CHARGE				55317
 
-void SpellFunc_DeathchargerSteedCharge( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType );
+void SpellFunc_DeathchargerSteedCharge( SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType );
 
 class DeathchargerSteedAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( DeathchargerSteedAI, MoonScriptCreatureAI );
-	DeathchargerSteedAI( CreaturePointer pCreature );
+	DeathchargerSteedAI( Creature * pCreature );
 	friend class DeathKnightCavalierAI;
 
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void Destroy();
 
 	DeathKnightCavalierAI*	mDeathKnightAI;
@@ -919,9 +919,9 @@
 class DarkTouchedWarriorAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( DarkTouchedWarriorAI, MoonScriptCreatureAI );
-	DarkTouchedWarriorAI( CreaturePointer pCreature );
+	DarkTouchedWarriorAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -936,7 +936,7 @@
 class RisenSquireAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( RisenSquireAI, MoonScriptCreatureAI );
-	RisenSquireAI( CreaturePointer pCreature );
+	RisenSquireAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -952,7 +952,7 @@
 class UnholyAxeAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( UnholyAxeAI, MoonScriptCreatureAI );
-	UnholyAxeAI( CreaturePointer pCreature );
+	UnholyAxeAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -966,7 +966,7 @@
 class UnholySwordAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( UnholySwordAI, MoonScriptCreatureAI );
-	UnholySwordAI( CreaturePointer pCreature );
+	UnholySwordAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -982,7 +982,7 @@
 class UnholyStaffAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( UnholyStaffAI, MoonScriptCreatureAI );
-	UnholyStaffAI( CreaturePointer pCreature );
+	UnholyStaffAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -999,33 +999,33 @@
 class InstructorRazuviousAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( InstructorRazuviousAI, MoonScriptBossAI );
-	InstructorRazuviousAI( CreaturePointer pCreature );
+	InstructorRazuviousAI( Creature * pCreature );
 	friend class DeathKnightUnderstudyAI;
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
-	void OnDied( UnitPointer pKiller );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
+	void OnDied( Unit * pKiller );
 	void AIUpdate();
 	void Destroy();
 
 	set< DeathKnightUnderstudyAI* >	mStudents;
 };
 
-InstructorRazuviousAI::InstructorRazuviousAI( CreaturePointer pCreature ) : MoonScriptBossAI( pCreature )
+InstructorRazuviousAI::InstructorRazuviousAI( Creature * pCreature ) : MoonScriptBossAI( pCreature )
 {
 };
 
-void InstructorRazuviousAI::OnCombatStart( UnitPointer pTarget )
+void InstructorRazuviousAI::OnCombatStart( Unit * pTarget )
 {
 	ParentClass::OnCombatStart( pTarget );
 };
 
-void InstructorRazuviousAI::OnCombatStop( UnitPointer pTarget )
+void InstructorRazuviousAI::OnCombatStop( Unit * pTarget )
 {
 	ParentClass::OnCombatStop( pTarget );
 };
 
-void InstructorRazuviousAI::OnDied( UnitPointer pKiller )
+void InstructorRazuviousAI::OnDied( Unit * pKiller )
 {
 	ParentClass::OnDied( pKiller );
 };
@@ -1050,7 +1050,7 @@
 class DeathKnightUnderstudyAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( DeathKnightUnderstudyAI, MoonScriptCreatureAI );
-	DeathKnightUnderstudyAI( CreaturePointer pCreature );
+	DeathKnightUnderstudyAI( Creature * pCreature );
 
     void AIUpdate();
 	void Destroy();
@@ -1059,7 +1059,7 @@
 	bool					mIsControlled;
 };
 
-DeathKnightUnderstudyAI::DeathKnightUnderstudyAI( CreaturePointer pCreature ) : MoonScriptCreatureAI( pCreature )
+DeathKnightUnderstudyAI::DeathKnightUnderstudyAI( Creature * pCreature ) : MoonScriptCreatureAI( pCreature )
 {
 	AddSpell( DEATH_KNIGHT_UNDERSTUDY_BLOOD_STRIKE, Target_Current, 10, 0, 4, 0, 8 );
 	AddSpell( DEATH_KNIGHT_UNDERSTUDY_BONE_BARRIER, Target_Self, 8, 0, 30 );
@@ -1133,7 +1133,7 @@
 	if ( !mIsControlled && _unit->HasFlag( UNIT_FIELD_FLAGS, UNIT_FLAG_PLAYER_CONTROLLED_CREATURE ) )
 	{
 		// Add unit spells here to its action bar
-		/*PlayerPointer PlayerPtr = objmgr.GetPlayer( _unit->GetUInt64Value( UNIT_FIELD_CHARMEDBY ) );
+		/*Player * PlayerPtr = objmgr.GetPlayer( _unit->GetUInt64Value( UNIT_FIELD_CHARMEDBY ) );
 		if ( PlayerPtr != NULLPLR )
 		{
 			// Blood Strike
@@ -1273,10 +1273,10 @@
 class PatchworkGolemAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( PatchworkGolemAI, MoonScriptCreatureAI );
-	PatchworkGolemAI( CreaturePointer pCreature );
+	PatchworkGolemAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void Destroy();
 };
 
@@ -1290,7 +1290,7 @@
 class BileRetcherAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( BileRetcherAI, MoonScriptCreatureAI );
-	BileRetcherAI( CreaturePointer pCreature );
+	BileRetcherAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -1303,10 +1303,10 @@
 class SewageSlimeAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( SewageSlimeAI, MoonScriptCreatureAI );
-	SewageSlimeAI( CreaturePointer pCreature );
+	SewageSlimeAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void Destroy();
 };
 
@@ -1318,10 +1318,10 @@
 class EmbalmingSlimeAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( EmbalmingSlimeAI, MoonScriptCreatureAI );
-	EmbalmingSlimeAI( CreaturePointer pCreature );
+	EmbalmingSlimeAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
-	void OnCombatStop( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
+	void OnCombatStop( Unit * pTarget );
 	void Destroy();
 };
 
@@ -1336,7 +1336,7 @@
 class MadScientistAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( MadScientistAI, MoonScriptCreatureAI );
-	MadScientistAI( CreaturePointer pCreature );
+	MadScientistAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -1352,7 +1352,7 @@
 class LivingMonstrosityAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( LivingMonstrosityAI, MoonScriptCreatureAI );
-	LivingMonstrosityAI( CreaturePointer pCreature );
+	LivingMonstrosityAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -1366,9 +1366,9 @@
 class LightningTotemAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( LightningTotemAI, MoonScriptCreatureAI );
-	LightningTotemAI( CreaturePointer pCreature );
+	LightningTotemAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 };
@@ -1383,9 +1383,9 @@
 class StitchedColossusAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( StitchedColossusAI, MoonScriptCreatureAI );
-	StitchedColossusAI( CreaturePointer pCreature );
+	StitchedColossusAI( Creature * pCreature );
 
-	void OnCombatStart( UnitPointer pTarget );
+	void OnCombatStart( Unit * pTarget );
 	void AIUpdate();
 	void Destroy();
 
@@ -1400,7 +1400,7 @@
 class MaraudingGeistAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION( MaraudingGeistAI, MoonScriptCreatureAI );
-	MaraudingGeistAI( CreaturePointer pCreature );
+	MaraudingGeistAI( Creature * pCreature );
 
 	void Destroy();
 };
@@ -1420,7 +1420,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    StickedSpewerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    StickedSpewerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -1447,19 +1447,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1475,7 +1475,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1526,7 +1526,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    SurgicalAssistantAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SurgicalAssistantAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 1;
@@ -1547,19 +1547,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1575,7 +1575,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1626,7 +1626,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    SludgeBelcherAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SludgeBelcherAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -1653,19 +1653,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1681,7 +1681,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1732,7 +1732,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    PatchwerkAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PatchwerkAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 1;
@@ -1753,7 +1753,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 
@@ -1769,20 +1769,20 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     { 
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "No more play?");
 		_unit->PlaySoundToSet(8912);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "What happened to... Patch...");
 		_unit->PlaySoundToSet(8911);
@@ -1800,7 +1800,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1852,7 +1852,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    GrobbulusAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GrobbulusAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -1879,20 +1879,20 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		_unit->CastSpell(_unit, spells[0].info, spells[0].instant);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -1908,7 +1908,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1961,7 +1961,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    GluthAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GluthAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 3;
@@ -1994,23 +1994,23 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     { 
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -2026,7 +2026,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2078,7 +2078,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    BonyConstructAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BonyConstructAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 1;
@@ -2099,19 +2099,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -2127,7 +2127,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2178,7 +2178,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    DeathLordAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DeathLordAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 1;
@@ -2199,19 +2199,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -2227,7 +2227,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2279,7 +2279,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    RazuviousAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    RazuviousAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -2306,19 +2306,19 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     { 
 		if(Rand(50.0f))
 		{
@@ -2332,7 +2332,7 @@
 		}
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "An honorable... death...");
 		_unit->PlaySoundToSet(8860);
@@ -2350,7 +2350,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2401,7 +2401,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    KorthazzAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    KorthazzAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -2432,7 +2432,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		m_attackstart = true;
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Come out and fight ye wee ninny!");
@@ -2441,7 +2441,7 @@
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		m_attackstart = false;
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2449,21 +2449,21 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     { 
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Next time, bring more friends!");
 		_unit->PlaySoundToSet(8901);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "What a bloody waste this is!");
 		_unit->PlaySoundToSet(8900);
 		_unit->CastSpell(_unit, spells[1].info, spells[1].instant);
 		// Chest check
-		UnitPointer hrsone = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16065);
-		UnitPointer hrstwo = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16063);
-		ObjectPointer chest = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2520.66f, -2955.36f, 245.634f, 181366);
+		Unit * hrsone = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16065);
+		Unit * hrstwo = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16063);
+		Object * chest = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2520.66f, -2955.36f, 245.634f, 181366);
 		if(!hrsone->isAlive() && !hrstwo->isAlive() && !chest)
 		{
 			_unit->GetMapMgr()->GetInterface()->SpawnGameObject(181366 , 2520.66f, -2955.36f, 245.634f, 5.58505f, true, 0 , 0); 
@@ -2526,7 +2526,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2601,7 +2601,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    BlaumeuxAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BlaumeuxAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -2632,7 +2632,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		m_attackstart = true;
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Defend yourself!");
@@ -2641,7 +2641,7 @@
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		m_attackstart = false;
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2649,21 +2649,21 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     { 
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Who's next?");
 		_unit->PlaySoundToSet(8894);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Tou...che.");
 		_unit->PlaySoundToSet(8893);
 		_unit->CastSpell(_unit, spells[1].info, spells[1].instant);
 		// Chest check
-		UnitPointer hrsone = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16064);
-		UnitPointer hrstwo = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16063);
-		ObjectPointer chest = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2520.66f, -2955.36f, 245.634f, 181366);
+		Unit * hrsone = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16064);
+		Unit * hrstwo = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16063);
+		Object * chest = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2520.66f, -2955.36f, 245.634f, 181366);
 		
 		if (hrsone && hrstwo)
 			if(!hrsone->isAlive() && !hrstwo->isAlive() && !chest)
@@ -2717,7 +2717,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2787,7 +2787,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    ZeliekAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ZeliekAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 2;
@@ -2818,7 +2818,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		m_attackstart = true;
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Flee before its too late!");
@@ -2827,7 +2827,7 @@
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		m_attackstart = false;
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2835,21 +2835,21 @@
         RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     { 
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Forgive me!");
 		_unit->PlaySoundToSet(8915);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "It is... as it should be.");
 		_unit->PlaySoundToSet(8914);
 		_unit->CastSpell(_unit, spells[1].info, spells[1].instant);
 		// Chest check
-		UnitPointer hrsone = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16064);
-		UnitPointer hrstwo = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16065);
-		ObjectPointer chest = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2520.66f, -2955.36f, 245.634f, 181366); 
+		Unit * hrsone = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16064);
+		Unit * hrstwo = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 16065);
+		Object * chest = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2520.66f, -2955.36f, 245.634f, 181366); 
 		
 		if(!hrsone->isAlive() && !hrstwo->isAlive() && !chest)
 		{
@@ -2913,7 +2913,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -3047,7 +3047,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(FrostBreathTriggerAI);
 
-    FrostBreathTriggerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FrostBreathTriggerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->GetAIInterface()->MoveTo(PhaseTwoWP[1].x, PhaseTwoWP[1].y, PhaseTwoWP[1].z + 10.5f, PhaseTwoWP[1].o);
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
@@ -3060,15 +3060,15 @@
 		AICounter = 7;
     }
     
-    void OnCombatStart(UnitPointer mTarget) {}
+    void OnCombatStart(Unit * mTarget) {}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -3094,7 +3094,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(FrostBreathTrigger2AI);
 
-    FrostBreathTrigger2AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FrostBreathTrigger2AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 #ifdef DISABLE_FROST_BREATH
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
@@ -3109,13 +3109,13 @@
 		_unit->CastSpell(_unit, FROST_BREATH, false);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -3126,7 +3126,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(FrostBreathTrigger3AI);
 
-    FrostBreathTrigger3AI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FrostBreathTrigger3AI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_2);
 		_unit->CastSpell(_unit, SAPPHIRONS_WING_BUFFET, true);
@@ -3137,13 +3137,13 @@
 		RegisterAIUpdateEvent(1000);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -3159,7 +3159,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ChillTriggerAI);
 
-    ChillTriggerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ChillTriggerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->CastSpellAoF(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), dbcSpell.LookupEntry(28547), true);
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_2);
@@ -3169,7 +3169,7 @@
 		_unit->Despawn(15000, 0);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -3219,7 +3219,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    SapphironAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SapphironAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->GetAIInterface()->addWayPoint(CreateWaypoint(1, 3000, RUN));
 
@@ -3284,7 +3284,7 @@
 		m_phase = 1;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		for(int i = 0; i < nrspells; i++)
 			spells[i].casttime = 0;
@@ -3301,7 +3301,7 @@
 		data << uint32(0);
 		_unit->SendMessageToSet(&data, false);
 
-		GameObjectPointer Waterfall = NULLGOB;
+		GameObject * Waterfall = NULLGOB;
 		Waterfall = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3536.852783f, -5159.951172f, 143.636139f, FROSTWYRM_WATERFALL_DOOR);
 		if (Waterfall != NULL)
 		{
@@ -3317,16 +3317,16 @@
 		m_phase = 1;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
-		CreaturePointer BreathTrigger = NULLCREATURE;
+		Creature * BreathTrigger = NULLCREATURE;
 		BreathTrigger = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(PhaseTwoWP[1].x, PhaseTwoWP[1].y, PhaseTwoWP[1].z, CN_FROST_BREATH_TRIGGER3);
 		if (BreathTrigger != NULL)
 			BreathTrigger->Despawn(0,0);
 
 		for (int i = 1; i < 21; i++)
 		{
-			GameObjectPointer IceBlock = NULLGOB;
+			GameObject * IceBlock = NULLGOB;
 			IceBlock = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(IceBlocks[i].x, IceBlocks[i].y, IceBlocks[i].z, ICE_BLOCK_GO);
 			if (IceBlock != NULL)
 			{
@@ -3334,7 +3334,7 @@
 			}
 		}
 
-		GameObjectPointer Waterfall = NULLGOB;
+		GameObject * Waterfall = NULLGOB;
 		Waterfall = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3536.852783f, -5159.951172f, 143.636139f, FROSTWYRM_WATERFALL_DOOR);
 		if (Waterfall != NULL)
 		{
@@ -3357,11 +3357,11 @@
 		RemoveAIUpdateEvent();
     }
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 	}
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->CastSpell(_unit, SAPPHIRON_DIES, true);
 
@@ -3469,7 +3469,7 @@
 
 							LastOne = Block;
 
-							GameObjectPointer IceBlock = NULLGOB;
+							GameObject * IceBlock = NULLGOB;
 							IceBlock = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(ICE_BLOCK_GO, IceBlocks[Block].x, IceBlocks[Block].y, IceBlocks[Block].z, IceBlocks[Block].o, true, 0, 0);
 							if (IceBlock != NULL)
 							{
@@ -3493,7 +3493,7 @@
 							else
 								Block = RandomUInt(3) + 10;
 
-							GameObjectPointer IceBlock = NULLGOB;
+							GameObject * IceBlock = NULLGOB;
 							IceBlock = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(ICE_BLOCK_GO, IceBlocks[Block].x, IceBlocks[Block].y, IceBlocks[Block].z, IceBlocks[Block].o, true, 0, 0);
 							if (IceBlock != NULL)
 							{
@@ -3512,7 +3512,7 @@
 							else
 								Block = RandomUInt(9) + 13;
 
-							GameObjectPointer IceBlock = NULLGOB;
+							GameObject * IceBlock = NULLGOB;
 							IceBlock = _unit->GetMapMgr()->GetInterface()->SpawnGameObject(ICE_BLOCK_GO, IceBlocks[Block].x, IceBlocks[Block].y, IceBlocks[Block].z, IceBlocks[Block].o, true, 0, 0);
 							if (IceBlock != NULL)
 							{
@@ -3528,7 +3528,7 @@
 		{
 			if (FlightActions == 5)
 			{
-				UnitPointer FlyingFrostBreath = NULLUNIT;
+				Unit * FlyingFrostBreath = NULLUNIT;
 				FlyingFrostBreath =_unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_FROST_BREATH_TRIGGER, PhaseTwoWP[1].x, PhaseTwoWP[1].y, PhaseTwoWP[1].z + 18.0f, _unit->GetOrientation(), true, false, 0, 0);
 				if (FlyingFrostBreath != NULL)
 				{
@@ -3540,7 +3540,7 @@
 				RemoveAIUpdateEvent();
 				RegisterAIUpdateEvent(10000);
 
-				CreaturePointer BreathTrigger = NULLCREATURE;
+				Creature * BreathTrigger = NULLCREATURE;
 				BreathTrigger = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(PhaseTwoWP[1].x, PhaseTwoWP[1].y, PhaseTwoWP[1].z, CN_FROST_BREATH_TRIGGER3);
 				if (BreathTrigger != NULL)
 					BreathTrigger->Despawn(0,0);
@@ -3550,7 +3550,7 @@
 			{
 				for (int i = 1; i < 21; i++)
 				{
-					GameObjectPointer IceBlock = NULLGOB;
+					GameObject * IceBlock = NULLGOB;
 					IceBlock = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(IceBlocks[i].x, IceBlocks[i].y, IceBlocks[i].z, ICE_BLOCK_GO);
 					if (IceBlock != NULL)
 					{
@@ -3598,7 +3598,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget() != NULL)
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for (int i = 0; i < nrspells; i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -3651,13 +3651,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget() != NULL)
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (isHostile(_unit, (*itr)) && (*itr) != _unit && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID())
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && _unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))
@@ -3672,7 +3672,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (RTarget == NULL)
 				return;
@@ -3743,7 +3743,7 @@
 
 protected:
 
-	UnitPointer ChillTarget;	// I don't like it >_>
+	Unit * ChillTarget;	// I don't like it >_>
 
 	uint32 FlightActions;
 	uint32 ChillCounter;
@@ -3928,7 +3928,7 @@
 	bool Abominations[7];
 	bool SoulWeavers[7];
 
-    KelthuzadAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    KelthuzadAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 6;
 
@@ -4021,12 +4021,12 @@
 		m_phase = 0;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Minions, servants, soldiers of the cold dark, obey the call of Kel'Thuzad!");
 		_unit->PlaySoundToSet(8819);
 
-		UnitPointer TheLichKing = NULLUNIT;
+		Unit * TheLichKing = NULLUNIT;
 		TheLichKing = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(3767.58f, -5117.15f, 174.49f, CN_THE_LICH_KING);
 		if (TheLichKing != NULL)
 		{
@@ -4034,7 +4034,7 @@
 			_unit->SetUInt32Value(UNIT_CHANNEL_SPELL, 29423);
 		}
 
-		GameObjectPointer  KelGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3635.44f, -5090.33f, 143.205f, 181228);
+		GameObject *  KelGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3635.44f, -5090.33f, 143.205f, 181228);
 					
 		if (KelGate)
 			KelGate->SetState(1);
@@ -4055,15 +4055,15 @@
 		m_phase = 1;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
-		GameObjectPointer  KelGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3635.44f, -5090.33f, 143.205f, 181228);
+		GameObject *  KelGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3635.44f, -5090.33f, 143.205f, 181228);
 		if (KelGate != NULL)
 			KelGate->SetState(0);
 
 		for (int i = 0; i < 4; i++)
 		{
-			GameObjectPointer  WindowGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Guardians[i].x, Guardians[i].y, Guardians[i].z, 200002);		
+			GameObject *  WindowGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Guardians[i].x, Guardians[i].y, Guardians[i].z, 200002);		
 			if (WindowGate != NULL)
 				WindowGate->SetState(1);
 		}
@@ -4092,7 +4092,7 @@
 			spells[i].casttime = 0;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		if (_unit->GetHealthPct() == 0) return;
 
@@ -4110,15 +4110,15 @@
 		}
 	}
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
-		GameObjectPointer  KelGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3635.44f, -5090.33f, 143.205f, 181228);	
+		GameObject *  KelGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3635.44f, -5090.33f, 143.205f, 181228);	
 		if (KelGate != NULL)
 			KelGate->SetState(0);
 
 		for (int i = 0; i < 4; i++)
 		{
-			GameObjectPointer  WindowGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Guardians[i].x, Guardians[i].y, Guardians[i].z, 200002);
+			GameObject *  WindowGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Guardians[i].x, Guardians[i].y, Guardians[i].z, 200002);
 			if (WindowGate != NULL)
 				WindowGate->SetState(1);
 		}
@@ -4321,7 +4321,7 @@
 
 			if (HelpDialog == 4)
 			{
-				UnitPointer TheLichKing = NULLUNIT;
+				Unit * TheLichKing = NULLUNIT;
 				TheLichKing = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(3767.58f, -5117.15f, 174.49f, CN_THE_LICH_KING);
 				if (TheLichKing != NULL)
 				{
@@ -4337,7 +4337,7 @@
 
 				for (int i = 0; i < 4; i++)
 				{
-					GameObjectPointer  WindowGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Guardians[i].x, Guardians[i].y, Guardians[i].z, 200002);
+					GameObject *  WindowGate  = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Guardians[i].x, Guardians[i].y, Guardians[i].z, 200002);
 					if (WindowGate)
 						WindowGate->SetState(0);
 				}
@@ -4345,7 +4345,7 @@
 
 			if (HelpDialog == 10 || HelpDialog == 12 || HelpDialog == 14 || HelpDialog == 16 || HelpDialog == 18)
 			{
-				UnitPointer Guardian = NULLUNIT;
+				Unit * Guardian = NULLUNIT;
 				uint32 i = RandomUInt(4);
 				Guardian =_unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_GUARDIAN_OF_ICECROWN, Guardians[i].x, Guardians[i].y, Guardians[i].z, Guardians[i].o, true, false, 0, 0);
 				if (Guardian  != NULL)
@@ -4378,7 +4378,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -4433,13 +4433,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -4457,7 +4457,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -4513,7 +4513,7 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(TheLichKingAI);
 
-    TheLichKingAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TheLichKingAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
     }
@@ -4527,7 +4527,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(SoldierOfTheFrozenWastesAI);
-    SoldierOfTheFrozenWastesAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SoldierOfTheFrozenWastesAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		_unit->m_noRespawn = true;
 
@@ -4536,7 +4536,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		LastPosX = _unit->GetPositionX();
 		LastPosY = _unit->GetPositionY();
@@ -4545,7 +4545,7 @@
 		//RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -4553,14 +4553,14 @@
 		//RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
 
     void AIUpdate()
     {
-		CreaturePointer Kelthuzad = NULLCREATURE;
+		Creature * Kelthuzad = NULLCREATURE;
 		Kelthuzad = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(3749.950195f, -5113.451660f, 141.288635f, 15990);
 		if (Kelthuzad == NULL || !Kelthuzad->isAlive())
 		{
@@ -4608,7 +4608,7 @@
 
 		if (_unit->GetAIInterface()->GetNextTarget() != NULL)
 		{
-			UnitPointer target = _unit->GetAIInterface()->GetNextTarget();
+			Unit * target = _unit->GetAIInterface()->GetNextTarget();
 			if (_unit->GetDistance2dSq(target) <= 49.0f)
 				_unit->CastSpell(_unit, DARK_BLAST, true);
 		}
@@ -4633,7 +4633,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    UnstoppableAbominationAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    UnstoppableAbominationAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -4656,7 +4656,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		LastPosX = _unit->GetPositionX();
 		LastPosY = _unit->GetPositionY();
@@ -4668,7 +4668,7 @@
 			spells[i].casttime = 0;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -4676,14 +4676,14 @@
 		//RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
 
     void AIUpdate()
     {
-		CreaturePointer Kelthuzad = NULLCREATURE;
+		Creature * Kelthuzad = NULLCREATURE;
 		Kelthuzad = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(3749.950195f, -5113.451660f, 141.288635f, 15990);
 		if (Kelthuzad == NULL || !Kelthuzad->isAlive())
 		{
@@ -4738,7 +4738,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -4795,7 +4795,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    SoulWeaverAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SoulWeaverAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -4818,7 +4818,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		LastPosX = _unit->GetPositionX();
 		LastPosY = _unit->GetPositionY();
@@ -4830,7 +4830,7 @@
 			spells[i].casttime = 0;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -4838,14 +4838,14 @@
 		//RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
 
     void AIUpdate()
     {
-		CreaturePointer Kelthuzad = NULLCREATURE;
+		Creature * Kelthuzad = NULLCREATURE;
 		Kelthuzad = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(3749.950195f, -5113.451660f, 141.288635f, 15990);
 		if (Kelthuzad == NULL || !Kelthuzad->isAlive())
 		{
@@ -4900,7 +4900,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -4957,7 +4957,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    GuardianOfIcecrownAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    GuardianOfIcecrownAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -4980,7 +4980,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		if (_unit->GetAIInterface()->GetNextTarget())
 			LastTarget = _unit->GetAIInterface()->GetNextTarget();
@@ -4992,7 +4992,7 @@
 		//RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -5000,14 +5000,14 @@
 		//RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
 
     void AIUpdate()
     {
-		UnitPointer Kelthuzad = NULLUNIT;
+		Unit * Kelthuzad = NULLUNIT;
 		Kelthuzad = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(3715.950195f, -5106.451660f, 141.288635f, 15990);
 		if (Kelthuzad && !Kelthuzad->isAlive())
 		{
@@ -5045,7 +5045,7 @@
 
 		if (_unit->GetAIInterface()->GetNextTarget())
 		{
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			target = _unit->GetAIInterface()->GetNextTarget();
 
 			if (!LastTarget) { LastTarget = target; return; }
@@ -5060,7 +5060,7 @@
 protected:
 
 	float LastPosX, LastPosY, LastPosZ;
-	UnitPointer LastTarget;
+	Unit * LastTarget;
 	float newposx;
 	float newposy;
 	bool OnStart;
@@ -5070,8 +5070,8 @@
 class FrostPortal : public GameObjectAIScript
 {
 public:
-	FrostPortal(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new FrostPortal(GO); }
+	FrostPortal(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new FrostPortal(GO); }
 
 	void OnSpawn()
 	{
@@ -5080,14 +5080,14 @@
 
 	void AIUpdate()
 	{
-		PlayerPointer plr = _gameobject->GetMapMgr()->GetInterface()->GetPlayerNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ() );
+		Player * plr = _gameobject->GetMapMgr()->GetInterface()->GetPlayerNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ() );
 		if( !plr )
 			return;
 
-		UnitPointer Loatheb = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 16011);
-		UnitPointer Thaddius = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 15928);	
-		UnitPointer Maexxna = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 15952);	
-		UnitPointer FourHorseman = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 16064);
+		Unit * Loatheb = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 16011);
+		Unit * Thaddius = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 15928);	
+		Unit * Maexxna = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 15952);	
+		Unit * FourHorseman = _gameobject->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 16064);
 		
 		if((!Loatheb || Loatheb->isDead()) && (!Thaddius || Thaddius->isDead()) && (!Maexxna || Maexxna->isDead()) && (!FourHorseman || FourHorseman->isDead()))
 		{
Index: Trunk/src/InstanceScripts/Raid_OnyxiasLair.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_OnyxiasLair.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_OnyxiasLair.cpp	(working copy)
@@ -89,7 +89,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(OnyxiaAI);
-    OnyxiaAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    OnyxiaAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         m_phase = 1;
         m_entry = pCreature->GetEntry();
@@ -128,7 +128,7 @@
         m_Cleave = false;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         m_phase = 1;
         m_eFlamesCooldown = 1;
@@ -145,7 +145,7 @@
         m_Cleave = false;
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setMoveType(0);
         _unit->GetAIInterface()->setWaypointToMove(0);
@@ -161,7 +161,7 @@
             RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         if(m_useSpell)
             RemoveAIUpdateEvent();
@@ -352,7 +352,7 @@
         m_whelpCooldown--;
         if(!m_whelpCooldown)
         {
-            CreaturePointer cre = NULLCREATURE;
+            Creature * cre = NULLCREATURE;
             for(int i = 0; i < 6; i++)
             {
                 cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(11262, 
@@ -392,7 +392,7 @@
         m_aoeFearCooldown--;
         if(!m_whelpCooldown)
         {
-            CreaturePointer cre = NULLCREATURE;
+            Creature * cre = NULLCREATURE;
             for(int i = 0; i < 6; i++)
             {
                 cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(11262, 
Index: Trunk/src/InstanceScripts/Raid_SerpentshrineCavern.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_SerpentshrineCavern.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_SerpentshrineCavern.cpp	(working copy)
@@ -66,7 +66,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-	HydrossTheUnstableAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	HydrossTheUnstableAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 2;
 
@@ -96,7 +96,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		ResetCastTime();
 		MarkCount = 0;
@@ -113,7 +113,7 @@
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->SetUInt32Value(UNIT_FIELD_DISPLAYID, 20162);
 		_unit->SchoolImmunityList[SCHOOL_FROST] = 1;
@@ -124,7 +124,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		if(_unit->GetHealthPct() > 0)	
 		{
@@ -161,7 +161,7 @@
 		}
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "You are the disease, not I.");
 		_unit->PlaySoundToSet(11300);
@@ -232,7 +232,7 @@
 				_unit->SchoolImmunityList[SCHOOL_NATURE] = 1;
 
 				//Summon 4 elementals
-				CreaturePointer  summon;
+				Creature *  summon;
 				float posx = _unit->GetPositionX();
 				float posy = _unit->GetPositionY();
 				float posz = _unit->GetPositionZ();
@@ -316,7 +316,7 @@
 				_unit->SchoolImmunityList[SCHOOL_NATURE] = 0;
 
 				//Summon 4 elementals
-				CreaturePointer  summon;
+				Creature *  summon;
 				float posx = _unit->GetPositionX();
 				float posy = _unit->GetPositionY();
 				float posz = _unit->GetPositionZ();
@@ -360,7 +360,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i = minspell; i <= maxspell; i++)
 			{		
 				if(m_spellcheck[i])
@@ -402,10 +402,10 @@
 	{
 		if (!maxdist2cast) maxdist2cast = 100.0f;
 
-		UnitPointer RandomTarget = NULLUNIT;
-		std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+		Unit * RandomTarget = NULLUNIT;
+		std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{ 
 			if (isHostile(_unit, (*itr)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER))
 			{
@@ -419,7 +419,7 @@
 		if (!TargetTable.size())
 			return;
 
-		UnitPointer  RTarget = *(TargetTable.begin()+rand()%TargetTable.size());
+		Unit *  RTarget = *(TargetTable.begin()+rand()%TargetTable.size());
 
 		if (!RTarget)
 			return;
@@ -472,7 +472,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-	LurkerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	LurkerAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		// -- Number of spells to add --
 		nrspells = 4;
@@ -516,24 +516,24 @@
 		spells[3].attackstoptimer = 2000; // 2sec
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
 	   RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 
 	}
@@ -549,7 +549,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -622,7 +622,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-	LeotherasAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	LeotherasAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		//Insidious Whisper (inner demons) 
 		//"We all have our demons..." 
@@ -647,8 +647,8 @@
 	void FirstCheck()
 	{
 		//count greyheart spellbinders
-		CreaturePointer creature = NULLCREATURE;
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		Creature * creature = NULLCREATURE;
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{
 			if((*itr)->GetTypeId() == TYPEID_UNIT)
 			{
@@ -671,7 +671,7 @@
 		}
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		if(LeotherasEventGreyheartToKill[_unit->GetInstanceID()] != 0)
 			return;
@@ -692,10 +692,10 @@
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		//despawn shadow of leotheras
-		CreaturePointer shadow = NULLCREATURE;
+		Creature * shadow = NULLCREATURE;
 		shadow = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), CN_SHADOW_OF_LEOTHERAS);
 		if(shadow)
 		{
@@ -708,7 +708,7 @@
 	 	RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		if (_unit->GetHealthPct() > 0)
 		{
@@ -753,7 +753,7 @@
 		}
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "You cannot kill me! Fools, I'll be back! I'll... aarghh...");
 		_unit->PlaySoundToSet(11317);
@@ -826,7 +826,7 @@
 			}
 			else
 			{
-				CreaturePointer shadow = NULLCREATURE;
+				Creature * shadow = NULLCREATURE;
 				switch(FinalPhaseSubphase)
 				{
 				case 0:
@@ -925,7 +925,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i = 0; i < 1; i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -991,7 +991,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-	GreyheartSpellbinderAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	GreyheartSpellbinderAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 1;
 
@@ -1002,7 +1002,7 @@
 		spells[0].attackstoptimer = 2000;
 		m_spellcheck[0] = false;
 
-		UnitPointer Leotheras = NULLUNIT;
+		Unit * Leotheras = NULLUNIT;
 		Leotheras = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(376.543f, -438.631f, 29.7083f, CN_LEOTHERAS_THE_BLIND);
 		if(Leotheras)
 		{
@@ -1011,7 +1011,7 @@
 		}
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{			
 		_unit->SetUInt64Value(UNIT_FIELD_CHANNEL_OBJECT, 0);
 		_unit->SetUInt32Value(UNIT_CHANNEL_SPELL, 0);
@@ -1019,7 +1019,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1033,14 +1033,14 @@
         SpellCast(val);
     }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		LeotherasEventGreyheartToKill[_unit->GetInstanceID()]--;
 
 		//start the event
 		if(LeotherasEventGreyheartToKill[_unit->GetInstanceID()] == 0)
 		{
-			UnitPointer Leotheras = NULLUNIT;
+			Unit * Leotheras = NULLUNIT;
 			Leotheras = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(376.543f, -438.631f, 29.7083f, CN_LEOTHERAS_THE_BLIND);
 			if(Leotheras)
 			{
@@ -1052,9 +1052,9 @@
 				Leotheras->SetStandState(STANDSTATE_STAND);
 
 				//attack nearest player
-				PlayerPointer NearestPlayer;
+				Player * NearestPlayer;
 				float NearestDist = 0;
-				for(unordered_set<PlayerPointer>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
+				for(unordered_set<Player *>::iterator itr = _unit->GetInRangePlayerSetBegin(); itr != _unit->GetInRangePlayerSetEnd(); ++itr) 
 				{
 					if(isHostile(_unit, (*itr)) && ((*itr)->GetDistance2dSq(_unit) < NearestDist || !NearestDist))
 					{
@@ -1074,7 +1074,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1113,10 +1113,10 @@
 	{
 		if (!maxdist2cast) maxdist2cast = 100.0f;
 
-		UnitPointer RandomTarget = NULLUNIT;
-		std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+		Unit * RandomTarget = NULLUNIT;
+		std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{ 
 			if (isHostile(_unit, (*itr)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && isAttackable(_unit, (*itr)))
 			{
@@ -1130,7 +1130,7 @@
 		if (!TargetTable.size())
 			return;
 
-		UnitPointer  RTarget = *(TargetTable.begin()+rand()%TargetTable.size());
+		Unit *  RTarget = *(TargetTable.begin()+rand()%TargetTable.size());
 
 		if (!RTarget)
 			return;
@@ -1160,7 +1160,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ShadowofLeotherasAI);
 
-	ShadowofLeotherasAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	ShadowofLeotherasAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		info_chaos_blast = dbcSpell.LookupEntry(CHAOS_BLAST_ANIMATION);
 
@@ -1175,13 +1175,13 @@
 
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_SPELL);
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		RemoveAIUpdateEvent();
 	}
@@ -1218,9 +1218,9 @@
 };
 
 //Chaos blast dummy effect
-bool ChaosBlast(uint32 i, SpellPointer  pSpell)
+bool ChaosBlast(uint32 i, Spell *  pSpell)
 {
-	/*UnitPointer target = NULLUNIT;
+	/*Unit * target = NULLUNIT;
 	if(GUID_HIPART(pSpell->m_targets.m_unitTarget) == HIGHGUID_UNIT)
 		target = pSpell->u_caster->GetMapMgr()->GetCreature(pSpell->m_targets.m_unitTarget);
 	else if (GUID_HIPART(pSpell->m_targets.m_unitTarget) == HIGHGUID_PLAYER)
@@ -1254,7 +1254,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(KarathressAI);
 
-	KarathressAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	KarathressAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		info_cataclysmic_bolt = dbcSpell.LookupEntry(CATACLYSMIC_BOLT);
 		AdvisorsLeft = 3;
@@ -1264,7 +1264,7 @@
 /* we don't need to use that, as long we handle advisors counter with events
 	void CheckAdvisors()
 	{
-		UnitPointer advisor = NULLUNIT;
+		Unit * advisor = NULLUNIT;
 
 		//Sharkkis
 		advisor = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), CN_FATHOM_GUARD_SHARKKIS);
@@ -1279,7 +1279,7 @@
 		if(advisor && advisor->isAlive()) AdvisorsLeft--;
 	}*/
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		CataclysmicBoltTimer = 10;
 		EnrageTimer = 600;
@@ -1289,27 +1289,27 @@
 		RegisterAIUpdateEvent(1000);
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
 	   RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Her ... excellency ... awaits!");
 		_unit->PlaySoundToSet(11285);
 		RemoveAIUpdateEvent();
 
 		//spawn seer olum and despawn him in 3 minutes
-		CreaturePointer olum = NULLCREATURE;
+		Creature * olum = NULLCREATURE;
 		olum = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_SEER_OLUM, 451.099f, -544.984f, -7.36327f, 0.174533f, true, false, 0, 0);
 		if(olum)
 			olum->Despawn(180000, 0);
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "I am rid of you.");
 		_unit->PlaySoundToSet(11284);
@@ -1323,9 +1323,9 @@
 		{
 		// trying to be blizzlike: cast this bolt random on casters only
 		CataclysmicBoltTimer = 10;
-		UnitPointer RandomTarget = NULLUNIT;
-		std::vector<UnitPointer> TargetTable;
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		Unit * RandomTarget = NULLUNIT;
+		std::vector<Unit *> TargetTable;
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{ 
 			if (isHostile(_unit, (*itr)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER))
 			{
@@ -1397,14 +1397,14 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(FathomGuardSharkissAI);
-	FathomGuardSharkissAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	FathomGuardSharkissAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(MULTI_SHOT, Target_Current, 10.0f, 0, 0);
 		AddSpell(LEECHING_THROW, Target_Current, 10.0f, 0, 0);
 		AddSpell(THE_BEAST_WITHIN, Target_Current, 10.0f, 0, 40);
 	}
 
-   void OnCombatStart(UnitPointer pTarget)
+   void OnCombatStart(Unit * pTarget)
    {
 	   CurrentPet = NULLCREATURE;
 	   SummonPetTimer = 5;
@@ -1412,9 +1412,9 @@
 	   MoonScriptCreatureAI::OnCombatStart(pTarget);
    }
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
-		CreaturePointer FLK = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), CN_FATHOM_LORD_KARATHRESS);
+		Creature * FLK = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), CN_FATHOM_LORD_KARATHRESS);
 		if(FLK)
 		{
 			FLK->CastSpell(FLK, dbcSpell.LookupEntry(38455), true); //Power of Sharkkis
@@ -1456,7 +1456,7 @@
 
 private:
 	uint32 SummonPetTimer;
-	CreaturePointer CurrentPet;
+	Creature * CurrentPet;
 };
 
 //Fathom-Guard Tidalvess (Shaman)
@@ -1470,7 +1470,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(FathomGuardTidalvessAI);
-	FathomGuardTidalvessAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	FathomGuardTidalvessAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		//totems
 		AddSpell(SPITFIRE_TOTEM, Target_Self, 10.0f, 0, 0);
@@ -1481,9 +1481,9 @@
 		AddSpell(WINDFURY, Target_Current, 10.0f, 0, 0);
 	}
 
-	void OnDied(UnitPointer  pKiller)
+	void OnDied(Unit *  pKiller)
 	{
-		CreaturePointer FLK = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), CN_FATHOM_LORD_KARATHRESS);
+		Creature * FLK = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), CN_FATHOM_LORD_KARATHRESS);
 		if(FLK)
 		{
 			FLK->CastSpell(FLK, dbcSpell.LookupEntry(38452), true); //Power of Tidalvess
@@ -1507,13 +1507,13 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(FathomGuardCaribdisAI);
-	FathomGuardCaribdisAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	FathomGuardCaribdisAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(TIDAL_SURGE, Target_Self, 20.0f, 0, 10);
 		AddSpell(SUMMON_CYCLONE, Target_Self, 2.0f, 0, 0);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		HealingWaveTimer = 15;
 
@@ -1525,8 +1525,8 @@
 		/*HealingWaveTimer--;
 		if(!HealingWaveTimer)
 		{
-			vector<UnitPointer> TargetTable;
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			vector<Unit *> TargetTable;
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{
 				if((*itr)->GetTypeId() == TYPEID_UNIT && isFriendly(_unit, (*itr)))
 					TargetTable.push_back(TO_UNIT(*itr));
@@ -1538,9 +1538,9 @@
 		MoonScriptCreatureAI::AIUpdate();
 	}
 
-	void OnDied(UnitPointer  pKiller)
+	void OnDied(Unit *  pKiller)
 	{
-		CreaturePointer FLK = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), CN_FATHOM_LORD_KARATHRESS);
+		Creature * FLK = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), CN_FATHOM_LORD_KARATHRESS);
 		if(FLK)
 		{
 			FLK->CastSpell(FLK, dbcSpell.LookupEntry(38451), true); //Power of Caribdis
@@ -1574,7 +1574,7 @@
 	ADD_CREATURE_FACTORY_FUNCTION(MorogrimAI);
 	SP_AI_Spell spells[4];
 	
-	MorogrimAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	MorogrimAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		spells[0].info = dbcSpell.LookupEntry(TIDAL_WAVE);
 		spells[0].instant = true;
@@ -1592,7 +1592,7 @@
 		spells[3].cooldown = 30;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Flood of the deep, take you!");
 		_unit->PlaySoundToSet(11321);
@@ -1604,7 +1604,7 @@
 			spells[i].casttime = t + spells[i].cooldown;
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
 		_unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1612,7 +1612,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Great... currents of... Ageon.");
 		_unit->PlaySoundToSet(11329);
@@ -1620,7 +1620,7 @@
 		RemoveAIUpdateEvent();
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		if (_unit->GetHealthPct() > 0)	
 		{
@@ -1647,7 +1647,7 @@
 	{
 		if (_unit->GetAIInterface()->GetNextTarget() != NULL && _unit->GetCurrentSpell() == NULL)
 		{
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			uint32 t = (uint32)time(NULL);
 			target = _unit->GetAIInterface()->GetNextTarget();
 			if (t > spells[2].casttime)
@@ -1734,34 +1734,34 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(TidewalkerLurkerAI);
 
-	TidewalkerLurkerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	TidewalkerLurkerAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
-		UnitPointer target = FindTargetForSpell();
+		Unit * target = FindTargetForSpell();
 		if (target)
 		{
 			_unit->GetAIInterface()->AttackReaction(target, 1, 0);
 		}
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		_unit->SafeDelete();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		_unit->SafeDelete();
 	}
 	
-	UnitPointer FindTargetForSpell()
+	Unit * FindTargetForSpell()
 	{
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		float distance = 150.0f;
 
-		UnitPointer pUnit;
+		Unit * pUnit;
 		float dist;
 
-		for (unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
+		for (unordered_set<Object *>::iterator itr = _unit->GetInRangeOppFactsSetBegin(); itr != _unit->GetInRangeOppFactsSetEnd(); itr++)
 		{
 			if((*itr)->GetTypeId() != TYPEID_UNIT && (*itr)->GetTypeId() != TYPEID_PLAYER)
 				continue;
@@ -1890,11 +1890,11 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(EnchantedElementalAI);
 		
-	EnchantedElementalAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	EnchantedElementalAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
 
-		UnitPointer Vashj = NULLUNIT;
+		Unit * Vashj = NULLUNIT;
 		Vashj = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(29.798161f, -923.358276f, 42.900517f, CN_LADY_VASHJ);
 		if(Vashj)
 		{
@@ -1914,7 +1914,7 @@
 			break;
 
 		case 2:
-			UnitPointer Vashj = NULLUNIT;
+			Unit * Vashj = NULLUNIT;
 			Vashj = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(29.798161f, -923.358276f, 42.900517f, CN_LADY_VASHJ);
 			if(Vashj)
 			{
@@ -1942,7 +1942,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 		
-	VashjAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	VashjAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		nrspells = 3;
 
@@ -2005,7 +2005,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		ResetCastTime();
 		Phase = 1;
@@ -2042,11 +2042,11 @@
 		RegisterAIUpdateEvent(1000);
 	}
 		
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		//despawn enchanted elemental, tainted elemental, coilfang elite, coilfang strider
-		CreaturePointer creature = NULLCREATURE;
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		Creature * creature = NULLCREATURE;
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{
 			if((*itr)->GetTypeId() == TYPEID_UNIT)
 			{
@@ -2072,14 +2072,14 @@
 		RemoveAIUpdateEvent();
 	}
 		
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Lord Illidan, I... I am... sorry.");
 		_unit->PlaySoundToSet(11544);
 		RemoveAIUpdateEvent();
 	}
 		
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		switch(rand()%2)
 		{
@@ -2118,7 +2118,7 @@
 			/*SporebatTimer++;
 			if(SporebatTimer > 10)
 			{
-				CreaturePointer cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_TOXIC_SPORE_BAT,  29.769f, -866.190f, 43, 0, true, false, 0, 0);
+				Creature * cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_TOXIC_SPORE_BAT,  29.769f, -866.190f, 43, 0, true, false, 0, 0);
 				cre->GetAIInterface()->setOutOfCombatRange(1);		
 				SporebatTimer = 0;
 			}*/
@@ -2144,7 +2144,7 @@
 
 		//if nobody is in range, shot or multishot
 		bool InRange = false;
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{
 			if(isHostile(_unit, (*itr)) && _unit->GetDistance2dSq((*itr)) < 100) //10 yards
 			{
@@ -2179,7 +2179,7 @@
 		if(!EnchantedElementalTimer)
 		{
 			uint32 pos = rand()%8;
-			CreaturePointer elemental = NULLCREATURE;
+			Creature * elemental = NULLCREATURE;
 			elemental = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_ENCHANTED_ELEMENTAL, ElementalSpawnPoints[pos].mX, ElementalSpawnPoints[pos].mY, ElementalSpawnPoints[pos].mZ, ElementalSpawnPoints[pos].mO, true, false, 0, 0);
 			if(elemental)
 			{
@@ -2221,14 +2221,14 @@
 		CoilfangStriderTimer--;
 		if(!CoilfangStriderTimer)
 		{
-			CreaturePointer summoned = NULLCREATURE;
+			Creature * summoned = NULLCREATURE;
 			summoned = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_COILFANG_STRIDER, -29.761278f, -980.252930f, 41.097122f, 0.0f, true, false, 0, 0);
 			if(summoned)
 			{
 				//attack nearest target
-				UnitPointer nearest = NULLUNIT;
+				Unit * nearest = NULLUNIT;
 				float nearestdist = 0;
-				for(unordered_set<ObjectPointer>::iterator itr = summoned->GetInRangeSetBegin(); itr != summoned->GetInRangeSetEnd(); ++itr) 
+				for(unordered_set<Object *>::iterator itr = summoned->GetInRangeSetBegin(); itr != summoned->GetInRangeSetEnd(); ++itr) 
 				{
 					if(((*itr)->GetTypeId() == TYPEID_PLAYER || (*itr)->GetTypeId() == TYPEID_UNIT) && isHostile(summoned, (*itr)) && (summoned->GetDistance2dSq((*itr)) < nearestdist || !nearestdist) )
 					{
@@ -2245,14 +2245,14 @@
 		if(!CoilfangEliteTimer)
 		{
 			uint32 pos = rand()%4;
-			CreaturePointer summoned = NULLCREATURE;
+			Creature * summoned = NULLCREATURE;
 			summoned = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_COILFANG_ELITE, CoilfangEliteSpawnPoints[pos].mX, CoilfangEliteSpawnPoints[pos].mY, CoilfangEliteSpawnPoints[pos].mZ, CoilfangEliteSpawnPoints[pos].mO, true, false, 0, 0);
 			if(summoned)
 			{
 				//attack nearest target
-				UnitPointer nearest = NULLUNIT;
+				Unit * nearest = NULLUNIT;
 				float nearestdist = 0;
-				for(unordered_set<ObjectPointer>::iterator itr = summoned->GetInRangeSetBegin(); itr != summoned->GetInRangeSetEnd(); ++itr) 
+				for(unordered_set<Object *>::iterator itr = summoned->GetInRangeSetBegin(); itr != summoned->GetInRangeSetEnd(); ++itr) 
 				{
 					if(((*itr)->GetTypeId() == TYPEID_PLAYER || (*itr)->GetTypeId() == TYPEID_UNIT) && isHostile(summoned, (*itr)) && (summoned->GetDistance2dSq((*itr)) < nearestdist || !nearestdist) )
 					{
@@ -2276,8 +2276,8 @@
 		if(_unit->GetHealthPct() <= 50)
 		{
 			//despawn enchanted elementals
-			CreaturePointer creature = NULLCREATURE;
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			Creature * creature = NULLCREATURE;
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{
 				if((*itr)->GetTypeId() == TYPEID_UNIT)
 				{
@@ -2297,7 +2297,7 @@
 		}
 	}
 
-	void Shoot(UnitPointer target)
+	void Shoot(Unit * target)
 	{
         switch(rand()%2)
         {
@@ -2335,7 +2335,7 @@
 			_unit->GetAIInterface()->m_canMove = false;
 
 			//setup shield
-			CreaturePointer channel = NULLCREATURE;
+			Creature * channel = NULLCREATURE;
 			for(uint8 i = 0; i < 4; i++)
 			{
 				channel = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_SHIELD_GENERATOR_CHANNEL, ShieldGeneratorCoords[i][0],  ShieldGeneratorCoords[i][1],  ShieldGeneratorCoords[i][2], 0, true, false, 0, 0);
@@ -2356,7 +2356,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -2400,10 +2400,10 @@
 	{
 		if (!maxdist2cast) maxdist2cast = 100.0f;
 
-		UnitPointer RandomTarget = NULLUNIT;
-		std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+		Unit * RandomTarget = NULLUNIT;
+		std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-		for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+		for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 		{ 
 			if (isHostile(_unit, (*itr)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER))
 			{
@@ -2417,7 +2417,7 @@
 		if (!TargetTable.size())
 			return;
 
-		UnitPointer  RTarget = *(TargetTable.begin()+rand()%TargetTable.size());
+		Unit *  RTarget = *(TargetTable.begin()+rand()%TargetTable.size());
 
 		if (!RTarget)
 			return;
@@ -2457,7 +2457,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(TaintedElementalAI);
 		
-	TaintedElementalAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	TaintedElementalAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		spell_poison_spit = new AI_Spell();
 		spell_poison_spit->agent = AGENT_SPELL;
@@ -2475,20 +2475,20 @@
 		_unit->GetAIInterface()->m_canMove = false;
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		_unit->GetAIInterface()->setCurrentAgent(AGENT_SPELL);
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 	}
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		RemoveAIUpdateEvent();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
-		CreaturePointer Vashj = NULLCREATURE;
+		Creature * Vashj = NULLCREATURE;
 		Vashj = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), CN_LADY_VASHJ);
 		if(Vashj)
 		{
@@ -2524,18 +2524,18 @@
 class TaintedCoreGO : public GameObjectAIScript
 {
 public:
-	TaintedCoreGO(GameObjectPointer pGameObject) : GameObjectAIScript(pGameObject)
+	TaintedCoreGO(GameObject * pGameObject) : GameObjectAIScript(pGameObject)
 	{
 	}
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
-		CreaturePointer Vashj = NULLCREATURE;
+		Creature * Vashj = NULLCREATURE;
 		Vashj = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(29.798161f, -923.358276f, 42.900517f, CN_LADY_VASHJ);
 		if( Vashj != NULL && static_cast<VashjAI*>(Vashj->GetScript())->Phase == 2 )
 		{
 			Vashj->ModUnsigned32Value(UNIT_FIELD_HEALTH, -((Vashj->GetUInt32Value(UNIT_FIELD_MAXHEALTH)/100)*5) );
-			CreaturePointer channel = NULLCREATURE;
+			Creature * channel = NULLCREATURE;
 			channel = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), CN_SHIELD_GENERATOR_CHANNEL);
 			if(channel != NULL && channel->IsInWorld() )
 				channel->Despawn(0, 0);
@@ -2547,7 +2547,7 @@
 		delete this;
 	}
 
-	static GameObjectAIScript *Create(GameObjectPointer pGameObject) { return new TaintedCoreGO(pGameObject); }
+	static GameObjectAIScript *Create(GameObject * pGameObject) { return new TaintedCoreGO(pGameObject); }
 };
 
 class ToxicSporeBatAI : public CreatureAIScript
@@ -2557,7 +2557,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 		
-	ToxicSporeBatAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	ToxicSporeBatAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		/************************ Waypoint Place ************************/
 		
@@ -2606,7 +2606,7 @@
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 	}
 		
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		//_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Phase 1 Test!");
 		_unit->PlaySoundToSet(11243);
@@ -2640,7 +2640,7 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 		
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		Phase = 0;
 		FlameQuills = false;
@@ -2657,7 +2657,7 @@
 		//RemoveAIUpdateEvent();
 	}
 		
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		Phase = 0;
 		FlameQuills = false;
@@ -2764,7 +2764,7 @@
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
 		{
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				spells[i].casttime--;
@@ -2983,7 +2983,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CoilfangAmbusherAI);
-	CoilfangAmbusherAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilfangAmbusherAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(CA_MULTI_SHOT, Target_Self, 10.0f, 0, 0);
 	}
@@ -2998,7 +2998,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CoilfangFathomWitchAI);
-	CoilfangFathomWitchAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilfangFathomWitchAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOW_BOLT, Target_Current, 2.0f, 0, 0);
 		AddSpell(WHIRLWIND_KNOCKBACK, Target_Self, 2.0f, 0, 0);
@@ -3013,7 +3013,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CoilfangGuardianAI);
-	CoilfangGuardianAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilfangGuardianAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(CLEAVE, Target_Destination, 3.0f, 0, 0);
 	}
@@ -3029,7 +3029,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CoilfangPriestessAI);
-	CoilfangPriestessAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilfangPriestessAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(HOLY_NOVA, Target_Self, 2.0f, 0, 0);
 		AddSpell(SMITE, Target_Current, 1.0f, 2, 0);
@@ -3051,7 +3051,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(UnderbogColossusAI);
-	UnderbogColossusAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	UnderbogColossusAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		//these mobs pick from a random set of abilities
 		switch(rand()%3)
@@ -3072,7 +3072,7 @@
 		}
 	}
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		//There will also be a choice of abilities he might use as he dies:
 		switch(rand()%3)
@@ -3110,7 +3110,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(TidewalkerWarriorAI);
-	TidewalkerWarriorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	TidewalkerWarriorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(TW_CLEAVE, Target_Destination, 1.0f, 0, 0);
 		AddSpell(TW_BLOODTHIRST, Target_Current, 1.0f, -1, 0); //-1 means instant
@@ -3128,7 +3128,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CoilfangSerpentguardAI);
-	CoilfangSerpentguardAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilfangSerpentguardAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(CSERP_CLEAVE, Target_Destination, 1.0f, 0, 0);
 		AddSpell(CSERP_REFLECTION, Target_Self, 0.5f, 0, 0);
@@ -3144,7 +3144,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CoilfangShattererAI);
-	CoilfangShattererAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilfangShattererAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(CSHATT_ARMOR, Target_Current, 2.0f, 0, 0);
 	}
@@ -3158,7 +3158,7 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(CoilfangStriderAI);
-	CoilfangStriderAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CoilfangStriderAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(CSTRID_SCREAM, Target_Current, 2.0f, 0, 0);
 	}
Index: Trunk/src/InstanceScripts/Raid_TheEye.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_TheEye.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_TheEye.cpp	(working copy)
@@ -43,7 +43,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    AStarScryerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AStarScryerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -66,7 +66,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -78,11 +78,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -90,7 +90,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
 		RemoveAIUpdateEvent();
@@ -107,7 +107,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -152,13 +152,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -176,7 +176,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -215,7 +215,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    StarScryerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    StarScryerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -231,7 +231,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -243,11 +243,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -255,7 +255,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -272,7 +272,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -317,13 +317,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -341,7 +341,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -379,7 +379,7 @@
 class AstromancerAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(AstromancerAI, MoonScriptCreatureAI);
-	AstromancerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	AstromancerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		//spells
 		mArcaneBurst = AddSpell(ASTROMANCER_ARCANE_BURST, Target_Self, 0, 0, 0, 0, 10);
@@ -396,7 +396,7 @@
 		{
 			if (mArcaneBurstTimer == -1 || IsTimerFinished(mArcaneBurstTimer))
 			{
-				UnitPointer unit = GetBestUnitTarget(TargetFilter_Closest);
+				Unit * unit = GetBestUnitTarget(TargetFilter_Closest);
 				if (unit && GetRangeToUnit(unit) <= 10.0f)
 				{
 					CastSpellNowNoScheduling(mArcaneBurst);
@@ -432,7 +432,7 @@
 	SP_AI_Spell spells[3];
 	bool m_spellcheck[3];
 
-    AstromancerLordAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AstromancerLordAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 3;
 		for(int i=0;i<nrspells;i++)
@@ -462,7 +462,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -474,11 +474,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -486,7 +486,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -503,7 +503,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -548,13 +548,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -572,7 +572,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -612,7 +612,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    BloodVindicatorAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BloodVindicatorAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -635,7 +635,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -647,11 +647,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -659,7 +659,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -676,7 +676,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -721,13 +721,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -745,7 +745,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -785,7 +785,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    BloodLegionnareAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BloodLegionnareAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -808,7 +808,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -820,11 +820,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -832,7 +832,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -849,7 +849,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -894,13 +894,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -918,7 +918,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -958,7 +958,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    BloodMarshalAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    BloodMarshalAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -981,7 +981,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -993,11 +993,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1005,7 +1005,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1022,7 +1022,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1067,13 +1067,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1091,7 +1091,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1131,7 +1131,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    PhoenixHawkAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PhoenixHawkAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1156,7 +1156,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1168,11 +1168,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1180,7 +1180,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1197,7 +1197,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1242,13 +1242,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1266,7 +1266,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1306,7 +1306,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    CrystalSentinelAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CrystalSentinelAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 2;
 		for(int i=0;i<nrspells;i++)
@@ -1329,7 +1329,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1341,11 +1341,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1353,7 +1353,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1370,7 +1370,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1415,13 +1415,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1439,7 +1439,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1478,7 +1478,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    CrystalMechanicAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    CrystalMechanicAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -1495,7 +1495,7 @@
 		spells[0].maxdist2cast = 40.0f;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -1507,11 +1507,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1519,7 +1519,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
        RemoveAIUpdateEvent();
@@ -1536,7 +1536,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1581,13 +1581,13 @@
 
 		if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
-			std::vector<UnitPointer> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
+			std::vector<Unit *> TargetTable;		/* From M4ksiu - Big THX to Capt who helped me with std stuff to make it simple and fully working <3 */
 												/* If anyone wants to use this function, then leave this note!										 */
-			for(unordered_set<ObjectPointer>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
+			for(unordered_set<Object *>::iterator itr = _unit->GetInRangeSetBegin(); itr != _unit->GetInRangeSetEnd(); ++itr) 
 			{ 
 				if (((spells[i].targettype == TARGET_RANDOM_FRIEND && isFriendly(_unit, (*itr))) || (spells[i].targettype != TARGET_RANDOM_FRIEND && isHostile(_unit, (*itr)) && (*itr) != _unit)) && ((*itr)->GetTypeId()== TYPEID_UNIT || (*itr)->GetTypeId() == TYPEID_PLAYER) && (*itr)->GetInstanceID() == _unit->GetInstanceID()) // isAttackable(_unit, (*itr)) && 
 				{
-					UnitPointer RandomTarget = NULLUNIT;
+					Unit * RandomTarget = NULLUNIT;
 					RandomTarget = TO_UNIT(*itr);
 
 					if (RandomTarget->isAlive() && _unit->GetDistance2dSq(RandomTarget) >= mindist2cast*mindist2cast && _unit->GetDistance2dSq(RandomTarget) <= maxdist2cast*maxdist2cast && ((RandomTarget->GetHealthPct() >= minhp2cast && RandomTarget->GetHealthPct() <= maxhp2cast && spells[i].targettype == TARGET_RANDOM_FRIEND) || (_unit->GetAIInterface()->getThreatByPtr(RandomTarget) > 0 && isHostile(_unit, RandomTarget))))
@@ -1605,7 +1605,7 @@
 
 			size_t RandTarget = rand()%TargetTable.size();
 
-			UnitPointer  RTarget = TargetTable[RandTarget];
+			Unit *  RTarget = TargetTable[RandTarget];
 
 			if (!RTarget)
 				return;
@@ -1653,7 +1653,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION( VoidReaverAI, MoonScriptBossAI );
-    VoidReaverAI( CreaturePointer pCreature ) : MoonScriptBossAI( pCreature )
+    VoidReaverAI( Creature * pCreature ) : MoonScriptBossAI( pCreature )
     {
 		SpellDesc *pPounding = AddSpell( VOID_REAVER_POUNDING, Target_Self, 100, 0, 12 );
 		if ( pPounding != NULL )
@@ -1675,7 +1675,7 @@
 		mArcaneOrbTimer = INVALIDATE_TIMER;
 	} 
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		ParentClass::OnCombatStart( mTarget );
 		if ( mArcaneOrb != NULL )
@@ -1724,14 +1724,14 @@
 #define SOLARIUMPRIEST_GREATER_HEAL				38580	//Heals 23125 to 26875 any friendly target
 #define SOLARIUMPRIEST_HOLY_SMITE				31740	//Deals 553 to 747 holy damage
 
-bool Dummy_Solarian_WrathOfTheAstromancer(uint32 pEffectIndex, SpellPointer pSpell);
-void SpellFunc_Solarian_Disappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
-void SpellFunc_Solarian_Reappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+bool Dummy_Solarian_WrathOfTheAstromancer(uint32 pEffectIndex, Spell * pSpell);
+void SpellFunc_Solarian_Disappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
+void SpellFunc_Solarian_Reappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class HighAstromancerSolarianAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(HighAstromancerSolarianAI, MoonScriptBossAI);
-	HighAstromancerSolarianAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	HighAstromancerSolarianAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		//Initialize timers
 		mSplitTimer = mAgentsTimer = mSolarianTimer = INVALIDATE_TIMER;
@@ -1762,7 +1762,7 @@
 		AddEmote(Event_OnTargetDied, "For the Sunwell!", Text_Yell, 11138);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mSplitTimer = AddTimer(50000);	//First split after 50sec
 		ParentClass::OnCombatStart(pTarget);
@@ -1813,12 +1813,12 @@
 	float		mSpawnPositions[3][2];
 };
 
-bool Dummy_Solarian_WrathOfTheAstromancer(uint32 pEffectIndex, SpellPointer pSpell)
+bool Dummy_Solarian_WrathOfTheAstromancer(uint32 pEffectIndex, Spell * pSpell)
 {
-	UnitPointer Caster = pSpell->u_caster;
+	Unit * Caster = pSpell->u_caster;
 	if( !Caster ) return true;
 
-	UnitPointer Target = Caster->GetAIInterface()->GetNextTarget();
+	Unit * Target = Caster->GetAIInterface()->GetNextTarget();
 	if( !Target ) return true;
 
 	SpellEntry* SpellInfo = dbcSpell.LookupEntry(SOLARIAN_WRATH_OF_THE_ASTROMANCER_BOMB);
@@ -1829,7 +1829,7 @@
 	return true;
 }
 
-void SpellFunc_Solarian_Disappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Solarian_Disappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	HighAstromancerSolarianAI* Solarian = ( pCreatureAI ) ? (HighAstromancerSolarianAI*)pCreatureAI : NULL;
 	if( Solarian )
@@ -1846,7 +1846,7 @@
 	}
 }
 
-void SpellFunc_Solarian_Reappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Solarian_Reappear(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	HighAstromancerSolarianAI* Solarian = ( pCreatureAI ) ? (HighAstromancerSolarianAI*)pCreatureAI : NULL;
 	if( Solarian )
@@ -1863,7 +1863,7 @@
 class SolariumAgentAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(SolariumAgentAI, MoonScriptCreatureAI);
-    SolariumAgentAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    SolariumAgentAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		SetDespawnWhenInactive(true);	//despawn creature if it gets out of combat or dead
 		AggroNearestUnit();				//Aggro on spawn
@@ -1873,7 +1873,7 @@
 class SolariumPriestAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SolariumPriestAI, MoonScriptCreatureAI);
-	SolariumPriestAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	SolariumPriestAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SOLARIUMPRIEST_GREATER_HEAL, Target_WoundedFriendly, 20, 2, 0, 0, 40);
 		AddSpell(SOLARIUMPRIEST_HOLY_SMITE, Target_Current, 80, 2.5f, 0, 0, 40);
@@ -1885,7 +1885,7 @@
 class SolariumSpotLight : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SolariumSpotLight, MoonScriptCreatureAI);
-	SolariumSpotLight(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature){ SetCanEnterCombat(false); }
+	SolariumSpotLight(Creature * pCreature) : MoonScriptCreatureAI(pCreature){ SetCanEnterCombat(false); }
 };
 
 // Al'ar AI
@@ -1945,7 +1945,7 @@
 	SP_AI_Spell spells[7];
 	bool m_spellcheck[7];
 
-    AlarAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AlarAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		/************************ Waypoint Place ************************/
 
@@ -2032,7 +2032,7 @@
 		CastTime();
     }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount) 
+	void OnDamageTaken(Unit * mAttacker, float fAmount) 
 	{
 		if (!_unit->event_HasEvents()) {
 			RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2041,7 +2041,7 @@
 		}
 	}
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		FlameQuills = false;
 		Meteor = false;
@@ -2063,7 +2063,7 @@
 		_unit->SetUInt32Value(UNIT_FIELD_BASE_MANA,Phase);
 	}
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
 
@@ -2098,7 +2098,7 @@
 		Flying=false;lasttime=timer;
 	}
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		nDeath++;
 		if (nDeath==1)
@@ -2211,8 +2211,8 @@
 		CastSpell(5);
 		CastSpell(4);
 		if ((rand()%100)<2) {
-			UnitPointer target=GetRandomTarget();
-			CreaturePointer patch;
+			Unit * target=GetRandomTarget();
+			Creature * patch;
 			if (target!=NULL) {
 				patch =_unit->GetMapMgr()->GetInterface()->SpawnCreature(20602, target->GetPositionX(), target->GetPositionY(), target->GetPositionZ(), 0, true, false, _unit->GetUInt32Value(UNIT_FIELD_FACTIONTEMPLATE), 0);
 				if (patch!=NULL) {
@@ -2232,13 +2232,13 @@
 		}
 	}
 
-	UnitPointer GetRandomTarget()
+	Unit * GetRandomTarget()
 	{
 		for(Object::InRangeSet::iterator i = _unit->GetInRangeSetBegin(); i != _unit->GetInRangeSetEnd(); ++i)
 		{
 			if(isHostile(_unit, (*i)) && (*i)->GetInstanceID() == _unit->GetInstanceID())
 			{
-				UnitPointer RandomTarget = TO_UNIT(*i);
+				Unit * RandomTarget = TO_UNIT(*i);
 
 				if(RandomTarget->isAlive())
 					return RandomTarget;
@@ -2252,7 +2252,7 @@
 		if (spells[id].casttime>0) return;
 		if (_unit->GetCurrentSpell() != NULL) return;
 		
-		UnitPointer target = NULLUNIT;
+		Unit * target = NULLUNIT;
 		target = _unit->GetAIInterface()->GetNextTarget();
 		switch(spells[id].targettype)
 		{
@@ -2390,7 +2390,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    EmberAlarAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    EmberAlarAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -2406,7 +2406,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2418,11 +2418,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2430,13 +2430,13 @@
         RemoveAIUpdateEvent();
     }
 
-	UnitPointer GetAlar()
+	Unit * GetAlar()
 	{
 		for(Object::InRangeSet::iterator i = _unit->GetInRangeSetBegin(); i != _unit->GetInRangeSetEnd(); ++i)
 			{
 				if((*i)->GetTypeId() == TYPEID_UNIT && _unit->GetDistance2dSq((*i)) < 400000)
 				{
-					CreaturePointer creature=TO_CREATURE((*i));
+					Creature * creature=TO_CREATURE((*i));
 					if(creature->GetEntry() == 19514 && (*i)->GetInstanceID() == _unit->GetInstanceID())
 					{
 						return creature;
@@ -2446,13 +2446,13 @@
 		return NULLUNIT;
 	}
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 
 		_unit->CastSpell(_unit, spells[0].info, spells[0].instant);
 		CastTime();
 
-		UnitPointer Alar = NULLUNIT;
+		Unit * Alar = NULLUNIT;
 		//Alar=_unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 19514);
 
 		Alar=GetAlar();
@@ -2490,7 +2490,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    PatchAlarAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    PatchAlarAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		nrspells = 1;
 		for(int i=0;i<nrspells;i++)
@@ -2512,7 +2512,7 @@
 		_unit->Despawn(120000,0);
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		CastTime();
 		RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
@@ -2525,11 +2525,11 @@
 			spells[i].casttime = spells[i].cooldown;
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -2538,7 +2538,7 @@
     }
 
 	
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		CastTime();
     }
@@ -2589,7 +2589,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(DarkenerAI, MoonScriptCreatureAI)
-	DarkenerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	DarkenerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(DARKENER_PSYCHIC_BLOW, Target_Current, 10, 0, 20);
 		AddSpell(DARKENER_SILENCE, Target_Current, 10, 0, 15);
@@ -2600,7 +2600,7 @@
 		mGazeSwitchTimer = 0;
 	}
 
-    void OnCombatStart(UnitPointer  mTarget)
+    void OnCombatStart(Unit *  mTarget)
     {
 		ParentClass::OnCombatStart(mTarget);
 		SetCanEnterCombat(true);
@@ -2609,7 +2609,7 @@
 		mGazeSwitchTimer = AddTimer((RandomUInt(4) + 8) * 1000);
     }
 
-	void OnCombatStop(UnitPointer  mTarget)
+	void OnCombatStop(Unit *  mTarget)
 	{
 		ParentClass::OnCombatStop(mTarget);
 		mCurrentTarget = NULLUNIT;
@@ -2620,7 +2620,7 @@
 		}
 	}
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
 	{
 		SwitchTarget();
 	}
@@ -2646,7 +2646,7 @@
 		if (mCurrentTarget != NULL)
 		{
 			_unit->GetAIInterface()->modThreatByPtr(mCurrentTarget, 1000000);
-			PlayerPointer pPlayer = TO_PLAYER(mCurrentTarget);
+			Player * pPlayer = TO_PLAYER(mCurrentTarget);
 			char msg[256];
 			snprintf((char*)msg, 256, "%s sets eyes on %s", _unit->creature_info->Name, pPlayer->GetName());
 			_unit->SendChatMessageAlternateEntry(CN_DARKENER, CHAT_MSG_MONSTER_EMOTE, LANG_UNIVERSAL, msg);
@@ -2658,7 +2658,7 @@
 	}
 
 	uint32	mGazeSwitchTimer;
-	UnitPointer	mCurrentTarget;
+	Unit *	mCurrentTarget;
 };
 
 // Lord Sanguinar AI (2nd advisor)
@@ -2669,7 +2669,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(SanguinarAI, MoonScriptCreatureAI)
-	SanguinarAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	SanguinarAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SANGUINAR_BELLOWING, Target_Self, 100, 0, 30);
 		AddEmote(Event_OnCombatStart, "Blood for blood!", Text_Yell, 11152);
@@ -2677,13 +2677,13 @@
 		SetCanEnterCombat(false);
 	}
 
-    void OnCombatStart(UnitPointer  mTarget)
+    void OnCombatStart(Unit *  mTarget)
     {
 		ParentClass::OnCombatStart(mTarget);
 		SetCanEnterCombat(true);
     }
 
-	void OnCombatStop(UnitPointer  mTarget)
+	void OnCombatStop(Unit *  mTarget)
 	{
 		ParentClass::OnCombatStop(mTarget);
 
@@ -2704,7 +2704,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(CapernianAI, MoonScriptCreatureAI);
-	CapernianAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	CapernianAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(CAPERNIAN_CONFLAGRATION, Target_RandomPlayer, 7, 0, 10, 0, 30, true);
 		AddSpell(CAPERNIAN_FIREBALL, Target_Current, 73, 2, 0);
@@ -2714,7 +2714,7 @@
 		SetCanEnterCombat(false);
 	}
 
-    void OnCombatStart(UnitPointer  mTarget)
+    void OnCombatStart(Unit *  mTarget)
     {
 		ParentClass::OnCombatStart(mTarget);
 		SetCanEnterCombat(true);
@@ -2726,7 +2726,7 @@
 		}
     }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		ParentClass::OnCombatStop(mTarget);
 
@@ -2740,13 +2740,13 @@
 	{
 		SetBehavior(Behavior_Default);
 		SetCanMove(true);
-		UnitPointer pClosestTarget = GetBestPlayerTarget(TargetFilter_Closest);
+		Unit * pClosestTarget = GetBestPlayerTarget(TargetFilter_Closest);
 		if (pClosestTarget != NULL && GetRangeToUnit(pClosestTarget) <= 6.0f)
 		{
 			CastSpellNowNoScheduling(mArcaneBurst);
 		}
 
-		UnitPointer pTarget = _unit->GetAIInterface()->GetNextTarget();
+		Unit * pTarget = _unit->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL && GetRangeToUnit(pTarget) <= 30.0f)
 		{
 			ParentClass::AIUpdate();
@@ -2770,7 +2770,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(TelonicusAI, MoonScriptCreatureAI);
-	TelonicusAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	TelonicusAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(TELONICUS_BOMB, Target_RandomPlayerDestination, 10, 1.5f, 15, 0, 30);
 		AddSpell(TELONICUS_REMOTE_TOY, Target_RandomPlayer, 10, 0, 15, 0, 30);
@@ -2779,13 +2779,13 @@
 		SetCanEnterCombat(false);
 	}
 
-    void OnCombatStart(UnitPointer  mTarget)
+    void OnCombatStart(Unit *  mTarget)
     {
 		ParentClass::OnCombatStart(mTarget);
 		SetCanEnterCombat(true);
     }
 
-	void OnCombatStop(UnitPointer  mTarget)
+	void OnCombatStop(Unit *  mTarget)
 	{
 		ParentClass::OnCombatStop(mTarget);
 
@@ -2805,7 +2805,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(FlameStrikeAI, MoonScriptCreatureAI);
-	FlameStrikeAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	FlameStrikeAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		ApplyAura(FLAME_STRIKE_TRIGGER_FLAME_STRIKE_EFFECT);
 		RegisterAIUpdateEvent(5000);
@@ -2815,7 +2815,7 @@
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
 	}
 	
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
 		RemoveAura(FLAME_STRIKE_TRIGGER_FLAME_STRIKE_EFFECT);
@@ -2842,10 +2842,10 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(PhoenixAI, MoonScriptCreatureAI);
-	PhoenixAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	PhoenixAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		RegisterAIUpdateEvent(1000);
-		UnitPointer pTarget = GetBestPlayerTarget();
+		Unit * pTarget = GetBestPlayerTarget();
 		if (pTarget != NULL)
 		{
 			_unit->GetAIInterface()->AttackReaction(pTarget, 500, 0);
@@ -2854,14 +2854,14 @@
 		mBurnTimer = AddTimer(3000);
 	}
 
-    void OnCombatStart(UnitPointer  mTarget) {}
+    void OnCombatStart(Unit *  mTarget) {}
 
-	void OnCombatStop(UnitPointer  pTarget) {}
+	void OnCombatStop(Unit *  pTarget) {}
 
-	void OnTargetDied(UnitPointer  mTarget)
+	void OnTargetDied(Unit *  mTarget)
 	{
 		ParentClass::OnTargetDied(mTarget);
-		UnitPointer pTarget = GetBestPlayerTarget(TargetFilter_Closest);
+		Unit * pTarget = GetBestPlayerTarget(TargetFilter_Closest);
 		if (pTarget != NULL)
 		{
 			_unit->GetAIInterface()->AttackReaction(pTarget, 500);
@@ -2873,7 +2873,7 @@
 		}
 	}
 	
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
 		ApplyAura(PHOENIX_REBIRTH);
@@ -2911,7 +2911,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(PhoenixEggAI, MoonScriptCreatureAI);
-	PhoenixEggAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	PhoenixEggAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		RegisterAIUpdateEvent(15000);
 		SetCanEnterCombat(false);
@@ -2919,7 +2919,7 @@
 		SetCanMove(false);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
 		Despawn(500);
@@ -2946,20 +2946,20 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(WeaponsAI, MoonScriptCreatureAI);
-	WeaponsAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	WeaponsAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		_unit->m_noRespawn = true;
 
-		UnitPointer pTarget = GetBestPlayerTarget();
+		Unit * pTarget = GetBestPlayerTarget();
 		if (pTarget != NULL)
 		{
 			_unit->GetAIInterface()->AttackReaction(pTarget, 200, 0);
 		}
 	}
 
-	void OnCombatStop(UnitPointer  mTarget)
+	void OnCombatStop(Unit *  mTarget)
 	{
-		UnitPointer pTarget = GetBestPlayerTarget();
+		Unit * pTarget = GetBestPlayerTarget();
 		if (pTarget != NULL)
 		{
 			_unit->GetAIInterface()->AttackReaction(pTarget, 500);
@@ -3059,14 +3059,14 @@
 	PHASE_ADV_FIGHT,
 };
 
-void SpellFunc_KaelThasArcaneDisruption(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
-void SpellFunc_KaelThasFlameStrike(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_KaelThasArcaneDisruption(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
+void SpellFunc_KaelThasFlameStrike(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class KaelThasAI : public MoonScriptBossAI
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(KaelThasAI, MoonScriptBossAI);
-	KaelThasAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	KaelThasAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		for (int i = 1; i < 4; ++i)
 		{
@@ -3111,7 +3111,7 @@
 
 		for (int i = 0; i < 4; ++i)
 		{
-			CreaturePointer pCreature = TO_CREATURE(ForceCreatureFind(Advisors[i].mAddition, Advisors[i].mX, Advisors[i].mY, Advisors[i].mZ));
+			Creature * pCreature = TO_CREATURE(ForceCreatureFind(Advisors[i].mAddition, Advisors[i].mX, Advisors[i].mY, Advisors[i].mZ));
 			if (pCreature != NULL)
 			{
 				pCreature->Despawn(0, 0);
@@ -3121,7 +3121,7 @@
 		}
 		for (int i = 0; i < 2; ++i)
 		{
-			GameObjectPointer pGameobject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Gates[i].mX, Gates[i].mY, Gates[i].mZ, Gates[i].mAddition);
+			GameObject * pGameobject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Gates[i].mX, Gates[i].mY, Gates[i].mZ, Gates[i].mAddition);
 			if (pGameobject != NULL && pGameobject->GetState() == 1)
 			{
 				pGameobject->SetState(0);
@@ -3129,7 +3129,7 @@
 		}
 	}
 
-    void OnCombatStart(UnitPointer  mTarget)
+    void OnCombatStart(Unit *  mTarget)
     {
 		_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_9);
 		SetAIUpdateFreq(24000);
@@ -3139,7 +3139,7 @@
 
 		for (int i = 0; i < 2; ++i)
 		{
-			GameObjectPointer pGameobject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Gates[i].mX, Gates[i].mY, Gates[i].mZ, Gates[i].mAddition);
+			GameObject * pGameobject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Gates[i].mX, Gates[i].mY, Gates[i].mZ, Gates[i].mAddition);
 			if (pGameobject != NULL && pGameobject->GetState() == 0)
 			{
 				pGameobject->SetState(1);
@@ -3151,7 +3151,7 @@
 		mAdvCoords.clear();
    }
 
-	void OnCombatStop(UnitPointer mTarget)
+	void OnCombatStop(Unit * mTarget)
 	{
 		SetCanMove(true);
 		ParentClass::OnCombatStop(mTarget);
@@ -3161,7 +3161,7 @@
 		{
 			for (int i = 0; i < 4; ++i)
 			{
-				CreaturePointer pCreature = TO_CREATURE(ForceCreatureFind(Advisors[i].mAddition, Advisors[i].mX, Advisors[i].mY, Advisors[i].mZ));
+				Creature * pCreature = TO_CREATURE(ForceCreatureFind(Advisors[i].mAddition, Advisors[i].mX, Advisors[i].mY, Advisors[i].mZ));
 				if (pCreature != NULL)
 				{
 					pCreature->SafeDelete();
@@ -3173,7 +3173,7 @@
 
 		for (int i = 0; i < 2; ++i)
 		{
-			GameObjectPointer pGameobject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Gates[i].mX, Gates[i].mY, Gates[i].mZ, Gates[i].mAddition);
+			GameObject * pGameobject = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(Gates[i].mX, Gates[i].mY, Gates[i].mZ, Gates[i].mAddition);
 			if (pGameobject != NULL && pGameobject->GetState() == 1)
 			{
 				pGameobject->SetState(0);
@@ -3206,12 +3206,12 @@
 		mAdvisorPhase = PHASE_ATTACK_COMMAND;
 	}
 
-	void SendAdvisorToFight(CreaturePointer pCreature)
+	void SendAdvisorToFight(Creature * pCreature)
 	{
 		pCreature->GetAIInterface()->SetAllowedToEnterCombat(true);
 		pCreature->SetUInt64Value(UNIT_FIELD_FLAGS, 0);
 
-		UnitPointer pTarget = GetBestPlayerTarget();
+		Unit * pTarget = GetBestPlayerTarget();
 		if (pTarget != NULL)
 		{
 			pCreature->GetAIInterface()->AttackReaction(pTarget, 200, 0);
@@ -3221,7 +3221,7 @@
 		mAdvisorPhase = PHASE_ADV_FIGHT;
 	}
 
-	void CheckAdvisorState(CreaturePointer pCreature)
+	void CheckAdvisorState(Creature * pCreature)
 	{
 		if (!pCreature->isAlive())
 		{
@@ -3244,7 +3244,7 @@
 		if (GetPhase() < 5)
 		{
 			uint32 i = GetPhase() > 0 ? GetPhase() - 1 : 0;
-			CreaturePointer pCreature = TO_CREATURE(ForceCreatureFind(Advisors[i].mAddition, Advisors[i].mX, Advisors[i].mY, Advisors[i].mZ));
+			Creature * pCreature = TO_CREATURE(ForceCreatureFind(Advisors[i].mAddition, Advisors[i].mX, Advisors[i].mY, Advisors[i].mZ));
 			if (pCreature == NULL || (!pCreature->isAlive() && mAdvisorPhase != PHASE_ADV_FIGHT))
 			{
 				Coords pCoords;
@@ -3299,7 +3299,7 @@
 					if (mAdvCoords.size() <= (size_t)i)
 						break;
 
-					CreaturePointer pCreature = TO_CREATURE(ForceCreatureFind(mAdvCoords[i].mAddition, mAdvCoords[i].mX, mAdvCoords[i].mY, mAdvCoords[i].mZ));
+					Creature * pCreature = TO_CREATURE(ForceCreatureFind(mAdvCoords[i].mAddition, mAdvCoords[i].mX, mAdvCoords[i].mY, mAdvCoords[i].mZ));
 					if (pCreature != NULL && !pCreature->isAlive())
 					{
 						pCreature->Despawn(0, 0);
@@ -3394,7 +3394,7 @@
 		}
 	}
 
-	UnitPointer GetRandomPlayer()
+	Unit * GetRandomPlayer()
 	{
 		return GetBestPlayerTarget(TargetFilter_NotCurrent);
 	}
@@ -3419,13 +3419,13 @@
 	std::vector<Coords>	mAdvCoords;
 };
 
-void SpellFunc_KaelThasArcaneDisruption(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_KaelThasArcaneDisruption(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	KaelThasAI *KaelThas = (pCreatureAI) ? (KaelThasAI*)pCreatureAI : NULL;
 	if (KaelThas != NULL)
 	{
 		KaelThas->CastSpellNowNoScheduling(KaelThas->mArcaneDisruption);
-		UnitPointer pMainTarget = KaelThas->GetUnit()->GetAIInterface()->GetNextTarget();
+		Unit * pMainTarget = KaelThas->GetUnit()->GetAIInterface()->GetNextTarget();
 		if (pTarget != NULL && pMainTarget != NULL)
 		{
 			KaelThas->GetUnit()->GetAIInterface()->SetNextTarget(pTarget);
@@ -3435,13 +3435,13 @@
 	}
 }
 
-void SpellFunc_KaelThasFlameStrike(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_KaelThasFlameStrike(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	KaelThasAI *KaelThas = (pCreatureAI) ? (KaelThasAI*)pCreatureAI : NULL;
 	if (KaelThas != NULL && pTarget != NULL)
 	{
 		KaelThas->GetUnit()->CastSpell(pTarget, KAELTHAS_FLAME_STRIKE_SUMMON, true);
-		CreaturePointer pFriendlyTrigger = TO_CREATURE(KaelThas->ForceCreatureFind(CN_FLAME_STRIKE_TRIGGER));
+		Creature * pFriendlyTrigger = TO_CREATURE(KaelThas->ForceCreatureFind(CN_FLAME_STRIKE_TRIGGER));
 		if (pFriendlyTrigger != NULL && pFriendlyTrigger->IsPet())
 		{
 			pFriendlyTrigger->Despawn(0, 0);
Index: Trunk/src/InstanceScripts/Raid_TheObsidianSanctum.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_TheObsidianSanctum.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_TheObsidianSanctum.cpp	(working copy)
@@ -103,7 +103,7 @@
 class SartharionAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SartharionAI, MoonScriptBossAI);
-	SartharionAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	SartharionAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(SARTHARION_CLEAVE, Target_Current, 24, 0, 8 );
 
@@ -128,7 +128,7 @@
 		AddEmote(Event_OnCombatStart, "It is my charge to watch over these eggs. I will see you burn before any harm comes to them!", Text_Yell, 14093);
 	};
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		i_drakeCount = CheckDrakes();
 		if( i_drakeCount >= 1 ) //HardMode!
@@ -179,7 +179,7 @@
 			};
 			
 			uint32 RndSide = rand()%2;
-			CreaturePointer Tsunami = NULLCREATURE;
+			Creature * Tsunami = NULLCREATURE;
 
 			for(int i = 0; i < 3; ++i)
 			{
@@ -288,7 +288,7 @@
 		b_vesperon = false;
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		Emote( "Such is the price... of failure...", Text_Yell, 14107);
 		
@@ -306,14 +306,14 @@
 	int32 mTsunamiTimer, mAddTimer, mDrakeTimer;
 	int	i_drakeCount;
 	
-	CreaturePointer Tenebron, Vesperon, Shadron;
+	Creature * Tenebron, Vesperon, Shadron;
 	SpellDesc* mFlame;
 };	
 
 class TsunamiAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(TsunamiAI, MoonScriptBossAI);
-	TsunamiAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	TsunamiAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{};
 	
 	void OnLoad()
@@ -349,7 +349,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(CyclonAI, MoonScriptBossAI);
-	CyclonAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	CyclonAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{};
 
 	void OnLoad()
@@ -383,7 +383,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(LavaBlazeAI, MoonScriptBossAI);
-	LavaBlazeAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	LavaBlazeAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{};
 
 	void OnLoad()
@@ -392,12 +392,12 @@
 		ParentClass::OnLoad();
 	};
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		Despawn( 1000, 0 );
 	};
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		Despawn( 1000, 0 );
 	};
Index: Trunk/src/InstanceScripts/Raid_Ulduar.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_Ulduar.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_Ulduar.cpp	(working copy)
@@ -21,7 +21,7 @@
 
 
 // Ulduar Teleporter
-void UlduarTeleporter::GossipHello(ObjectPointer  pObject, PlayerPointer Plr, bool AutoSend)
+void UlduarTeleporter::GossipHello(Object *  pObject, Player * Plr, bool AutoSend)
 {
 	GossipMenu *Menu;
     objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 0, Plr);
@@ -34,7 +34,7 @@
 		Menu->SendTo(Plr);
 };
 
-void UlduarTeleporter::GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char *Code)
+void UlduarTeleporter::GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char *Code)
 {
 	switch(IntId)
 	{
Index: Trunk/src/InstanceScripts/Raid_Ulduar.h
===================================================================
--- Trunk/src/InstanceScripts/Raid_Ulduar.h	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_Ulduar.h	(working copy)
@@ -24,10 +24,10 @@
 class SCRIPT_DECL UlduarTeleporter : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer  Plr, bool AutoSend);
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer Plr, uint32 Id, uint32 IntId, const char * Code);
+	void GossipHello(Object * pObject, Player *  Plr, bool AutoSend);
+	void GossipSelectOption(Object * pObject, Player * Plr, uint32 Id, uint32 IntId, const char * Code);
 
-	void GossipEnd(ObjectPointer  pObject, PlayerPointer Plr)
+	void GossipEnd(Object *  pObject, Player * Plr)
 	{
 		GossipScript::GossipEnd(pObject, Plr);
 	};
Index: Trunk/src/InstanceScripts/Raid_WorldBosses.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_WorldBosses.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_WorldBosses.cpp	(working copy)
@@ -53,7 +53,7 @@
     SP_AI_Spell spells[6];
     bool m_spellcheck[6];
 
-    EmerissAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    EmerissAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 6;
         for(int i=0;i<nrspells;i++)
@@ -113,14 +113,14 @@
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Hope is a DISEASE of the soul! This land shall wither and die!");
         RegisterAIUpdateEvent(1000); //Attack time is to slow on this boss
         CastTime();
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         if(_unit->GetHealthPct() > 0)
         {
@@ -130,7 +130,7 @@
         }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -144,7 +144,7 @@
             spells[i].casttime = spells[i].cooldown;
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -152,7 +152,7 @@
     void AIUpdate()
     {
         // M4ksiu: Someone who wrote this hadn't thought about it much, so it should be rewritten
-		UnitPointer Target = _unit->GetAIInterface()->GetNextTarget();
+		Unit * Target = _unit->GetAIInterface()->GetNextTarget();
         if ( Target != NULLUNIT && !_unit->isInRange( Target, 20.0f ) )
             _unit->CastSpell( Target, TELEPORT, true );
 
@@ -173,7 +173,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             for(int i=0;i<nrspells;i++)
             {
                 spells[i].casttime--;
@@ -244,7 +244,7 @@
     SP_AI_Spell spells[7];
     bool m_spellcheck[7];
 
-    TaerarAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TaerarAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 7;
         for(int i=0;i<nrspells;i++)
@@ -304,7 +304,7 @@
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         Shades = false;
         Shade_timer = 0;
@@ -313,7 +313,7 @@
         CastTime();
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         if(_unit->GetHealthPct() > 0)
         {
@@ -321,7 +321,7 @@
         }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         Shades = false;
         Shade_timer = 0;
@@ -337,14 +337,14 @@
             spells[i].casttime = spells[i].cooldown;
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
        Shades = false;
        Shade_timer = 0;
     }
 
-    void SummonShades(UnitPointer mTarget)
+    void SummonShades(Unit * mTarget)
     {
         Summoned = _unit->GetMapMgr()->GetInterface()->SpawnCreature(CN_SHADESTAERAR, mTarget->GetPositionX(), mTarget->GetPositionY(), mTarget->GetPositionZ(), 0,true, false, _unit->GetUInt32Value(UNIT_FIELD_FACTIONTEMPLATE), 50);
         Summoned->GetAIInterface()->SetNextTarget(mTarget);
@@ -353,7 +353,7 @@
     void AIUpdate()
     {
 		// M4ksiu: Someone who wrote this hadn't thought about it much, so it should be rewritten
-		UnitPointer Target = _unit->GetAIInterface()->GetNextTarget();
+		Unit * Target = _unit->GetAIInterface()->GetNextTarget();
         if ( Target != NULLUNIT && !_unit->isInRange( Target, 20.0f ) )
             _unit->CastSpell( Target, TELEPORT, true );
 
@@ -399,7 +399,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             for(int i=0;i<nrspells;i++)
             {
                 spells[i].casttime--;
@@ -446,7 +446,7 @@
 
 protected:
 
-    CreaturePointer Summoned;
+    Creature * Summoned;
     bool Shades;
     int Shade_timer;
     int nrspells;
@@ -465,7 +465,7 @@
     SP_AI_Spell spells[2];
     bool m_spellcheck[2];
 
-    ShadeofTaerarAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ShadeofTaerarAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 2;
         for(int i=0;i<nrspells;i++)
@@ -489,18 +489,18 @@
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         //You died kek
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->Despawn(15,0);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -515,7 +515,7 @@
             spells[i].casttime = spells[i].cooldown;
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
        CastTime();
@@ -532,7 +532,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             for(int i=0;i<nrspells;i++)
             {
                 spells[i].casttime--;
@@ -603,7 +603,7 @@
     SP_AI_Spell spells[6];
     bool m_spellcheck[6];
 
-    YsondreAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    YsondreAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 6;
         for(int i=0;i<nrspells;i++)
@@ -656,14 +656,14 @@
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "The strands of LIFE have been severed! The Dreamers must be avenged!");
         RegisterAIUpdateEvent(1000); //Attack time is to slow on this boss
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         if(_unit->GetHealthPct() > 0)
         {
@@ -671,7 +671,7 @@
         }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         CastTime();
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -685,7 +685,7 @@
             spells[i].casttime = spells[i].cooldown;
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         CastTime();
         RemoveAIUpdateEvent();
@@ -694,7 +694,7 @@
     void AIUpdate()
     {
 		// M4ksiu: Someone who wrote this hadn't thought about it much, so it should be rewritten
-		UnitPointer Target = _unit->GetAIInterface()->GetNextTarget();
+		Unit * Target = _unit->GetAIInterface()->GetNextTarget();
         if ( Target != NULLUNIT && !_unit->isInRange( Target, 20.0f ) )
             _unit->CastSpell( Target, TELEPORT, true );
 
@@ -722,7 +722,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             for(int i=0;i<nrspells;i++)
             {
                 spells[i].casttime--;
@@ -784,7 +784,7 @@
     SP_AI_Spell spells[1];
     bool m_spellcheck[1];
 
-    DementedDruidSpiritAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DementedDruidSpiritAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 1;
         for(int i=0;i<nrspells;i++)
@@ -801,18 +801,18 @@
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CastTime();
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         //You died kek
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         CastTime();
         _unit->Despawn(15,0);
@@ -827,7 +827,7 @@
             spells[i].casttime = spells[i].cooldown;
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         CastTime();
         RemoveAIUpdateEvent();
@@ -844,7 +844,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             for(int i=0;i<nrspells;i++)
             {
                 spells[i].casttime--;
@@ -912,7 +912,7 @@
     SP_AI_Spell spells[6];
     bool m_spellcheck[6];
 
-    LethonAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LethonAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 6;
         for(int i=0;i<nrspells;i++)
@@ -964,7 +964,7 @@
         spells[5].attackstoptimer = 1000;
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         bool Shade1 = false;
         bool Shade2 = false;
@@ -974,7 +974,7 @@
         RegisterAIUpdateEvent(1000); //Attack time is to slow on this boss
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         if(_unit->GetHealthPct() > 0)
         {
@@ -982,7 +982,7 @@
         }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         bool Shade1 = false;
         bool Shade2 = false;
@@ -999,7 +999,7 @@
             spells[i].casttime = spells[i].cooldown;
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         bool Shade1 = false;
         bool Shade2 = false;
@@ -1011,9 +1011,9 @@
     void AIUpdate()
 
     {
-        std::list<PlayerPointer> mTargets;
+        std::list<Player *> mTargets;
         // M4ksiu: Someone who wrote this hadn't thought about it much, so it should be rewritten
-		UnitPointer Target = _unit->GetAIInterface()->GetNextTarget();
+		Unit * Target = _unit->GetAIInterface()->GetNextTarget();
         if ( Target != NULLUNIT && !_unit->isInRange( Target, 20.0f ) )
             _unit->CastSpell( Target, TELEPORT, true );
 
@@ -1030,7 +1030,7 @@
                     Shade1 = true;
             }
             // Summon a spirit for each player  
-            std::list<PlayerPointer>::iterator itr = mTargets.begin();
+            std::list<Player *>::iterator itr = mTargets.begin();
             for(; itr != mTargets.end(); ++itr)
             {        
                 _unit->CastSpellAoF((*itr)->GetPositionX(),(*itr)->GetPositionY(),(*itr)->GetPositionZ(), spells[4].info, spells[4].instant);
@@ -1048,7 +1048,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             for(int i=0;i<nrspells;i++)
             {
                 spells[i].casttime--;
@@ -1112,23 +1112,23 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(ShadeofLethonAI);
 
-    ShadeofLethonAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ShadeofLethonAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         CheckDist();
         RegisterAIUpdateEvent(1000); //they cant attack anyway, update every sec instead
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         //Will nevah happenz! haha
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -1136,7 +1136,7 @@
         _unit->Despawn(15,0);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         RemoveAIUpdateEvent();
     }
@@ -1144,8 +1144,8 @@
     void CheckDist()
     {
         float distance;
-        std::list<CreaturePointer> mTargets;
-        std::list<CreaturePointer>::iterator itr = mTargets.begin();
+        std::list<Creature *> mTargets;
+        std::list<Creature *>::iterator itr = mTargets.begin();
         for(; itr != mTargets.end(); ++itr)
         {
             if((*itr)->GetGUID() == CN_LETHON)
@@ -1207,7 +1207,7 @@
     SP_AI_Spell spells[7];
     bool m_spellcheck[7];
 
-    KruulAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    KruulAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 7;
         for(int i=0;i<nrspells;i++)
@@ -1266,7 +1266,7 @@
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         hounds_timer = 45;
         enrage = 0;
@@ -1294,7 +1294,7 @@
         CastTime();
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         if(_unit->GetHealthPct() > 0)
         {
@@ -1303,7 +1303,7 @@
         }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         hounds_timer = 45;
         enrage = 0;
@@ -1319,7 +1319,7 @@
             spells[i].casttime = spells[i].cooldown;
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         hounds_timer = 45;
         enrage = 0;
@@ -1328,7 +1328,7 @@
         CastTime();
     }
 
-    void SummonHounds(UnitPointer mTarget)
+    void SummonHounds(Unit * mTarget)
     {
         Rand = rand()%15;
         switch (rand()%2)
@@ -1375,7 +1375,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             for(int i=0;i<nrspells;i++)
             {
                 spells[i].casttime--;
@@ -1427,7 +1427,7 @@
     int RandY;
     int hounds_timer;
     int enrage;
-    CreaturePointer Summoned;
+    Creature * Summoned;
     int nrspells;
 };
 
@@ -1458,7 +1458,7 @@
     SP_AI_Spell spells[8];
     bool m_spellcheck[8];
 
-    KazzakAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    KazzakAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 8;
         for(int i=0;i<nrspells;i++)
@@ -1529,7 +1529,7 @@
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         enrage = 0;
         int RandomSpeach;
@@ -1548,7 +1548,7 @@
         CastTime();
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         if(_unit->GetHealthPct() > 0)
         {
@@ -1569,7 +1569,7 @@
         }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         enrage = 0;
         _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "The universe will be remade.");
@@ -1585,7 +1585,7 @@
             spells[i].casttime = spells[i].cooldown;
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         enrage = 0;
         _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "");
@@ -1638,7 +1638,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             for(int i=0;i<nrspells;i++)
             {
                 spells[i].casttime--;
@@ -1707,7 +1707,7 @@
     SP_AI_Spell spells[5];
     bool m_spellcheck[5];
 
-    AzuregosAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    AzuregosAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 5;
         for(int i=0;i<nrspells;i++)
@@ -1753,7 +1753,7 @@
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL,"This Place is under my Protection! The mysteries of the arcane shall remain untouched.");
         masstele = 60;
@@ -1761,7 +1761,7 @@
         CastTime();
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         if(_unit->GetHealthPct() > 0)
         {
@@ -1770,7 +1770,7 @@
         }
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         masstele = 60;
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1779,7 +1779,7 @@
         CastTime();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         masstele = 60;
         RemoveAIUpdateEvent();
@@ -1815,7 +1815,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             for(int i=0;i<nrspells;i++)
             {
                 spells[i].casttime--;
@@ -1885,7 +1885,7 @@
     SP_AI_Spell spells[6];
     bool m_spellcheck[6];
 
-    DoomwalkerAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DoomwalkerAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 6;
         for(int i=0;i<nrspells;i++)
@@ -1938,7 +1938,7 @@
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         enraged = false;
         _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Do not proceed. You will be eliminated.");
@@ -1947,7 +1947,7 @@
         CastTime();
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
         if(_unit->GetHealthPct() > 0)
         {
@@ -1971,7 +1971,7 @@
            _unit->CastSpell(mTarget, spells[1].info, spells[1].instant);
         }
     }
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->RemoveAura(AURA_OF_DEATH);
         enraged = false;
@@ -1981,7 +1981,7 @@
         CastTime();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         _unit->RemoveAura(AURA_OF_DEATH);
         enraged = false;
@@ -2015,7 +2015,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             int RandomSpeach;
             RandomSpeach=rand()%2;
             for(int i=0;i<nrspells;i++)
@@ -2113,7 +2113,7 @@
     SP_AI_Spell spells[3];
     bool m_spellcheck[3];
 
-    TeremusAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    TeremusAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
         nrspells = 3;
         for(int i=0;i<nrspells;i++)
@@ -2141,17 +2141,17 @@
 
     }
 
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(1000);
         CastTime();
     }
 
-    void OnTargetDied(UnitPointer mTarget)
+    void OnTargetDied(Unit * mTarget)
     {
 
     }
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -2159,7 +2159,7 @@
         CastTime();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
         RemoveAIUpdateEvent();
         CastTime();
@@ -2183,7 +2183,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
             float comulativeperc = 0;
-            UnitPointer target = NULLUNIT;
+            Unit * target = NULLUNIT;
             int RandomSpeach;
             RandomSpeach=rand()%2;
             for(int i=0;i<nrspells;i++)
Index: Trunk/src/InstanceScripts/Raid_ZulAman.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_ZulAman.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_ZulAman.cpp	(working copy)
@@ -46,7 +46,7 @@
 class NalorakkAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(NalorakkAI, MoonScriptBossAI);
-	NalorakkAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	NalorakkAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddPhaseSpell(1, AddSpell(NALORAKK_BRUTAL_SWIPE, Target_Current, 2, 0, 35));
 		AddPhaseSpell(1, AddSpell(NALORAKK_MANGLE, Target_Current, 12, 0, 20));
@@ -67,21 +67,21 @@
 		Morph = AddSpell(42377, Target_Self, 0, 0, 0, 0, 0, false, "You call on da beast, you gonna get more dan you bargain for!", Text_Yell, 12072);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		// 45 Seconds until switch to Bear Form
 		MorphTimer = AddTimer(45000);
 		ParentClass::OnCombatStart(pTarget);
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		// On leaving combat he changes back to a troll
 		SetDisplayId(21631);
 		ParentClass::OnCombatStop(pTarget);
 	}
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		// On death he changes back to a troll
 		SetDisplayId(21631);
@@ -132,7 +132,7 @@
 class AKILZONAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(AKILZONAI, MoonScriptBossAI);
-    AKILZONAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+    AKILZONAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
     {
 		AddSpell(AKILZON_STATIC_DISRUPTION, Target_Self, 2, 0, 60);
 		AddSpell(AKILZON_CALL_LIGHTING, Target_Current, 2, 0, 0);
@@ -145,7 +145,7 @@
 		AddEmote(Event_OnDied, "You can't... kill... me spirit!", Text_Yell, 12019);
     }
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		// 2 Minute timer till Soaring Eagles are spawned
 		timesummon = AddTimer(120000);
@@ -200,7 +200,7 @@
 class HALAZZIAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(HALAZZIAI, MoonScriptBossAI);
-    HALAZZIAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+    HALAZZIAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
     {
 		AddPhaseSpell(1, AddSpell(HALAZZI_SABER_LASH, Target_Destination, 0.5, 0, 0, 0, 0, false, "Me gonna carve ya now!", Text_Yell, 12023));
 
@@ -221,7 +221,7 @@
 		AddEmote(Event_OnDied, "Chaga... choka'jinn.", Text_Yell, 12028);
 	}
 	
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		TotemTimer = AddTimer(5000); // Just to make the Timer ID
 		SplitCount = 0;
@@ -231,13 +231,13 @@
 		ParentClass::OnCombatStart(pTarget);
 	}
 
-	void OnCombatStop(UnitPointer pTarget)
+	void OnCombatStop(Unit * pTarget)
 	{
 		Merge();
 		ParentClass::OnCombatStop(pTarget);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if(GetPhase() == 2) // Halazzi Can NOT die during phase 2 unless a player can do 48k damage
 		{
@@ -335,7 +335,7 @@
 		SetPhase(1);
 	}
 
-	CreaturePointer Lynx;
+	Creature * Lynx;
 	SpellDesc* Transfigure;
 	int32 TotemTimer;
 	int32 CurrentHealth;
@@ -346,7 +346,7 @@
 class LynxSpiritAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(LynxSpiritAI, MoonScriptCreatureAI);
-    LynxSpiritAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    LynxSpiritAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		// Lynx Flurry
 		AddSpell(43290, Target_Self, 15, 0, 8);
@@ -381,7 +381,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    JANALAIAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    JANALAIAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 			for(int i=0;i<nrspells;i++)
 			{
@@ -416,7 +416,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		nrspells = 2;
 		spmin = 0;
@@ -427,7 +427,7 @@
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 			if (_unit->GetHealthPct() > 0)	
 		{
@@ -448,7 +448,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		nrspells = 2;
 		spmin = 0;
@@ -458,7 +458,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Zul'jin... got a surprise for you...");
 		_unit->PlaySoundToSet(12038);
@@ -493,7 +493,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=spmin;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -558,7 +558,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    HEXLORDMALACRASSAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    HEXLORDMALACRASSAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 			nrspells = 2;
 			for(int i=0;i<nrspells;i++)
@@ -580,7 +580,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Da shadow gonna fall on you...");
 		_unit->PlaySoundToSet(12041);
@@ -590,7 +590,7 @@
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 				if (_unit->GetHealthPct() > 0)	
 		{
@@ -612,7 +612,7 @@
 	
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		nrspells = 2;
 		timer = 0;
@@ -621,13 +621,13 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Dis not da end for me..");
 		_unit->PlaySoundToSet(12051);
        RemoveAIUpdateEvent();
 
-	   GameObjectPointer  pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(123.256f, 914.422f, 34.1441f, 186306);
+	   GameObject *  pDoor = _unit->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(123.256f, 914.422f, 34.1441f, 186306);
         if(pDoor == 0)
             return;
 
@@ -670,7 +670,7 @@
 						summon = CN_LORD_RAADAN;
 						break;
 				}
-				CreaturePointer cre = NULLCREATURE;
+				Creature * cre = NULLCREATURE;
 				cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(summon, 
 				(_unit->GetPositionX() + RandomFloat(10)-10), (_unit->GetPositionY() + RandomFloat(10)-10),
 				_unit->GetPositionZ(), _unit->GetOrientation(),
@@ -692,7 +692,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -770,7 +770,7 @@
 	SP_AI_Spell spells[10];
 	bool m_spellcheck[10];
 
-    ZULJINAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    ZULJINAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 			for(int i=0;i<nrspells;i++)
 			{
@@ -839,7 +839,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		nrspells = 2;
 		spmin = 0;
@@ -850,7 +850,7 @@
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 					if (_unit->GetHealthPct() > 0)	
 		{
@@ -871,7 +871,7 @@
 		}
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		nrspells = 2;
 		spmin = 0;
@@ -882,7 +882,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Mebbe me fall...but da Amani empire...never gonna die...");
 		_unit->PlaySoundToSet(12100);
@@ -907,7 +907,7 @@
 			phase = 3;
 			for(int j=0;j<4;j++)
 			{
-				CreaturePointer cre = NULLCREATURE;
+				Creature * cre = NULLCREATURE;
 				cre = _unit->GetMapMgr()->GetInterface()->SpawnCreature(ZULJIN_FEATHER_VORTEX, 
 				(_unit->GetPositionX() + RandomFloat(10)-10), (_unit->GetPositionY() + RandomFloat(10)-10),
 				_unit->GetPositionZ(), _unit->GetOrientation(),
@@ -951,7 +951,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=spmin;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1005,7 +1005,7 @@
 class SOARINGEAGLEAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(SOARINGEAGLEAI, MoonScriptCreatureAI);
-    SOARINGEAGLEAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    SOARINGEAGLEAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(EAGLE_SWOOP, Target_Destination, 5, 0, 0);
 		GetUnit()->m_noRespawn = true;
@@ -1019,7 +1019,7 @@
 {
     MOONSCRIPT_FACTORY_FUNCTION(CLTOTEMAI, MoonScriptCreatureAI);
 
-    CLTOTEMAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    CLTOTEMAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 		AddSpell(CLT_LIGHTING, Target_Current, 20, 0.5f, 0);
 		
@@ -1044,7 +1044,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    GAZAKROTHAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+    GAZAKROTHAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
     {
 			nrspells = 1;
 			for(int i=0;i<nrspells;i++)
@@ -1060,18 +1060,18 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(1000);
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->Despawn(3000,0);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1079,7 +1079,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->Despawn(30000,0);
 		RemoveAIUpdateEvent();
@@ -1096,7 +1096,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1147,7 +1147,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    LORDRAADANAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    LORDRAADANAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 			nrspells = 1;
 			for(int i=0;i<nrspells;i++)
@@ -1168,18 +1168,18 @@
 		spells[1].attackstoptimer = 1000;*/
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(1000);
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->Despawn(3000,0);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1187,7 +1187,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->Despawn(30000,0);
 		RemoveAIUpdateEvent();
@@ -1204,7 +1204,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1261,7 +1261,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    SLITHERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    SLITHERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 			nrspells = 1;
 			for(int i=0;i<nrspells;i++)
@@ -1276,18 +1276,18 @@
 		spells[0].attackstoptimer = 1000;
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(1000);
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->Despawn(3000,0);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1295,7 +1295,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->Despawn(30000,0);
 		RemoveAIUpdateEvent();
@@ -1312,7 +1312,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1369,7 +1369,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    THURGAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    THURGAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 			nrspells = 1;
 			for(int i=0;i<nrspells;i++)
@@ -1385,18 +1385,18 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(1000);
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->Despawn(3000,0);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1404,7 +1404,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->Despawn(30000,0);
 		RemoveAIUpdateEvent();
@@ -1421,7 +1421,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1478,7 +1478,7 @@
 	SP_AI_Spell spells[2];
 	bool m_spellcheck[2];
 
-    DARKHEARTAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    DARKHEARTAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 			nrspells = 2;
 			for(int i=0;i<nrspells;i++)
@@ -1499,18 +1499,18 @@
 		spells[1].attackstoptimer = 1000;*/
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(1000);
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->Despawn(3000,0);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1518,7 +1518,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->Despawn(30000,0);
 		RemoveAIUpdateEvent();
@@ -1535,7 +1535,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1591,7 +1591,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    FENSTALKERAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FENSTALKERAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 			nrspells = 1;
 			for(int i=0;i<nrspells;i++)
@@ -1608,18 +1608,18 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(1000);
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->Despawn(3000,0);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1627,7 +1627,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->Despawn(30000,0);
 		RemoveAIUpdateEvent();
@@ -1644,7 +1644,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1699,7 +1699,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    ALYSONANTILLEAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    ALYSONANTILLEAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 			nrspells = 1;
 			for(int i=0;i<nrspells;i++)
@@ -1716,18 +1716,18 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(1000);
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->Despawn(3000,0);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1735,7 +1735,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->Despawn(30000,0);
 		RemoveAIUpdateEvent();
@@ -1752,7 +1752,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1807,7 +1807,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    KORAGGAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    KORAGGAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 			nrspells = 1;
 			for(int i=0;i<nrspells;i++)
@@ -1824,18 +1824,18 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(1000);
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->Despawn(3000,0);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1843,7 +1843,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->Despawn(30000,0);
 		RemoveAIUpdateEvent();
@@ -1860,7 +1860,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -1916,7 +1916,7 @@
 	SP_AI_Spell spells[1];
 	bool m_spellcheck[1];
 
-    FEATHERVORTEXAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    FEATHERVORTEXAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 			nrspells = 1;
 			for(int i=0;i<nrspells;i++)
@@ -1933,18 +1933,18 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
 		RegisterAIUpdateEvent(1000);
     }
 
 
-	void OnTargetDied(UnitPointer mTarget)
+	void OnTargetDied(Unit * mTarget)
     {
 
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
 		_unit->Despawn(3000,0);
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
@@ -1952,7 +1952,7 @@
         RemoveAIUpdateEvent();
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
 		_unit->Despawn(30000,0);
 		RemoveAIUpdateEvent();
@@ -1969,7 +1969,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-		    UnitPointer target = NULLUNIT;
+		    Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
Index: Trunk/src/InstanceScripts/Raid_ZulGurub.cpp
===================================================================
--- Trunk/src/InstanceScripts/Raid_ZulGurub.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/Raid_ZulGurub.cpp	(working copy)
@@ -46,7 +46,7 @@
 	SP_AI_Spell spells[6];
 	bool m_spellcheck[6];
 
-    JeklikAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    JeklikAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 6;
@@ -99,7 +99,7 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
 		// bat transform
@@ -107,7 +107,7 @@
 		_unit->PlaySoundToSet(8417);
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -115,7 +115,7 @@
 		_unit->RemoveAura(TRANSFORM_BAT);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -136,7 +136,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
@@ -205,7 +205,7 @@
 	SP_AI_Spell spells[4];
 	bool m_spellcheck[4];
 
-    VenoxisAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+    VenoxisAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 		// -- Number of spells to add --
 		nrspells = 4;
@@ -248,12 +248,12 @@
 
     }
     
-    void OnCombatStart(UnitPointer mTarget)
+    void OnCombatStart(Unit * mTarget)
     {
         RegisterAIUpdateEvent(_unit->GetUInt32Value(UNIT_FIELD_BASEATTACKTIME));
     }
 
-    void OnCombatStop(UnitPointer mTarget)
+    void OnCombatStop(Unit * mTarget)
     {
         _unit->GetAIInterface()->setCurrentAgent(AGENT_NULL);
         _unit->GetAIInterface()->SetAIState(STATE_IDLE);
@@ -261,7 +261,7 @@
 		_unit->RemoveAura(TRANSFORM_SNAKE);
     }
 
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -284,7 +284,7 @@
         if(_unit->GetCurrentSpell() == NULL && _unit->GetAIInterface()->GetNextTarget())
         {
 			float comulativeperc = 0;
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			for(int i=0;i<nrspells;i++)
 			{
 				if(!spells[i].perctrigger) continue;
Index: Trunk/src/InstanceScripts/SUNWELL_PLAT/Raid_SunwellPlateau.cpp
===================================================================
--- Trunk/src/InstanceScripts/SUNWELL_PLAT/Raid_SunwellPlateau.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/SUNWELL_PLAT/Raid_SunwellPlateau.cpp	(working copy)
@@ -48,7 +48,7 @@
 class SunbladeProtectorAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(SunbladeProtectorAI, MoonScriptCreatureAI);
-	SunbladeProtectorAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	SunbladeProtectorAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SUNBLADE_PROTECTOR_FEL_LIGHTNING, Target_RandomPlayer, 100, 0, 15, 0, 60);
 	}
@@ -65,7 +65,7 @@
 class ShadowswordAssassinAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowswordAssassinAI, MoonScriptCreatureAI);
-	ShadowswordAssassinAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowswordAssassinAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWSWORD_ASSASSIN_ASSASSINS_MARK, Target_RandomPlayer, 100, 0, 15, 0, 100);
 		AddSpell(SHADOWSWORD_ASSASSIN_AIMED_SHOT, Target_Current, 15, 4, 6, 5, 35, true);
@@ -83,7 +83,7 @@
 class ShadowswordCommanderAI : public MoonScriptCreatureAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(ShadowswordCommanderAI, MoonScriptCreatureAI);
-	ShadowswordCommanderAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ShadowswordCommanderAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		AddSpell(SHADOWSWORD_COMMANDER_SHIELD_SLAM, Target_Current, 10, 0, 10);
 		AddSpell(SHADOWSWORD_COMMANDER_BATTLESHOUT, Target_Self, 20, 0, 25);
@@ -97,12 +97,12 @@
 #define KALECGOS_SPECTRAL_BLAST		44866
 #define KALECGOS_ARCANE_BUFFET		45018
 
-void SpellFunc_Kalecgos_WildMagic(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType);
+void SpellFunc_Kalecgos_WildMagic(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType);
 
 class KalecgosAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(KalecgosAI, MoonScriptBossAI);
-	KalecgosAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	KalecgosAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(KALECGOS_FROST_BREATH, Target_Current, 10, 1, 12, 0, 30);
 		AddSpellFunc(SpellFunc_Kalecgos_WildMagic, Target_RandomPlayer, 15, 0, 10, 0, 100);
@@ -117,7 +117,7 @@
 	}
 };
 
-void SpellFunc_Kalecgos_WildMagic(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, UnitPointer pTarget, TargetType pType)
+void SpellFunc_Kalecgos_WildMagic(SpellDesc* pThis, MoonScriptCreatureAI* pCreatureAI, Unit * pTarget, TargetType pType)
 {
 	KalecgosAI* Kalecgos = ( pCreatureAI ) ? (KalecgosAI*)pCreatureAI : NULL;
 	if( Kalecgos )
@@ -142,7 +142,7 @@
 class SathrovarrTheCorruptorAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(SathrovarrTheCorruptorAI, MoonScriptBossAI);
-	SathrovarrTheCorruptorAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	SathrovarrTheCorruptorAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(SATHROVARR_THE_CORRUPTOR_CURSE_OF_BOUNDLESS_AGONY, Target_RandomPlayer, 20, 0, 12, 0, 40); 
 		AddSpell(SATHROVARR_THE_CORRUPTOR_SHADOW_BOLT_VOLLEY, Target_RandomPlayerApplyAura, 20, 1, 25, 0, 40);
@@ -167,7 +167,7 @@
 class BrutallusAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(BrutallusAI, MoonScriptBossAI);
-	BrutallusAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	BrutallusAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(BRUTALLUS_METEOR_SLASH, Target_Self, 100, 1, 12);
 		AddSpell(BRUTALLUS_BURN, Target_RandomPlayer, 50, 0, 20);
@@ -203,7 +203,7 @@
 class FelmystAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(FelmystAI, MoonScriptBossAI);
-	FelmystAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	FelmystAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		//Phase 1 spells
 		AddPhaseSpell(1, AddSpell(FELMYST_CLEAVE, Target_Current, 6, 0, 10, 0, 5));
@@ -229,7 +229,7 @@
 		AddEmote(Event_OnTaunt, "I am stronger than ever before!", Text_Yell, 12479);
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		ApplyAura(FELMYST_NOXIOUS_FUME);
 		ParentClass::OnCombatStart(pTarget);
@@ -249,7 +249,7 @@
 class LadySacrolashAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(LadySacrolashAI, MoonScriptBossAI);
-	LadySacrolashAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	LadySacrolashAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(LADY_SACROLASH_DARK_TOUCHED, Target_RandomPlayerApplyAura, 50, 0, 10, 0, 50);
 		AddSpell(LADY_SACROLASH_SHADOW_BLADES, Target_Current, 25, 1.5, 5, 0, 50);
@@ -262,13 +262,13 @@
 		AddEmote(Event_OnDied, "I... fade.", Text_Yell, 0); // Wasn't able to find sound for this text
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mGrandWarlockAlythess = GetNearestCreature(CN_GRAND_WARLOCK_ALYTHESS);
 		ParentClass::OnCombatStart(pTarget);
 	}
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		if( mGrandWarlockAlythess && mGrandWarlockAlythess->IsAlive() )
 		{
@@ -292,7 +292,7 @@
 class GrandWarlockAlythessAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(GrandWarlockAlythessAI, MoonScriptBossAI);
-	GrandWarlockAlythessAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	GrandWarlockAlythessAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(GRAND_WARLOCK_ALYTHESS_PYROGENICS, Target_Self, 100, 0, 10, 0, 50);
 		AddSpell(GRAND_WARLOCK_ALYTHESS_FLAME_TOUCHED, Target_RandomPlayerApplyAura, 10, 0, 30, 0, 50);
@@ -306,13 +306,13 @@
 		AddEmote(Event_OnDied, "I... fade.", Text_Yell, 0); // Wasn't able to find sound for this text
 	}
 
-	void OnCombatStart(UnitPointer pTarget)
+	void OnCombatStart(Unit * pTarget)
 	{
 		mLadySacrolash = GetNearestCreature(CN_LADY_SACROLASH);
 		ParentClass::OnCombatStart(pTarget);
 	}
 
-	void OnDied(UnitPointer pKiller)
+	void OnDied(Unit * pKiller)
 	{
 		if( mLadySacrolash && mLadySacrolash->IsAlive() )
 		{
@@ -339,7 +339,7 @@
 class MuruAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(MuruAI, MoonScriptBossAI);
-	MuruAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	MuruAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddSpell(MURU_NEGATIVE_ENERGY, Target_Self, 25, 0, 0);
 		AddSpell(MURU_DARKNESS, Target_Self, 20, 0, 45);
@@ -353,19 +353,19 @@
 class ShadowswordBerserkerAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ShadowswordBerserkerAI, MoonScriptCreatureAI);
-	ShadowswordBerserkerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature){}
+	ShadowswordBerserkerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature){}
 };
 
 class ShadowswordFuryMageAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(ShadowswordFuryMageAI, MoonScriptCreatureAI);
-	ShadowswordFuryMageAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature){}
+	ShadowswordFuryMageAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature){}
 };
 
 class VoidSentinelAI : public MoonScriptCreatureAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(VoidSentinelAI, MoonScriptCreatureAI);
-	VoidSentinelAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature){}
+	VoidSentinelAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature){}
 };
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@@ -375,7 +375,7 @@
 class EntropiusAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(EntropiusAI, MoonScriptBossAI);
-	EntropiusAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	EntropiusAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		//TODO
 	}
@@ -401,13 +401,13 @@
 class HandOfTheDeceiverAI : public MoonScriptBossAI
 {
 	MOONSCRIPT_FACTORY_FUNCTION(HandOfTheDeceiverAI, MoonScriptBossAI);
-	HandOfTheDeceiverAI(CreaturePointer pCreature) :MoonScriptBossAI(pCreature)
+	HandOfTheDeceiverAI(Creature * pCreature) :MoonScriptBossAI(pCreature)
 	{
 		AddSpell(FELFIRE_PORTAL, Target_RandomPlayer, 40, 0, 10, 0, 30);
 		AddSpell(SHADOW_BOLT_VOLLEY, Target_Current, 60, 0, 8, 0, 30);
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		ParentClass::OnLoad();
 	}
@@ -421,7 +421,7 @@
 	ParentClass::AIUpdate();
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		Despawn(10000,0);
 		ParentClass::OnDied(mKiller);
@@ -456,7 +456,7 @@
 class KilJaedenAI : public MoonScriptBossAI
 {
     MOONSCRIPT_FACTORY_FUNCTION(KilJaedenAI, MoonScriptBossAI);
-	KilJaedenAI(CreaturePointer pCreature) : MoonScriptBossAI(pCreature)
+	KilJaedenAI(Creature * pCreature) : MoonScriptBossAI(pCreature)
 	{
 		AddPhaseSpell(1, AddSpell(LEGION_LIGHTNING, Target_RandomPlayer, 10, 1.5f, 2, 0, 35));
 		AddPhaseSpell(1, AddSpell(SOUL_FLAY, Target_RandomPlayer, 10, 0, 0, 0, 35));
@@ -481,7 +481,7 @@
 		ParentClass::OnLoad();
 	}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 		SetAllowMelee(false);
 		SetCanMove(false);
@@ -489,7 +489,7 @@
 		ParentClass::OnCombatStart(mTarget);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		ParentClass::OnDied(mKiller);
 	}
@@ -593,14 +593,14 @@
 	}
 
 protected:
-	UnitPointer HandOfTheDeceiver1;
-	UnitPointer HandOfTheDeceiver2;
-	UnitPointer HandOfTheDeceiver3;
-	UnitPointer HandOfTheDeceiver4;
-	GameObjectPointer  ShieldOrb1;
-	GameObjectPointer  ShieldOrb2;
-	GameObjectPointer  ShieldOrb3;
-	GameObjectPointer  ShieldOrb4;
+	Unit * HandOfTheDeceiver1;
+	Unit * HandOfTheDeceiver2;
+	Unit * HandOfTheDeceiver3;
+	Unit * HandOfTheDeceiver4;
+	GameObject *  ShieldOrb1;
+	GameObject *  ShieldOrb2;
+	GameObject *  ShieldOrb3;
+	GameObject *  ShieldOrb4;
 	SpellEntry *Darkness_explosion;
 	SpellEntry *Darkness;
 	SpellEntry *ShShadowbolt;
Index: Trunk/src/InstanceScripts/SUNWELL_PLAT/SUNWELL_KALECGOS.cpp
===================================================================
--- Trunk/src/InstanceScripts/SUNWELL_PLAT/SUNWELL_KALECGOS.cpp	(revision 896)
+++ Trunk/src/InstanceScripts/SUNWELL_PLAT/SUNWELL_KALECGOS.cpp	(working copy)
@@ -122,8 +122,8 @@
 	coords wp3(1752.924194f,754.499634f,181.749878f);
 	class DRAGON_KALECGOS : public CreatureAIScript
 	{
-		CreaturePointer sathrovar;
-		CreaturePointer darkelf;
+		Creature * sathrovar;
+		Creature * darkelf;
 		bool failed;
 		bool  success;
 		typedef map<uint32,SoundEntryManager*> SAYMAP;
@@ -131,7 +131,7 @@
 		SAYMAP saymap;
 	public:
 		ADD_CREATURE_FACTORY_FUNCTION(DRAGON_KALECGOS);
-		DRAGON_KALECGOS(CreaturePointer crc) : CreatureAIScript(crc)
+		DRAGON_KALECGOS(Creature * crc) : CreatureAIScript(crc)
 		{
 			success = false;
 			_unit->GetAIInterface()->addWayPoint(CreateWaypoint(1,wp1.x,wp1.y,wp1.z,_unit->GetOrientation(),1000));
@@ -151,9 +151,9 @@
 			tempWp->flags = 768; // fly
 			return tempWp;
 		}
-		UnitPointer const GetRandomTarget(uint8 targetFlags)
+		Unit * const GetRandomTarget(uint8 targetFlags)
 		{
-			vector<UnitPointer> targetMap;
+			vector<Unit *> targetMap;
 			PlayerSet::iterator itr = _unit->GetInRangePlayerSetBegin();
 			for(; itr != _unit->GetInRangePlayerSetEnd(); ++itr)
 			{
@@ -163,7 +163,7 @@
 						continue;
 					if( (*itr)->FindAura(SPECTRAL_EXHAUSTION) && (targetFlags & SCRIPTTARGETFLAG_NO_EXHAUTION) )
 						continue;
-					targetMap.push_back( static_cast<UnitPointer>( (*itr) ) );
+					targetMap.push_back( static_cast<Unit *>( (*itr) ) );
 				}
 			}
 			if(targetMap.size() > 0)
@@ -171,7 +171,7 @@
 			else
 				return NULLUNIT;
 		}
-		void const SayYell(CreaturePointer obj,uint32 id, const char * text)
+		void const SayYell(Creature * obj,uint32 id, const char * text)
 		{
 			SAYMAP::iterator itr = saymap.find(id);
 			if(itr == saymap.end()) return;
@@ -185,7 +185,7 @@
 				saymap.erase(itr);
 			}
 		}
-		void OnCombatStart(UnitPointer mTarget)
+		void OnCombatStart(Unit * mTarget)
 		{
 			failed = false;
 			_unit->SetStandState(STANDSTATE_STAND);
@@ -201,7 +201,7 @@
 			darkelf->GetAIInterface()->AttackReaction(sathrovar,1);
 
 		}
-		void OnTargetDied(UnitPointer mTarget)
+		void OnTargetDied(Unit * mTarget)
 		{
 
 			if( rand() % 2 )
@@ -209,7 +209,7 @@
 			else
 				SayYell(_unit,EVILKALEC_TARGETKILL2,EVILKALEC_TARGETKILL2SPEECH);
 		}
-		void OnCombatStop(UnitPointer mTarget)
+		void OnCombatStop(Unit * mTarget)
 		{
 			if(failed)
 			{
@@ -217,7 +217,7 @@
 				saymap.clear();
 			}
 		}
-		void OnDied(UnitPointer mKiller)
+		void OnDied(Unit * mKiller)
 		{
 			_unit->SetHealthPct(3); // prevent him from dieing lololol
 			_unit->CastSpell(_unit,KALECGOS_BANISHED_AURA,false);
@@ -409,7 +409,7 @@
 			{
 				PauseEvent(spellid,1000);
 			}
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			switch(spellid)
 			{
 			case KALECGOS_WILDMAGIC:
@@ -480,10 +480,10 @@
 		map<uint32,SoundEntryManager*> saymap;
 	public:
 		ADD_CREATURE_FACTORY_FUNCTION(SATHROVAR);
-		SATHROVAR(CreaturePointer crc) : CreatureAIScript(crc) {}
-		UnitPointer const GetRandomTarget()
+		SATHROVAR(Creature * crc) : CreatureAIScript(crc) {}
+		Unit * const GetRandomTarget()
 		{
-			vector<UnitPointer> targetMap;
+			vector<Unit *> targetMap;
 			PlayerSet::iterator itr = _unit->GetInRangePlayerSetBegin();
 			for(; itr != _unit->GetInRangePlayerSetEnd(); ++itr)
 			{
@@ -491,7 +491,7 @@
 				{
 					if( (*itr)->FindAura(SPECTRAL_PLAYERBUFF) == NULL)
 						continue;
-					targetMap.push_back( static_cast<UnitPointer>( (*itr) ) );
+					targetMap.push_back( static_cast<Unit *>( (*itr) ) );
 				}
 			}
 			if(targetMap.size() > 0)
@@ -539,7 +539,7 @@
 		{
 			_unit->CastSpell(_unit,SPECTRAL_BOSSBUFF,false);
 		}
-		void OnCombatStart(UnitPointer mTarget)
+		void OnCombatStart(Unit * mTarget)
 		{
 			FillSayMap();
 			InitializeSpells();
@@ -571,7 +571,7 @@
 			}
 		
 		}
-		void OnTargetDied(UnitPointer mTarget)
+		void OnTargetDied(Unit * mTarget)
 		{
 			if(mTarget->IsCreature() && TO_CREATURE(mTarget)->GetEntry() == CN_DARK_ELF)
 			{
@@ -585,7 +585,7 @@
 				_unit->Despawn(1000,20000);
 			}
 		}
-		void OnDied(UnitPointer mKiller)
+		void OnDied(Unit * mKiller)
 		{
 			SayYell(SATHROVAR_DEATH,SATHROVAR_DEATHSPEECH);
 		}
@@ -596,7 +596,7 @@
 				PauseEvent(spellid,1000);
 				return;
 			}
-			UnitPointer target = NULLUNIT;
+			Unit * target = NULLUNIT;
 			switch(spellid)
 			{
 			case SATHROVAR_CORRUPTING_STRIKE:
@@ -681,11 +681,11 @@
 	{
 		map<uint32,SoundEntryManager*> saymap;
 		vector<CallBackManager*> cbMap;
-		CreaturePointer sathrovar;
+		Creature * sathrovar;
 	public:
 		ADD_CREATURE_FACTORY_FUNCTION(DARK_ELF);
-		DARK_ELF(CreaturePointer crc) : CreatureAIScript(crc) {}
-		void OnCombatStart(UnitPointer mTarget)
+		DARK_ELF(Creature * crc) : CreatureAIScript(crc) {}
+		void OnCombatStart(Unit * mTarget)
 		{
 			FillSayMap();
 			InitializeSpells();
@@ -721,7 +721,7 @@
 			if(_unit->GetAIInterface()->GetNextTarget() != sathrovar )
 				_unit->GetAIInterface()->WipeCurrentTarget();
 		}
-		void OnCombatStop(UnitPointer mTarget)
+		void OnCombatStop(Unit * mTarget)
 		{
 			saymap.clear();
 			cbMap.clear();
@@ -821,7 +821,7 @@
 		}
 
 	};
-	bool HandleSpectralTeleport(uint32 i, SpellPointer pSpell)
+	bool HandleSpectralTeleport(uint32 i, Spell * pSpell)
 	{
 		if(i) return false;
 		if(pSpell->p_caster)
Index: Trunk/src/LUAScripting/LUAEngine.cpp
===================================================================
--- Trunk/src/LUAScripting/LUAEngine.cpp	(revision 896)
+++ Trunk/src/LUAScripting/LUAEngine.cpp	(working copy)
@@ -435,7 +435,7 @@
 	}
 }
 
-void LuaEngine::OnUnitEvent(UnitPointer pUnit, const char * FunctionName, uint32 EventType, UnitPointer pMiscUnit, uint32 Misc, int32 Misc2, float Misc3, bool Yes, ItemPrototype * Misc4)
+void LuaEngine::OnUnitEvent(Unit * pUnit, const char * FunctionName, uint32 EventType, Unit * pMiscUnit, uint32 Misc, int32 Misc2, float Misc3, bool Yes, ItemPrototype * Misc4)
 {
 	if(FunctionName==NULL)
 		return;
@@ -646,7 +646,7 @@
 	}
 }
 
-void LuaEngine::OnQuestEvent(PlayerPointer  QuestOwner, const char * FunctionName, uint32 QuestID, uint32 EventType, PlayerPointer  QuestStarter,uint32 Misc, uint32 Misc2)
+void LuaEngine::OnQuestEvent(Player *  QuestOwner, const char * FunctionName, uint32 QuestID, uint32 EventType, Player *  QuestStarter,uint32 Misc, uint32 Misc2)
 {
 	if(FunctionName==NULL) return;
 	string pString = string(FunctionName);
@@ -729,10 +729,10 @@
 										string func = pString.substr(pos4+1,string::npos);
 										lua_pushstring(L,func.c_str());
 										lua_gettable(L,-2);
-										if (QuestOwner) Lunar<Unit>::push(L, (UnitPointer)QuestOwner);
+										if (QuestOwner) Lunar<Unit>::push(L, (Unit *)QuestOwner);
 										else lua_pushnil(L);
 										lua_pushinteger(L,EventType);
-										if(QuestStarter!=NULL && QuestStarter->GetTypeId() == TYPEID_UNIT) Lunar<Unit>::push(L, (UnitPointer)QuestStarter);
+										if(QuestStarter!=NULL && QuestStarter->GetTypeId() == TYPEID_UNIT) Lunar<Unit>::push(L, (Unit *)QuestStarter);
 										else lua_pushnil(L);
 										int r = lua_pcall(L,3,LUA_MULTRET,0);
 										if(r) report(L);
@@ -747,10 +747,10 @@
 								string func = pString.substr(pos3+1,string::npos);
 								lua_pushstring(L,func.c_str());
 								lua_gettable(L,-2);
-								if (QuestOwner) Lunar<Unit>::push(L, (UnitPointer)QuestOwner);
+								if (QuestOwner) Lunar<Unit>::push(L, (Unit *)QuestOwner);
 								else lua_pushnil(L);
 								lua_pushinteger(L,EventType);
-								if(QuestStarter!=NULL && QuestStarter->GetTypeId() == TYPEID_UNIT) Lunar<Unit>::push(L, (UnitPointer)QuestStarter);
+								if(QuestStarter!=NULL && QuestStarter->GetTypeId() == TYPEID_UNIT) Lunar<Unit>::push(L, (Unit *)QuestStarter);
 								else lua_pushnil(L);
 								int r = lua_pcall(L,3,LUA_MULTRET,0);
 								if(r) report(L);
@@ -765,10 +765,10 @@
 						string func = pString.substr(pos2+1,string::npos);
 						lua_pushstring(L,func.c_str());
 						lua_gettable(L,-2);
-						if (QuestOwner) Lunar<Unit>::push(L, (UnitPointer)QuestOwner);
+						if (QuestOwner) Lunar<Unit>::push(L, (Unit *)QuestOwner);
 						else lua_pushnil(L);
 						lua_pushinteger(L,EventType);
-						if(QuestStarter!=NULL && QuestStarter->GetTypeId() == TYPEID_UNIT) Lunar<Unit>::push(L, (UnitPointer)QuestStarter);
+						if(QuestStarter!=NULL && QuestStarter->GetTypeId() == TYPEID_UNIT) Lunar<Unit>::push(L, (Unit *)QuestStarter);
 						else lua_pushnil(L);
 						int r = lua_pcall(L,3,LUA_MULTRET,0);
 						if(r) report(L);
@@ -783,10 +783,10 @@
 				string func = pString.substr(pos1+1,string::npos);
 				lua_pushstring(L,func.c_str());
 				lua_gettable(L,-2);
-				if (QuestOwner) Lunar<Unit>::push(L, (UnitPointer)QuestOwner);
+				if (QuestOwner) Lunar<Unit>::push(L, (Unit *)QuestOwner);
 				else lua_pushnil(L);
 				lua_pushinteger(L,EventType);
-				if(QuestStarter!=NULL && QuestStarter->GetTypeId() == TYPEID_UNIT) Lunar<Unit>::push(L, (UnitPointer)QuestStarter);
+				if(QuestStarter!=NULL && QuestStarter->GetTypeId() == TYPEID_UNIT) Lunar<Unit>::push(L, (Unit *)QuestStarter);
 				else lua_pushnil(L);
 				int r = lua_pcall(L,3,LUA_MULTRET,0);
 				if(r) report(L);
@@ -806,10 +806,10 @@
 			m_Lock.Release();
 			return;
 		}
-		if (QuestOwner) Lunar<Unit>::push(L, (UnitPointer)QuestOwner);
+		if (QuestOwner) Lunar<Unit>::push(L, (Unit *)QuestOwner);
 		else lua_pushnil(L);
 		lua_pushinteger(L,EventType);
-		if(QuestStarter!=NULL && QuestStarter->GetTypeId() == TYPEID_UNIT) Lunar<Unit>::push(L, (UnitPointer)QuestStarter);
+		if(QuestStarter!=NULL && QuestStarter->GetTypeId() == TYPEID_UNIT) Lunar<Unit>::push(L, (Unit *)QuestStarter);
 		else lua_pushnil(L);
 		int r = lua_pcall(L,3,LUA_MULTRET,0);
 		if(r) report(L);
@@ -817,7 +817,7 @@
 		return;
 	}
 }
-void LuaEngine::CallFunction(UnitPointer pUnit, const char * FuncName)
+void LuaEngine::CallFunction(Unit * pUnit, const char * FuncName)
 {
 	if(FuncName == NULL) return;
 	size_t pos1,pos2,pos3,pos4,pos5 = 0;
@@ -974,7 +974,7 @@
 	m_Lock.Release();
 }
 
-void LuaEngine::OnGameObjectEvent(GameObjectPointer  pGameObject, const char * FunctionName, uint32 EventType, UnitPointer pMiscUnit, uint32 Misc, ItemPrototype* Misc2)
+void LuaEngine::OnGameObjectEvent(GameObject *  pGameObject, const char * FunctionName, uint32 EventType, Unit * pMiscUnit, uint32 Misc, ItemPrototype* Misc2)
 {
 	if(FunctionName==NULL)
 		return;
@@ -1167,7 +1167,7 @@
 	}
 }
 
-void LuaEngine::OnGossipEvent(ObjectPointer pObject, const char * FunctionName, uint32 EventType, PlayerPointer  mPlayer, uint32 Id, uint32 IntId, const char * Code)
+void LuaEngine::OnGossipEvent(Object * pObject, const char * FunctionName, uint32 EventType, Player *  mPlayer, uint32 Id, uint32 IntId, const char * Code)
 {
     if(FunctionName==NULL)
 		return;
@@ -1255,7 +1255,7 @@
 										else if(pObject->GetTypeId() == TYPEID_ITEM) Lunar<Item>::push(L, TO_ITEM(pObject));
 										else if(pObject->GetTypeId() == TYPEID_GAMEOBJECT) Lunar<GameObject>::push(L, TO_GAMEOBJECT(pObject));
 										lua_pushinteger(L, EventType);
-										Lunar<Unit>::push(L, (PlayerPointer )mPlayer);
+										Lunar<Unit>::push(L, (Player * )mPlayer);
 										lua_pushinteger(L, Id);
 										lua_pushinteger(L, IntId);
 										lua_pushstring(L, Code);
@@ -1276,7 +1276,7 @@
 								else if(pObject->GetTypeId() == TYPEID_ITEM) Lunar<Item>::push(L, TO_ITEM(pObject));
 								else if(pObject->GetTypeId() == TYPEID_GAMEOBJECT) Lunar<GameObject>::push(L, TO_GAMEOBJECT(pObject));
 								lua_pushinteger(L, EventType);
-								Lunar<Unit>::push(L, (PlayerPointer )mPlayer);
+								Lunar<Unit>::push(L, (Player * )mPlayer);
 								lua_pushinteger(L, Id);
 								lua_pushinteger(L, IntId);
 								lua_pushstring(L, Code);
@@ -1297,7 +1297,7 @@
 						else if(pObject->GetTypeId() == TYPEID_ITEM) Lunar<Item>::push(L, TO_ITEM(pObject));
 						else if(pObject->GetTypeId() == TYPEID_GAMEOBJECT) Lunar<GameObject>::push(L, TO_GAMEOBJECT(pObject));
 						lua_pushinteger(L, EventType);
-						Lunar<Unit>::push(L, (PlayerPointer )mPlayer);
+						Lunar<Unit>::push(L, (Player * )mPlayer);
 						lua_pushinteger(L, Id);
 						lua_pushinteger(L, IntId);
 						lua_pushstring(L, Code);
@@ -1318,7 +1318,7 @@
 				else if(pObject->GetTypeId() == TYPEID_ITEM) Lunar<Item>::push(L, TO_ITEM(pObject));
 				else if(pObject->GetTypeId() == TYPEID_GAMEOBJECT) Lunar<GameObject>::push(L, TO_GAMEOBJECT(pObject));
 				lua_pushinteger(L, EventType);
-				Lunar<Unit>::push(L, (PlayerPointer )mPlayer);
+				Lunar<Unit>::push(L, (Player * )mPlayer);
 				lua_pushinteger(L, Id);
 				lua_pushinteger(L, IntId);
 				lua_pushstring(L, Code);
@@ -1344,7 +1344,7 @@
 		else if(pObject->GetTypeId() == TYPEID_ITEM) Lunar<Item>::push(L, TO_ITEM(pObject));
 		else if(pObject->GetTypeId() == TYPEID_GAMEOBJECT) Lunar<GameObject>::push(L, TO_GAMEOBJECT(pObject));
 		lua_pushinteger(L, EventType);
-		Lunar<Unit>::push(L, (PlayerPointer )mPlayer);
+		Lunar<Unit>::push(L, (Player * )mPlayer);
 		lua_pushinteger(L, Id);
 		lua_pushinteger(L, IntId);
 		lua_pushstring(L, Code);
@@ -1355,7 +1355,7 @@
 	}
 }
 #ifdef ENABLE_LUA_HOOKS
-void LuaEngine::OnServerHook(PlayerPointer  plr, uint32 evt, ObjectPointer  obj, const char * FunctionName, uint32 Misc = 0, uint32 Misc_ = 0)
+void LuaEngine::OnServerHook(Player *  plr, uint32 evt, Object *  obj, const char * FunctionName, uint32 Misc = 0, uint32 Misc_ = 0)
 {
 	if(FunctionName == NULL) return;
 	m_Lock.Acquire();
@@ -1443,7 +1443,7 @@
 										string func = pString.substr(pos4+1,string::npos);
 										lua_pushstring(L,func.c_str());
 										lua_gettable(L,-2);
-										Lunar<Unit>::push(L, (UnitPointer)plr);
+										Lunar<Unit>::push(L, (Unit *)plr);
 										lua_pushinteger(L, evt);
 										if(obj == NULL) lua_pushnil(L);
 										else switch(obj->GetTypeId())
@@ -1467,7 +1467,7 @@
 								string func = pString.substr(pos3+1,string::npos);
 								lua_pushstring(L,func.c_str());
 								lua_gettable(L,-2);
-								Lunar<Unit>::push(L, (UnitPointer)plr);
+								Lunar<Unit>::push(L, (Unit *)plr);
 								lua_pushinteger(L, evt);
 								if(obj == NULL) lua_pushnil(L);
 								else switch(obj->GetTypeId())
@@ -1491,7 +1491,7 @@
 						string func = pString.substr(pos2+1,string::npos);
 						lua_pushstring(L,func.c_str());
 						lua_gettable(L,-2);
-						Lunar<Unit>::push(L, (UnitPointer)plr);
+						Lunar<Unit>::push(L, (Unit *)plr);
 						lua_pushinteger(L, evt);
 						if(obj == NULL) lua_pushnil(L);
 						else switch(obj->GetTypeId())
@@ -1515,7 +1515,7 @@
 				string func = pString.substr(pos1+1,string::npos);
 				lua_pushstring(L,func.c_str());
 				lua_gettable(L,-2);
-				Lunar<Unit>::push(L, (UnitPointer)plr);
+				Lunar<Unit>::push(L, (Unit *)plr);
 				lua_pushinteger(L, evt);
 				if(obj == NULL) lua_pushnil(L);
 				else switch(obj->GetTypeId())
@@ -1544,7 +1544,7 @@
 			m_Lock.Release();
 			return;
 		}
-		Lunar<Unit>::push(L, (UnitPointer)plr);
+		Lunar<Unit>::push(L, (Unit *)plr);
 		lua_pushinteger(L, evt);
 		if(obj == NULL) lua_pushnil(L);
 		else switch(obj->GetTypeId())
@@ -1565,7 +1565,7 @@
 		return;
 	}
 }
-void LuaEngine::OnServerHook(PlayerPointer  plr, uint32 evt, ObjectPointer  obj, const char * FunctionName, uint32 pmisc1, uint32 pmisc2, const char * misc1, const char * misc2)
+void LuaEngine::OnServerHook(Player *  plr, uint32 evt, Object *  obj, const char * FunctionName, uint32 pmisc1, uint32 pmisc2, const char * misc1, const char * misc2)
 {
 	if(FunctionName==NULL)
 		return;
@@ -1654,7 +1654,7 @@
 										string func = pString.substr(pos4+1,string::npos);
 										lua_pushstring(L,func.c_str());
 										lua_gettable(L,-2);
-										Lunar<Unit>::push(L, (UnitPointer)plr);
+										Lunar<Unit>::push(L, (Unit *)plr);
 										lua_pushinteger(L, evt );
 										if(obj == NULL) lua_pushnil(L);
 										else switch(obj->GetTypeId())
@@ -1679,7 +1679,7 @@
 								string func = pString.substr(pos3+1,string::npos);
 								lua_pushstring(L,func.c_str());
 								lua_gettable(L,-2);
-								Lunar<Unit>::push(L, (UnitPointer)plr);
+								Lunar<Unit>::push(L, (Unit *)plr);
 								lua_pushinteger(L, evt );
 								if(obj == NULL) lua_pushnil(L);
 								else switch(obj->GetTypeId())
@@ -1704,7 +1704,7 @@
 						string func = pString.substr(pos2+1,string::npos);
 						lua_pushstring(L,func.c_str());
 						lua_gettable(L,-2);
-						Lunar<Unit>::push(L, (UnitPointer)plr);
+						Lunar<Unit>::push(L, (Unit *)plr);
 						lua_pushinteger(L, evt );
 						if(obj == NULL) lua_pushnil(L);
 						else switch(obj->GetTypeId())
@@ -1729,7 +1729,7 @@
 				string func = pString.substr(pos1+1,string::npos);
 				lua_pushstring(L,func.c_str());
 				lua_gettable(L,-2);
-				Lunar<Unit>::push(L, (UnitPointer)plr);
+				Lunar<Unit>::push(L, (Unit *)plr);
 				lua_pushinteger(L, evt );
 				if(obj == NULL) lua_pushnil(L);
 				else switch(obj->GetTypeId())
@@ -1759,7 +1759,7 @@
 			m_Lock.Release();
 			return;
 		}
-		Lunar<Unit>::push(L, (UnitPointer)plr);
+		Lunar<Unit>::push(L, (Unit *)plr);
 		lua_pushinteger(L, evt );
 		if(obj == NULL) lua_pushnil(L);
 		else switch(obj->GetTypeId())
@@ -1778,7 +1778,7 @@
 		m_Lock.Release();
 	}
 }
-void LuaEngine::OnServerHook(PlayerPointer  plr, uint32 evt, ObjectPointer  obj, const char * FunctionName, ArenaTeam * pArena, bool misc1, bool misc2)
+void LuaEngine::OnServerHook(Player *  plr, uint32 evt, Object *  obj, const char * FunctionName, ArenaTeam * pArena, bool misc1, bool misc2)
 {
 	if(FunctionName==NULL) return;
 
@@ -1867,7 +1867,7 @@
 										string func = pString.substr(pos4+1,string::npos);
 										lua_pushstring(L,func.c_str());
 										lua_gettable(L,-2);
-										Lunar<Unit>::push(L, (UnitPointer)plr);
+										Lunar<Unit>::push(L, (Unit *)plr);
 										lua_pushinteger(L, evt);
 										if(obj == NULL) lua_pushnil(L);
 										else switch(obj->GetTypeId())
@@ -1892,7 +1892,7 @@
 								string func = pString.substr(pos3+1,string::npos);
 								lua_pushstring(L,func.c_str());
 								lua_gettable(L,-2);
-								Lunar<Unit>::push(L, (UnitPointer)plr);
+								Lunar<Unit>::push(L, (Unit *)plr);
 								lua_pushinteger(L, evt);
 								if(obj == NULL) lua_pushnil(L);
 								else switch(obj->GetTypeId())
@@ -1917,7 +1917,7 @@
 						string func = pString.substr(pos2+1,string::npos);
 						lua_pushstring(L,func.c_str());
 						lua_gettable(L,-2);
-						Lunar<Unit>::push(L, (UnitPointer)plr);
+						Lunar<Unit>::push(L, (Unit *)plr);
 						lua_pushinteger(L, evt);
 						if(obj == NULL) lua_pushnil(L);
 						else switch(obj->GetTypeId())
@@ -1942,7 +1942,7 @@
 				string func = pString.substr(pos1+1,string::npos);
 				lua_pushstring(L,func.c_str());
 				lua_gettable(L,-2);
-				Lunar<Unit>::push(L, (UnitPointer)plr);
+				Lunar<Unit>::push(L, (Unit *)plr);
 				lua_pushinteger(L, evt);
 				if(obj == NULL) lua_pushnil(L);
 				else switch(obj->GetTypeId())
@@ -1972,7 +1972,7 @@
 			m_Lock.Release();
 			return;
 		}
-		Lunar<Unit>::push(L, (UnitPointer)plr);
+		Lunar<Unit>::push(L, (Unit *)plr);
 		lua_pushinteger(L, evt);
 		if(obj == NULL) lua_pushnil(L);
 		else switch(obj->GetTypeId())
@@ -1991,7 +1991,7 @@
 		return;
 	}
 }
-void LuaEngine::OnServerHook(PlayerPointer  plr, uint32 evt,ObjectPointer  obj, const char * FunctionName, Quest * pQuest, Guild * pGuild, SpellEntry * Sp)
+void LuaEngine::OnServerHook(Player *  plr, uint32 evt,Object *  obj, const char * FunctionName, Quest * pQuest, Guild * pGuild, SpellEntry * Sp)
 {
 	if(FunctionName==NULL) return;
 	m_Lock.Acquire();
@@ -2079,7 +2079,7 @@
 										string func = pString.substr(pos4+1,string::npos);
 										lua_pushstring(L,func.c_str());
 										lua_gettable(L,-2);
-										Lunar<Unit>::push(L, (UnitPointer)plr);
+										Lunar<Unit>::push(L, (Unit *)plr);
 										lua_pushinteger(L, evt);
 										if(obj == NULL) lua_pushnil(L);
 										else switch(obj->GetTypeId())
@@ -2104,7 +2104,7 @@
 								string func = pString.substr(pos3+1,string::npos);
 								lua_pushstring(L,func.c_str());
 								lua_gettable(L,-2);
-								Lunar<Unit>::push(L, (UnitPointer)plr);
+								Lunar<Unit>::push(L, (Unit *)plr);
 								lua_pushinteger(L, evt);
 								if(obj == NULL) lua_pushnil(L);
 								else switch(obj->GetTypeId())
@@ -2129,7 +2129,7 @@
 						string func = pString.substr(pos2+1,string::npos);
 						lua_pushstring(L,func.c_str());
 						lua_gettable(L,-2);
-						Lunar<Unit>::push(L, (UnitPointer)plr);
+						Lunar<Unit>::push(L, (Unit *)plr);
 						lua_pushinteger(L, evt);
 						if(obj == NULL) lua_pushnil(L);
 						else switch(obj->GetTypeId())
@@ -2154,7 +2154,7 @@
 				string func = pString.substr(pos1+1,string::npos);
 				lua_pushstring(L,func.c_str());
 				lua_gettable(L,-2);
-				Lunar<Unit>::push(L, (UnitPointer)plr);
+				Lunar<Unit>::push(L, (Unit *)plr);
 				lua_pushinteger(L, evt);
 				if(obj == NULL) lua_pushnil(L);
 				else switch(obj->GetTypeId())
@@ -2185,7 +2185,7 @@
 			return;
 		}
 
-		Lunar<Unit>::push(L, (UnitPointer)plr);
+		Lunar<Unit>::push(L, (Unit *)plr);
 		lua_pushinteger(L, evt);
 		if(obj == NULL) lua_pushnil(L);
 		else switch(obj->GetTypeId())
@@ -3097,7 +3097,7 @@
 				g_engine.OnServerHook( pPlayer, evt, NULLOBJ, (*itr), areaTrigger); }
 		}
 	}
-	void lOnAuraRemove(PlayerPointer pPlayer, uint32 spellID)
+	void lOnAuraRemove(Player * pPlayer, uint32 spellID)
 	{
 		uint32 evt = SERVER_HOOK_EVENT_ON_AURA_REMOVE;
 		if(m_binding[evt].size())
@@ -3108,7 +3108,7 @@
 			}
 		}
 	}
-	void lOnPostSpellCast(PlayerPointer pPlayer, SpellEntry * pSpell, UnitPointer pTarget)
+	void lOnPostSpellCast(Player * pPlayer, SpellEntry * pSpell, Unit * pTarget)
 	{
 		uint32 evt = SERVER_HOOK_EVENT_ON_POST_SPELL_CAST;
 		if(m_binding[evt].size())
@@ -3132,7 +3132,7 @@
 	}
 };
 #endif
-CreatureAIScript * CreateLuaCreature(CreaturePointer src)
+CreatureAIScript * CreateLuaCreature(Creature * src)
 {
 	LuaUnitBinding * pBinding = g_luaMgr.GetUnitBinding( src->GetEntry() );
 
@@ -3146,7 +3146,7 @@
 	return pLua;
 }
 
-GameObjectAIScript * CreateLuaGameObject(GameObjectPointer src)
+GameObjectAIScript * CreateLuaGameObject(GameObject * src)
 {
 	LuaGameObjectBinding * pBinding = g_luaMgr.GetGameObjectBinding( src->GetEntry() );
 	LuaGameObject * pLua = new LuaGameObject(src);
Index: Trunk/src/LUAScripting/LUAEngine.h
===================================================================
--- Trunk/src/LUAScripting/LUAEngine.h	(revision 896)
+++ Trunk/src/LUAScripting/LUAEngine.h	(working copy)
@@ -143,21 +143,21 @@
 	void RegisterCoreFunctions();
 	HEARTHSTONE_INLINE Mutex& GetLock() { return m_Lock; }
 
-	void OnUnitEvent(UnitPointer  pUnit, const char * FunctionName, uint32 EventType, UnitPointer  pMiscUnit, uint32 Misc, int32 Misc2, float Misc3, bool Yes, ItemPrototype * Misc4);
-	void OnUnitEvent(UnitPointer  pUnit, const char * FunctionName, uint32 EventType, UnitPointer  pMiscUnit, uint32 Misc) { OnUnitEvent(pUnit,FunctionName,EventType,pMiscUnit,Misc,0,0,false,NULL); }
-	void OnUnitEvent(UnitPointer  pUnit, const char * FunctionName ,uint32 EventType, UnitPointer  pMiscUnit, int32 Misc2){ OnUnitEvent(pUnit,FunctionName,EventType,pMiscUnit,0,Misc2,0,false,NULL); }
-	void OnUnitEvent(UnitPointer  pUnit, const char * FunctionName, uint32 EventType, UnitPointer  pMiscUnit, float Misc3) { OnUnitEvent(pUnit,FunctionName,EventType,pMiscUnit,0,0,Misc3,false,NULL); }
-	void OnUnitEvent(UnitPointer  pUnit, const char * FunctionName, uint32 EventType, UnitPointer  pMiscUnit, uint32 Misc, bool Yes) { OnUnitEvent(pUnit,FunctionName,EventType,pMiscUnit,Misc,0,0,Yes,NULL); }
-	void OnUnitEvent(UnitPointer  pUnit, const char * FunctionName, uint32 EventType, UnitPointer  pMiscUnit, ItemPrototype * Proto){ OnUnitEvent(pUnit,FunctionName, EventType,pMiscUnit,0,0,0,false,Proto); }
-	void OnQuestEvent(PlayerPointer  QuestOwner, const char * FunctionName, uint32 QuestID, uint32 EventType, PlayerPointer  QuestStarter,uint32 Misc, uint32 Misc2);
-	void OnGameObjectEvent(GameObjectPointer  pGameObject, const char * FunctionName, uint32 EventType, UnitPointer  pMiscUnit, uint32 Misc, ItemPrototype* Misc2);
-    void OnGossipEvent(ObjectPointer  pObject, const char * FunctionName, uint32 EventType, PlayerPointer  mPlayer, uint32 Id, uint32 IntId, const char * Code);
-	void CallFunction(UnitPointer  pUnit, const char * FuncName);
+	void OnUnitEvent(Unit *  pUnit, const char * FunctionName, uint32 EventType, Unit *  pMiscUnit, uint32 Misc, int32 Misc2, float Misc3, bool Yes, ItemPrototype * Misc4);
+	void OnUnitEvent(Unit *  pUnit, const char * FunctionName, uint32 EventType, Unit *  pMiscUnit, uint32 Misc) { OnUnitEvent(pUnit,FunctionName,EventType,pMiscUnit,Misc,0,0,false,NULL); }
+	void OnUnitEvent(Unit *  pUnit, const char * FunctionName ,uint32 EventType, Unit *  pMiscUnit, int32 Misc2){ OnUnitEvent(pUnit,FunctionName,EventType,pMiscUnit,0,Misc2,0,false,NULL); }
+	void OnUnitEvent(Unit *  pUnit, const char * FunctionName, uint32 EventType, Unit *  pMiscUnit, float Misc3) { OnUnitEvent(pUnit,FunctionName,EventType,pMiscUnit,0,0,Misc3,false,NULL); }
+	void OnUnitEvent(Unit *  pUnit, const char * FunctionName, uint32 EventType, Unit *  pMiscUnit, uint32 Misc, bool Yes) { OnUnitEvent(pUnit,FunctionName,EventType,pMiscUnit,Misc,0,0,Yes,NULL); }
+	void OnUnitEvent(Unit *  pUnit, const char * FunctionName, uint32 EventType, Unit *  pMiscUnit, ItemPrototype * Proto){ OnUnitEvent(pUnit,FunctionName, EventType,pMiscUnit,0,0,0,false,Proto); }
+	void OnQuestEvent(Player *  QuestOwner, const char * FunctionName, uint32 QuestID, uint32 EventType, Player *  QuestStarter,uint32 Misc, uint32 Misc2);
+	void OnGameObjectEvent(GameObject *  pGameObject, const char * FunctionName, uint32 EventType, Unit *  pMiscUnit, uint32 Misc, ItemPrototype* Misc2);
+    void OnGossipEvent(Object *  pObject, const char * FunctionName, uint32 EventType, Player *  mPlayer, uint32 Id, uint32 IntId, const char * Code);
+	void CallFunction(Unit *  pUnit, const char * FuncName);
 #ifdef ENABLE_LUA_HOOKS
-	void OnServerHook(PlayerPointer , uint32,ObjectPointer , const char *, uint32, uint32);
-	void OnServerHook(PlayerPointer , uint32, ObjectPointer , const char *, Quest *, Guild *, SpellEntry *);
-	void OnServerHook(PlayerPointer , uint32, ObjectPointer , const char *, uint32, uint32, const char *, const char*);
-	void OnServerHook(PlayerPointer , uint32, ObjectPointer , const char *, ArenaTeam *, bool, bool);
+	void OnServerHook(Player * , uint32,Object * , const char *, uint32, uint32);
+	void OnServerHook(Player * , uint32, Object * , const char *, Quest *, Guild *, SpellEntry *);
+	void OnServerHook(Player * , uint32, Object * , const char *, uint32, uint32, const char *, const char*);
+	void OnServerHook(Player * , uint32, Object * , const char *, ArenaTeam *, bool, bool);
 #endif
 };
 
Index: Trunk/src/LUAScripting/NameSpaces/GameObjectFunctions.cpp
===================================================================
--- Trunk/src/LUAScripting/NameSpaces/GameObjectFunctions.cpp	(revision 896)
+++ Trunk/src/LUAScripting/NameSpaces/GameObjectFunctions.cpp	(working copy)
@@ -8,10 +8,10 @@
 ///////////////////////////////////////////////////////
 namespace luaGameObject
 {
-	int Teleport(lua_State * L, GameObjectPointer ptr)
+	int Teleport(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
-		UnitPointer  target = Lunar<Unit>::check(L, 1);
+		Unit *  target = Lunar<Unit>::check(L, 1);
 		int mapId = luaL_checkint(L, 2);
 		double posX = luaL_checknumber(L, 3);
 		double posY = luaL_checknumber(L, 4);
@@ -23,7 +23,7 @@
 		static_pointer_cast<Player>(target)->SafeTeleport((uint32)mapId, 0, vec);
 		return 0;
 	}
-	int GetName(lua_State * L, GameObjectPointer ptr)
+	int GetName(lua_State * L, GameObject * ptr)
 	{
 		if(!ptr||ptr->GetTypeId()!=TYPEID_GAMEOBJECT||!ptr->GetInfo())
 		{
@@ -34,7 +34,7 @@
 		lua_pushstring(L,ptr->GetInfo()->Name);
 		return 1;
 	}
-	int GetCreatureNearestCoords(lua_State * L, GameObjectPointer ptr)
+	int GetCreatureNearestCoords(lua_State * L, GameObject * ptr)
 	{
 		if(ptr == NULL) return 0;
 		float x = (float)luaL_checkinteger(L,1);
@@ -44,10 +44,10 @@
 		if(x == 0 || y == 0 || z == 0 || entryid == 0 ) return 0;
 		shared_ptr<Creature> pC = ptr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(x,y,z,entryid);
 		if( pC == NULL) return 0;
-		Lunar<Unit>::push(L,(UnitPointer)pC);
+		Lunar<Unit>::push(L,(Unit *)pC);
 		return 1;
 	}
-	int GetGameObjectNearestCoords(lua_State * L, GameObjectPointer ptr)
+	int GetGameObjectNearestCoords(lua_State * L, GameObject * ptr)
 	{
 		if(ptr == NULL) return 0;
 		float x = (float)luaL_checkinteger(L,1);
@@ -60,10 +60,10 @@
 		Lunar<GameObject>::push(L,Obj);
 		return 1;
 	}
-	int GossipCreateMenu(lua_State * L, GameObjectPointer ptr)
+	int GossipCreateMenu(lua_State * L, GameObject * ptr)
 	{
 		int text_id = luaL_checkint(L, 1);
-		UnitPointer  target = Lunar<Unit>::check(L, 2);
+		Unit *  target = Lunar<Unit>::check(L, 2);
 		int autosend = luaL_checkint(L, 3);   
 		if(target->GetTypeId() != TYPEID_PLAYER) return 0;
 		shared_ptr<Player> plr = TO_PLAYER(target->shared_from_this());
@@ -72,7 +72,7 @@
 			Menu->SendTo(plr);
 		return 1;
 	}
-	int GossipMenuAddItem(lua_State * L, GameObjectPointer ptr)
+	int GossipMenuAddItem(lua_State * L, GameObject * ptr)
 	{
 		int icon = luaL_checkint(L, 1);
 		const char * menu_text = luaL_checkstring(L, 2);
@@ -81,26 +81,26 @@
 		Menu->AddItem(icon, menu_text, IntId, (extra > 0)? true : false);
 		return 1;
 	}
-	int GossipSendMenu(lua_State * L, GameObjectPointer ptr)
+	int GossipSendMenu(lua_State * L, GameObject * ptr)
 	{
-		UnitPointer  target = Lunar<Unit>::check(L, 1);
+		Unit *  target = Lunar<Unit>::check(L, 1);
 		if(target->GetTypeId() != TYPEID_PLAYER) return 0;
 		shared_ptr<Player> plr = TO_PLAYER(target->shared_from_this());
 		Menu->SendTo(plr);
 		return 1;
 		}
-	int GossipComplete(lua_State * L, GameObjectPointer ptr)
+	int GossipComplete(lua_State * L, GameObject * ptr)
 	{
-		UnitPointer target = Lunar<Unit>::check(L, 1);
+		Unit * target = Lunar<Unit>::check(L, 1);
 		if(target->GetTypeId() != TYPEID_PLAYER) return 0;
 
 		shared_ptr<Player> plr = TO_PLAYER(target->shared_from_this());
 		plr->Gossip_Complete();
 		return 0;
 	}
-	int GossipSendPOI(lua_State * L, GameObjectPointer ptr)
+	int GossipSendPOI(lua_State * L, GameObject * ptr)
 	{
-		UnitPointer target = Lunar<Unit>::check(L, 1);
+		Unit * target = Lunar<Unit>::check(L, 1);
 		if(target->GetTypeId() != TYPEID_PLAYER) return 0;
 		shared_ptr<Player> plr = TO_PLAYER(target->shared_from_this());
 		float x = (float)luaL_checknumber(L, 2);
@@ -113,12 +113,12 @@
 		plr->Gossip_SendPOI(x, y, icon, flags, data, name);
 		return 0;
 	}
-	int AddItem(lua_State * L, GameObjectPointer ptr)
+	int AddItem(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		int id = luaL_checkint(L,1);
 		int count = luaL_checkint(L,2);
-		UnitPointer  nplr = Lunar<Unit>::check(L,3);
+		Unit *  nplr = Lunar<Unit>::check(L,3);
 		if(nplr->GetTypeId() != TYPEID_PLAYER) return 0;
 
 		shared_ptr<Player> plr = TO_PLAYER(nplr->shared_from_this());
@@ -142,13 +142,13 @@
 
 		return 0;
 	}
-	int GetClosestPlayer(lua_State * L, GameObjectPointer ptr)
+	int GetClosestPlayer(lua_State * L, GameObject * ptr)
 	{
 		if(!ptr)
 			return 0;
 
 		float dist, d2;
-		PlayerPointer  ret = NULLPLR;
+		Player *  ret = NULLPLR;
 
 		for(PlayerSet::iterator itr = ptr->GetInRangePlayerSetBegin(); itr != ptr->GetInRangePlayerSetEnd(); ++itr)
 		{
@@ -167,15 +167,15 @@
 
 		return 1;
 	}
-	int GetDistance(lua_State * L, GameObjectPointer ptr)
+	int GetDistance(lua_State * L, GameObject * ptr)
 	{
 		if(!ptr)
 			return 0;
-		UnitPointer  target = Lunar<Unit>::check(L, 1);
+		Unit *  target = Lunar<Unit>::check(L, 1);
 		lua_pushnumber(L,ptr->GetDistance2dSq(target));
 		return 1;
 	}
-	int IsInWorld(lua_State * L, GameObjectPointer ptr)
+	int IsInWorld(lua_State * L, GameObject * ptr)
 	{
 		if (ptr)
 			if(ptr->IsInWorld())
@@ -184,21 +184,21 @@
 				lua_pushboolean(L, 0);
 		return 1;
 	}
-	int GetZoneId(lua_State *L, GameObjectPointer ptr)
+	int GetZoneId(lua_State *L, GameObject * ptr)
 	{
 		if(!ptr)
 			return 0;
 		lua_pushinteger(L,(ptr->GetZoneId()));
 		return 1;
 	}
-	int PlaySoundToSet(lua_State * L, GameObjectPointer ptr)
+	int PlaySoundToSet(lua_State * L, GameObject * ptr)
 	{
 		if(!ptr) return 0;
 		int soundid = luaL_checkint(L,1);
 		ptr->PlaySoundToSet(soundid);
 		return 0;
 	}
-	int SpawnCreature(lua_State * L, GameObjectPointer ptr)
+	int SpawnCreature(lua_State * L, GameObject * ptr)
 	{
 		if(ptr == NULL) return 0;
 		uint32 entry_id = luaL_checkint(L, 1);
@@ -229,14 +229,14 @@
 		Lunar<Unit>::push(L,pC);
 		return 1;
 	}
-	int GetItemCount(lua_State * L, GameObjectPointer ptr)
+	int GetItemCount(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID_RET_INT(TYPEID_PLAYER);
 		int itemid = luaL_checkint(L,1);
 		//lua_pushinteger(L,ptr->GetItemInterface()->GetItemCount(itemid,false));
 		return 1;
 	}
-	int SpawnGameObject(lua_State * L, GameObjectPointer ptr)
+	int SpawnGameObject(lua_State * L, GameObject * ptr)
 	{
 		if(ptr == NULL) return 0;
 		uint32 entry_id = luaL_checkint(L, 1);
@@ -265,75 +265,75 @@
 		Lunar<GameObject>::push(L,pC);
 		return 1;
 	}
-	int CalcDistance(lua_State * L, GameObjectPointer ptr)
+	int CalcDistance(lua_State * L, GameObject * ptr)
 	{
-		UnitPointer  desttar = Lunar<Unit>::check(L,1);
+		Unit *  desttar = Lunar<Unit>::check(L,1);
 		if(desttar)
 			lua_pushnumber(L,ptr->CalcDistance(desttar));
 		return 1;
 	}
-	int GetSpawnX(lua_State * L, GameObjectPointer ptr)
+	int GetSpawnX(lua_State * L, GameObject * ptr)
 	{
 		if(ptr)
 			lua_pushnumber(L,ptr->GetSpawnX());
 		return 1;
 	}
-	int GetSpawnY(lua_State * L, GameObjectPointer ptr)
+	int GetSpawnY(lua_State * L, GameObject * ptr)
 	{
 		if(ptr)
 			lua_pushnumber(L,ptr->GetSpawnY());
 		return 1;
 	}
-	int GetSpawnZ(lua_State * L, GameObjectPointer ptr)
+	int GetSpawnZ(lua_State * L, GameObject * ptr)
 	{
 		if(ptr)
 			lua_pushnumber(L,ptr->GetSpawnZ());
 		return 1;
 	}
-	int GetSpawnO(lua_State * L, GameObjectPointer ptr)
+	int GetSpawnO(lua_State * L, GameObject * ptr)
 	{
 		if(ptr)
 			lua_pushnumber(L,ptr->GetSpawnO());
 		return 1;
 	}
-	int GetX(lua_State * L, GameObjectPointer ptr)
+	int GetX(lua_State * L, GameObject * ptr)
 	{
 		if(ptr != NULL)
 			lua_pushnumber(L,ptr->GetPositionX());
 		return 1;
 	}
-	int GetY(lua_State * L, GameObjectPointer ptr)
+	int GetY(lua_State * L, GameObject * ptr)
 	{
 		if(ptr != NULL)
 			lua_pushnumber(L,ptr->GetPositionY());
 		return 1;
 	}
-	int GetZ(lua_State * L, GameObjectPointer ptr)
+	int GetZ(lua_State * L, GameObject * ptr)
 	{
 		if(ptr != NULL)
 			lua_pushnumber(L,ptr->GetPositionZ());
 		return 1;
 	}
-	int GetO(lua_State * L, GameObjectPointer ptr)
+	int GetO(lua_State * L, GameObject * ptr)
 	{
 		if(ptr != NULL)
 			lua_pushnumber(L,ptr->GetOrientation());
 		return 1;
 	}
 
-	int GetInRangePlayersCount(lua_State * L, GameObjectPointer ptr)
+	int GetInRangePlayersCount(lua_State * L, GameObject * ptr)
 	{
 		if(ptr)
 			lua_pushnumber(L,ptr->GetInRangePlayersCount());
 		return 1;
 	}
-	int GetEntry(lua_State * L, GameObjectPointer ptr)
+	int GetEntry(lua_State * L, GameObject * ptr)
 	{
 		if(ptr)
 			lua_pushnumber(L,ptr->GetEntry());
 		return 1;
 	}
-	int SetOrientation(lua_State * L, GameObjectPointer ptr)
+	int SetOrientation(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		float newo = (float)luaL_checkint(L, 1);
@@ -346,7 +346,7 @@
 		ptr->PushToWorld(Mgr);
 		return 0;
 	}
-	int CalcRadAngle(lua_State * L, GameObjectPointer ptr)
+	int CalcRadAngle(lua_State * L, GameObject * ptr)
 	{
 		float x = (float)luaL_checkint(L,1 );
 		float y = (float)luaL_checkint(L, 2);
@@ -357,7 +357,7 @@
 		lua_pushnumber(L,ptr->calcRadAngle(x,y,x2,y2));
 		return 1;
 	}
-	int GetInstanceID(lua_State * L, GameObjectPointer ptr)
+	int GetInstanceID(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		if(ptr->GetMapMgr()->GetMapInfo()->type == INSTANCE_NULL)
@@ -366,7 +366,7 @@
 		lua_pushinteger(L,ptr->GetInstanceID());
 		return 1;
 	}
-	int GetInRangePlayers(lua_State * L, GameObjectPointer ptr)
+	int GetInRangePlayers(lua_State * L, GameObject * ptr)
 	{
 		uint32 count = 0;
 		lua_newtable(L);
@@ -383,7 +383,7 @@
 		return 1;
 	}
 
-	int GetInRangeGameObjects(lua_State * L, GameObjectPointer ptr)
+	int GetInRangeGameObjects(lua_State * L, GameObject * ptr)
 	{
 		uint32 count = 0;
 		lua_newtable(L);
@@ -399,9 +399,9 @@
 		}
 		return 1;
 	}
-	int IsInFront(lua_State * L, GameObjectPointer ptr)
+	int IsInFront(lua_State * L, GameObject * ptr)
 	{
-		UnitPointer  target = Lunar<Unit>::check(L, 1);
+		Unit *  target = Lunar<Unit>::check(L, 1);
 		if(ptr != NULL && target != NULL)
 		{
 			if(ptr->isInFront((ptr)))
@@ -411,9 +411,9 @@
 		}
 		return 1;
 	}
-	int IsInBack(lua_State * L, GameObjectPointer ptr)
+	int IsInBack(lua_State * L, GameObject * ptr)
 	{
-		UnitPointer target = Lunar<Unit>::check(L, 1);
+		Unit * target = Lunar<Unit>::check(L, 1);
 		if(ptr != NULL && target != NULL)
 		{
 			if(ptr->isInBack((ptr)))
@@ -423,14 +423,14 @@
 		}
 		return 1;
 	}
-	int GetUInt32Value(lua_State * L, GameObjectPointer ptr)
+	int GetUInt32Value(lua_State * L, GameObject * ptr)
 	{
 		int field = luaL_checkint(L,1);
 		if (ptr)
 			lua_pushinteger(L,ptr->GetUInt32Value(field));
 		return 1;
 	}
-	int GetUInt64Value(lua_State * L, GameObjectPointer ptr)
+	int GetUInt64Value(lua_State * L, GameObject * ptr)
 	{
 		int field = luaL_checkint(L,1);
 		if (ptr && field)
@@ -439,7 +439,7 @@
 		}
 		return 1;
 	}
-	int SetUInt32Value(lua_State * L, GameObjectPointer ptr)
+	int SetUInt32Value(lua_State * L, GameObject * ptr)
 	{
 		int field = luaL_checkint(L,1);
 		int value = luaL_checkint(L,2);
@@ -449,7 +449,7 @@
 		}
 		return 0;
 	}
-	int SetUInt64Value(lua_State * L, GameObjectPointer ptr)
+	int SetUInt64Value(lua_State * L, GameObject * ptr)
 	{
 		int field = luaL_checkint(L,1);
 		int value = luaL_checkint(L,2);
@@ -459,7 +459,7 @@
 		}
 		return 0;
 	}
-	int SetFloatValue(lua_State * L, GameObjectPointer ptr)
+	int SetFloatValue(lua_State * L, GameObject * ptr)
 	{
 		int field = luaL_checkint(L,1);
 		float value = (float)luaL_checkint(L,2);
@@ -469,7 +469,7 @@
 		}
 		return 0;
 	}
-	int GetFloatValue(lua_State * L, GameObjectPointer ptr)
+	int GetFloatValue(lua_State * L, GameObject * ptr)
 	{
 		int field = luaL_checkint(L,1);
 		if( ptr && field)
@@ -478,7 +478,7 @@
 		}
 		return 1;
 	}
-	int ModUInt32Value(lua_State * L, GameObjectPointer ptr)
+	int ModUInt32Value(lua_State * L, GameObject * ptr)
 	{
 		int field = luaL_checkint(L,1);
 		int value = luaL_checkint(L,2);
@@ -488,7 +488,7 @@
 		}
 		return 0;
 	}
-	int CastSpell(lua_State * L, GameObjectPointer ptr)
+	int CastSpell(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		uint32 sp = luaL_checkint(L,1);
@@ -496,7 +496,7 @@
 		//ptr->CastSpell(ptr,sp,true);
 		return 0;
 	}
-	int FullCastSpell(lua_State * L, GameObjectPointer ptr)
+	int FullCastSpell(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		uint32 sp = luaL_checkint(L,1);
@@ -504,30 +504,30 @@
 		//ptr->CastSpell(ptr,sp,false);
 		return 0;
 	}
-	int CastSpellOnTarget(lua_State * L, GameObjectPointer ptr)
+	int CastSpellOnTarget(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		uint32 sp = luaL_checkint(L,1);
-		UnitPointer  target = Lunar<Unit>::check(L,2);
+		Unit *  target = Lunar<Unit>::check(L,2);
 		if( !ptr || !sp || sp == 0) return 0;
 		//ptr->CastSpell(target,sp,true);
 		return 0;
 	}
-	int FullCastSpellOnTarget(lua_State * L, GameObjectPointer ptr)
+	int FullCastSpellOnTarget(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		uint32 sp = luaL_checkint(L,1);
-		UnitPointer  target = Lunar<Unit>::check(L,2);
+		Unit *  target = Lunar<Unit>::check(L,2);
 		//ptr->CastSpell(target,sp,false);
 		return 0;
 	}
-	int GetGUID(lua_State * L, GameObjectPointer  ptr)
+	int GetGUID(lua_State * L, GameObject *  ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		lua_pushnumber(L,ptr->GetGUID());
 		return 1;
 	}
-	int Despawn(lua_State * L, GameObjectPointer ptr)
+	int Despawn(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		uint32 delay = luaL_checkint(L,1);
@@ -538,7 +538,7 @@
 		}
 		return 0;
 	}
-	int RegisterAIUpdateEvent(lua_State * L, GameObjectPointer ptr)
+	int RegisterAIUpdateEvent(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		uint32 time = luaL_checkint(L,1);
@@ -546,7 +546,7 @@
 		sEventMgr.AddEvent(TO_GAMEOBJECT(ptr->shared_from_this()),&GameObject::CallScriptUpdate,EVENT_GAMEOBJECT_UPDATE,time,0,0);
 		return 0;
 	}
-	int ModifyAIUpdateEvent(lua_State * L, GameObjectPointer ptr)
+	int ModifyAIUpdateEvent(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		uint32 ntime = luaL_checkint(L,1);
@@ -554,31 +554,31 @@
 		sEventMgr.ModifyEventTime(TO_GAMEOBJECT(ptr->shared_from_this()),EVENT_GAMEOBJECT_UPDATE,ntime);
 		return 0;
 	}
-	int RemoveAIUpdateEvent(lua_State * L, GameObjectPointer ptr)
+	int RemoveAIUpdateEvent(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		sEventMgr.RemoveEvents(TO_GAMEOBJECT(ptr->shared_from_this()),EVENT_GAMEOBJECT_UPDATE);
 		return 0;
 	}
-	int RemoveFromWorld(lua_State * L, GameObjectPointer ptr)
+	int RemoveFromWorld(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		ptr->RemoveFromWorld(true);
 		return 0;
 	}
-	int OnGameObjectEvent(lua_State * L, GameObjectPointer ptr)
+	int OnGameObjectEvent(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		const char * function = luaL_checkstring(L,1);
 		uint32 eventnum = luaL_checkint(L,2);
-		UnitPointer  pMisc = Lunar<Unit>::check(L,3);
+		Unit *  pMisc = Lunar<Unit>::check(L,3);
 		uint32 Misc = luaL_checkint(L,4);
 		if(Misc == 0) Misc = 0;
 		g_engine.OnGameObjectEvent(ptr,function,eventnum,pMisc,Misc,0);
 		return 0;
 	}
 	/* Date : 01/09/2009 */
-	int SetSpawnPosition(lua_State * L, GameObjectPointer ptr)
+	int SetSpawnPosition(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		float x = luaL_checklong(L,1);
@@ -590,28 +590,28 @@
 		//static_pointer_cast<Object>(ptr)->SetSpawnPosition(pvect);
 		return 0;
 	}
-	int IsInArc(lua_State * L, GameObjectPointer ptr)
+	int IsInArc(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
-		UnitPointer  target = Lunar<Unit>::check(L,1);
+		Unit *  target = Lunar<Unit>::check(L,1);
 		float degrees = luaL_checklong(L,2);
 		if(target == NULL || !degrees) return 0;
 		( (ptr->isInArc(TO_OBJECT(target->shared_from_this()),degrees) == true) ? lua_pushboolean(L,1) : lua_pushboolean(L,0));
 		return 1;
 	}
-	int SaveToDB(lua_State * L, GameObjectPointer ptr)
+	int SaveToDB(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		ptr->SaveToDB();
 		return 0;
 	}
-	int DeleteFromDB(lua_State * L, GameObjectPointer ptr)
+	int DeleteFromDB(lua_State * L, GameObject * ptr)
 	{
 		CHECK_TYPEID(TYPEID_GAMEOBJECT);
 		ptr->DeleteFromDB();
 		return 0;
 	}
-	int WorldQuery(lua_State * L, GameObjectPointer ptr)
+	int WorldQuery(lua_State * L, GameObject * ptr)
 	{
 		const char * qry = luaL_checkstring(L,1);
 		if(!qry) return 0;
Index: Trunk/src/LUAScripting/NameSpaces/GameObjectFunctions.h
===================================================================
--- Trunk/src/LUAScripting/NameSpaces/GameObjectFunctions.h	(revision 896)
+++ Trunk/src/LUAScripting/NameSpaces/GameObjectFunctions.h	(working copy)
@@ -4,66 +4,66 @@
 namespace luaGameObject
 {
 	// Begin - GO - Gossip Functions.
-	int GossipCreateMenu(lua_State * L, GameObjectPointer ptr);
-	int GossipMenuAddItem(lua_State * L, GameObjectPointer ptr);
-	int GossipSendMenu(lua_State * L, GameObjectPointer ptr);
-	int GossipComplete(lua_State * L, GameObjectPointer ptr);
-	int GossipSendPOI(lua_State * L, GameObjectPointer ptr);
+	int GossipCreateMenu(lua_State * L, GameObject * ptr);
+	int GossipMenuAddItem(lua_State * L, GameObject * ptr);
+	int GossipSendMenu(lua_State * L, GameObject * ptr);
+	int GossipComplete(lua_State * L, GameObject * ptr);
+	int GossipSendPOI(lua_State * L, GameObject * ptr);
 	// End - Go - Gossip Functions.
-	int PlaySoundToSet(lua_State * L, GameObjectPointer ptr);
-	int GetName(lua_State * L, GameObjectPointer ptr);
-	int Teleport(lua_State * L, GameObjectPointer ptr);
-	int GetClosestPlayer(lua_State * L, GameObjectPointer ptr);
-	int GetZoneId(lua_State *L, GameObjectPointer ptr);
-	int GetItemCount(lua_State * L, GameObjectPointer ptr);
-	int GetSpawnX(lua_State * L, GameObjectPointer ptr);
-	int GetSpawnY(lua_State * L, GameObjectPointer ptr);
-	int GetSpawnZ(lua_State * L, GameObjectPointer ptr);
-	int GetSpawnO(lua_State * L, GameObjectPointer ptr);
-	int GetInRangePlayersCount(lua_State * L, GameObjectPointer ptr);
-	int GetEntry(lua_State * L, GameObjectPointer ptr);
-	int GetX(lua_State * L, GameObjectPointer ptr);
-	int GetY(lua_State * L, GameObjectPointer ptr);
-	int GetZ(lua_State * L, GameObjectPointer ptr);
-	int GetO(lua_State * L, GameObjectPointer ptr);
-	int GetInRangePlayers(lua_State * L, GameObjectPointer ptr);
-	int GetInRangeGameObjects(lua_State * L, GameObjectPointer ptr);
-	int GetInstanceID(lua_State * L, GameObjectPointer ptr);
-	int GetUInt64Value(lua_State * L, GameObjectPointer ptr);
-	int GetUInt32Value(lua_State * L, GameObjectPointer ptr);
-	int GetFloatValue(lua_State * L, GameObjectPointer ptr);
-	int GetGUID(lua_State * L, GameObjectPointer  ptr);
-	int AddItem(lua_State * L, GameObjectPointer ptr);
-	int Despawn(lua_State * L, GameObjectPointer ptr);
-	int IsInWorld(lua_State * L, GameObjectPointer ptr);
-	int IsInBack(lua_State * L, GameObjectPointer ptr);
-	int IsInFront(lua_State * L, GameObjectPointer ptr);
-	int SpawnCreature(lua_State * L, GameObjectPointer ptr);
-	int SpawnGameObject(lua_State * L, GameObjectPointer ptr);
-	int CalcDistance(lua_State * L, GameObjectPointer ptr);
-	int SetOrientation(lua_State * L, GameObjectPointer ptr);
-	int RemoveFromWorld(lua_State * L, GameObjectPointer ptr);
-	int CalcRadAngle(lua_State * L, GameObjectPointer ptr);
-	int SetUInt32Value(lua_State * L, GameObjectPointer ptr);
-	int SetUInt64Value(lua_State * L, GameObjectPointer ptr);
-	int SetFloatValue(lua_State * L, GameObjectPointer ptr);
-	int ModUInt32Value(lua_State * L, GameObjectPointer ptr);
-	int CastSpell(lua_State * L, GameObjectPointer ptr);
-	int FullCastSpell(lua_State * L, GameObjectPointer ptr);
-	int CastSpellOnTarget(lua_State * L, GameObjectPointer ptr);
-	int FullCastSpellOnTarget(lua_State * L, GameObjectPointer ptr);
-	int Despawn(lua_State * L, GameObjectPointer ptr);
-	int RegisterAIUpdateEvent(lua_State * L, GameObjectPointer ptr);
-	int ModifyAIUpdateEvent(lua_State * L, GameObjectPointer ptr);
-	int RemoveAIUpdateEvent(lua_State * L, GameObjectPointer ptr);
-	int OnGameObjectEvent(lua_State * L, GameObjectPointer ptr);
-	int GetCreatureNearestCoords(lua_State * L, GameObjectPointer ptr);
-	int GetGameObjectNearestCoords(lua_State * L, GameObjectPointer ptr);
+	int PlaySoundToSet(lua_State * L, GameObject * ptr);
+	int GetName(lua_State * L, GameObject * ptr);
+	int Teleport(lua_State * L, GameObject * ptr);
+	int GetClosestPlayer(lua_State * L, GameObject * ptr);
+	int GetZoneId(lua_State *L, GameObject * ptr);
+	int GetItemCount(lua_State * L, GameObject * ptr);
+	int GetSpawnX(lua_State * L, GameObject * ptr);
+	int GetSpawnY(lua_State * L, GameObject * ptr);
+	int GetSpawnZ(lua_State * L, GameObject * ptr);
+	int GetSpawnO(lua_State * L, GameObject * ptr);
+	int GetInRangePlayersCount(lua_State * L, GameObject * ptr);
+	int GetEntry(lua_State * L, GameObject * ptr);
+	int GetX(lua_State * L, GameObject * ptr);
+	int GetY(lua_State * L, GameObject * ptr);
+	int GetZ(lua_State * L, GameObject * ptr);
+	int GetO(lua_State * L, GameObject * ptr);
+	int GetInRangePlayers(lua_State * L, GameObject * ptr);
+	int GetInRangeGameObjects(lua_State * L, GameObject * ptr);
+	int GetInstanceID(lua_State * L, GameObject * ptr);
+	int GetUInt64Value(lua_State * L, GameObject * ptr);
+	int GetUInt32Value(lua_State * L, GameObject * ptr);
+	int GetFloatValue(lua_State * L, GameObject * ptr);
+	int GetGUID(lua_State * L, GameObject *  ptr);
+	int AddItem(lua_State * L, GameObject * ptr);
+	int Despawn(lua_State * L, GameObject * ptr);
+	int IsInWorld(lua_State * L, GameObject * ptr);
+	int IsInBack(lua_State * L, GameObject * ptr);
+	int IsInFront(lua_State * L, GameObject * ptr);
+	int SpawnCreature(lua_State * L, GameObject * ptr);
+	int SpawnGameObject(lua_State * L, GameObject * ptr);
+	int CalcDistance(lua_State * L, GameObject * ptr);
+	int SetOrientation(lua_State * L, GameObject * ptr);
+	int RemoveFromWorld(lua_State * L, GameObject * ptr);
+	int CalcRadAngle(lua_State * L, GameObject * ptr);
+	int SetUInt32Value(lua_State * L, GameObject * ptr);
+	int SetUInt64Value(lua_State * L, GameObject * ptr);
+	int SetFloatValue(lua_State * L, GameObject * ptr);
+	int ModUInt32Value(lua_State * L, GameObject * ptr);
+	int CastSpell(lua_State * L, GameObject * ptr);
+	int FullCastSpell(lua_State * L, GameObject * ptr);
+	int CastSpellOnTarget(lua_State * L, GameObject * ptr);
+	int FullCastSpellOnTarget(lua_State * L, GameObject * ptr);
+	int Despawn(lua_State * L, GameObject * ptr);
+	int RegisterAIUpdateEvent(lua_State * L, GameObject * ptr);
+	int ModifyAIUpdateEvent(lua_State * L, GameObject * ptr);
+	int RemoveAIUpdateEvent(lua_State * L, GameObject * ptr);
+	int OnGameObjectEvent(lua_State * L, GameObject * ptr);
+	int GetCreatureNearestCoords(lua_State * L, GameObject * ptr);
+	int GetGameObjectNearestCoords(lua_State * L, GameObject * ptr);
 	/* Date : 01/07/2009 */
-	int SetSpawnPosition(lua_State * L, GameObjectPointer ptr);
-	int SaveToDB(lua_State * L, GameObjectPointer ptr);
-	int DeleteFromDB(lua_State * L, GameObjectPointer ptr);
-	int WorldQuery(lua_State * L, GameObjectPointer ptr);
+	int SetSpawnPosition(lua_State * L, GameObject * ptr);
+	int SaveToDB(lua_State * L, GameObject * ptr);
+	int DeleteFromDB(lua_State * L, GameObject * ptr);
+	int WorldQuery(lua_State * L, GameObject * ptr);
 	/* End Date: 01/07/2009 */
 }
 #endif
Index: Trunk/src/LUAScripting/NameSpaces/ItemFunctions.cpp
===================================================================
--- Trunk/src/LUAScripting/NameSpaces/ItemFunctions.cpp	(revision 896)
+++ Trunk/src/LUAScripting/NameSpaces/ItemFunctions.cpp	(working copy)
@@ -6,10 +6,10 @@
 
 namespace luaItem
 {
-	int GossipCreateMenu(lua_State * L, ItemPointer  ptr)
+	int GossipCreateMenu(lua_State * L, Item *  ptr)
 	{
 		int text_id = luaL_checkint(L, 1);
-		UnitPointer target = Lunar<Unit>::check(L, 2);
+		Unit * target = Lunar<Unit>::check(L, 2);
  		int autosend = luaL_checkint(L, 3);
 		if(target->GetTypeId() != TYPEID_PLAYER) return 0;
 
@@ -20,7 +20,7 @@
 			Menu->SendTo(plr);
 		return 1;
 	}
-	int GossipMenuAddItem(lua_State * L, ItemPointer  ptr)
+	int GossipMenuAddItem(lua_State * L, Item *  ptr)
 	{
 		int icon = luaL_checkint(L, 1);
 		const char * menu_text = luaL_checkstring(L, 2);
@@ -30,26 +30,26 @@
 		Menu->AddItem(icon, menu_text, IntId, (extra > 0) ? true : false);
 		return 1;
 	}
-	int GossipSendMenu(lua_State * L, ItemPointer  ptr)
+	int GossipSendMenu(lua_State * L, Item *  ptr)
 	{
-		UnitPointer target = Lunar<Unit>::check(L, 1);
+		Unit * target = Lunar<Unit>::check(L, 1);
 		if(target->GetTypeId() != TYPEID_PLAYER) return 0;
 		shared_ptr<Player> plr = TO_PLAYER(target);
 		Menu->SendTo(plr);
 		return 1;
 	}
-	int GossipComplete(lua_State * L, ItemPointer  ptr)
+	int GossipComplete(lua_State * L, Item *  ptr)
 	{
-		UnitPointer target = Lunar<Unit>::check(L, 1);
+		Unit * target = Lunar<Unit>::check(L, 1);
 		if(target->GetTypeId() != TYPEID_PLAYER) return 0;
 		shared_ptr<Player> plr = TO_PLAYER(target);
 		plr->Gossip_Complete();
 		return 1;
 	}
-	int GossipSendPOI(lua_State * L, ItemPointer  ptr)
+	int GossipSendPOI(lua_State * L, Item *  ptr)
 	{
-		UnitPointer target = Lunar<Unit>::check(L, 1);
-		PlayerPointer  plr = TO_PLAYER(target);
+		Unit * target = Lunar<Unit>::check(L, 1);
+		Player *  plr = TO_PLAYER(target);
 		float x = (float)luaL_checknumber(L, 2);
 		float y = (float)luaL_checknumber(L, 3);
 		int icon = luaL_checkint(L, 4);
Index: Trunk/src/LUAScripting/NameSpaces/ItemFunctions.h
===================================================================
--- Trunk/src/LUAScripting/NameSpaces/ItemFunctions.h	(revision 896)
+++ Trunk/src/LUAScripting/NameSpaces/ItemFunctions.h	(working copy)
@@ -4,10 +4,10 @@
 
 namespace luaItem
 {
-	int GossipCreateMenu(lua_State * L, ItemPointer  ptr);
-	int GossipMenuAddItem(lua_State * L, ItemPointer  ptr);
-	int GossipSendMenu(lua_State * L, ItemPointer  ptr);
-	int GossipComplete(lua_State * L, ItemPointer  ptr);
-	int GossipSendPOI(lua_State * L, ItemPointer  ptr);
+	int GossipCreateMenu(lua_State * L, Item *  ptr);
+	int GossipMenuAddItem(lua_State * L, Item *  ptr);
+	int GossipSendMenu(lua_State * L, Item *  ptr);
+	int GossipComplete(lua_State * L, Item *  ptr);
+	int GossipSendPOI(lua_State * L, Item *  ptr);
 }
 #endif
\ No newline at end of file
Index: Trunk/src/LUAScripting/NameSpaces/UnitFunctions.cpp
===================================================================
--- Trunk/src/LUAScripting/NameSpaces/UnitFunctions.cpp	(revision 896)
+++ Trunk/src/LUAScripting/NameSpaces/UnitFunctions.cpp	(working copy)
@@ -7,20 +7,20 @@
 
 namespace luaUnit
 {
-	int GossipCreateMenu(lua_State * L, UnitPointer ptr)
+	int GossipCreateMenu(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		int text_id = luaL_checkint(L, 1);
-		UnitPointer player = Lunar<Unit>::check(L,2);
+		Unit * player = Lunar<Unit>::check(L,2);
  		int autosend = luaL_checkint(L, 3);
 		if(player->GetTypeId() != TYPEID_PLAYER) return 0;
-		PlayerPointer plr = TO_PLAYER(player);
+		Player * plr = TO_PLAYER(player);
 		objmgr.CreateGossipMenuForPlayer(&Menu, ptr->GetGUID(), text_id, plr);
 		if(autosend)
 			Menu->SendTo(plr);
 		return 0;
 	}
-	int GossipMenuAddItem(lua_State * L, UnitPointer ptr)
+	int GossipMenuAddItem(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		int icon = luaL_checkint(L, 1);
@@ -31,22 +31,22 @@
 		Menu->AddItem(icon, menu_text, IntId, (extra > 0)? true : false);
 		return 0;
 	}
-	int GossipSendMenu(lua_State * L, UnitPointer ptr)
+	int GossipSendMenu(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		Menu->SendTo(TO_PLAYER(ptr));
 		return 0;
 	}
-	int GossipComplete(lua_State * L, UnitPointer ptr)
+	int GossipComplete(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		TO_PLAYER(ptr)->Gossip_Complete();
 		return 0;
 	}
 
-	int GossipSendPOI(lua_State * L, UnitPointer ptr)
+	int GossipSendPOI(lua_State * L, Unit * ptr)
 	{
-		UnitPointer target = Lunar<Unit>::check(L, 1);
+		Unit * target = Lunar<Unit>::check(L, 1);
 		if(target->GetTypeId() != TYPEID_PLAYER) return 0;
 		shared_ptr<Player> plr = TO_PLAYER(target);
 		float x = (float)luaL_checknumber(L, 2);
@@ -59,19 +59,19 @@
 		plr->Gossip_SendPOI(x, y, icon, flags, data, name);
 		return 0;
 	}
-	int IsPlayer(lua_State * L, UnitPointer ptr)
+	int IsPlayer(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL ||( ptr->GetTypeId() != TYPEID_UNIT && ptr->GetTypeId() != TYPE_PLAYER)) return 0;
 		lua_pushboolean(L,(ptr->IsPlayer())?1:0);
 		return 1;
 	}
-	int IsCreature(lua_State * L, UnitPointer ptr)
+	int IsCreature(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL ||( ptr->GetTypeId() != TYPEID_UNIT && ptr->GetTypeId() != TYPE_PLAYER)) return 0;
 		lua_pushboolean(L,(ptr->IsCreature())?1:0);
 		return 1;
 	}
-	int Emote(lua_State * L, UnitPointer ptr)
+	int Emote(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 emote_id = luaL_checkint(L, 1);
@@ -83,7 +83,7 @@
 			ptr->Emote((EmoteType)emote_id);
 		return 0;
 	}
-	int GetManaPct(lua_State * L, UnitPointer ptr)
+	int GetManaPct(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if (ptr->GetPowerType() == POWER_TYPE_MANA)
@@ -92,7 +92,7 @@
 			lua_pushnil(L);
 		return 1;
 	}
-	int GetName(lua_State * L, UnitPointer ptr)
+	int GetName(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 
@@ -113,7 +113,7 @@
 
 		return 1;
 	}
-	int SendChatMessage(lua_State * L, UnitPointer ptr)
+	int SendChatMessage(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 typ = luaL_checkint(L, 1);
@@ -125,7 +125,7 @@
 		ptr->SendChatMessage(typ, lang, message);
 		return 0;
 	}
-	int MoveTo(lua_State * L, UnitPointer ptr)
+	int MoveTo(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		double x = luaL_checknumber(L, 1);
@@ -140,7 +140,7 @@
 		return 0;
 	}
 
-	int SetMovementType(lua_State * L, UnitPointer ptr)
+	int SetMovementType(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 typ = luaL_checkint(L, 1);
@@ -148,35 +148,35 @@
 		return 0;
 	}
 
-	int GetX(lua_State * L, UnitPointer ptr)
+	int GetX(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		lua_pushnumber(L, (double)ptr->GetPositionX());
 		return 1;
 	}
 
-	int GetY(lua_State * L, UnitPointer ptr)
+	int GetY(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		lua_pushnumber(L, (double)ptr->GetPositionY());
 		return 1;
 	}
 
-	int GetZ(lua_State * L, UnitPointer ptr)
+	int GetZ(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		lua_pushnumber(L, (double)ptr->GetPositionZ());
 		return 1;
 	}
 
-	int GetO(lua_State * L, UnitPointer ptr)
+	int GetO(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		lua_pushnumber(L, (double)ptr->GetOrientation());
 		return 1;
 	}
 
-	int CastSpell(lua_State * L, UnitPointer ptr)
+	int CastSpell(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 sp = luaL_checkint(L,1);
@@ -187,7 +187,7 @@
 		return 0;
 	}
 
-	int FullCastSpell(lua_State * L, UnitPointer ptr)
+	int FullCastSpell(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 sp = luaL_checkint(L,1);
@@ -197,11 +197,11 @@
 			TO_PLAYER(ptr)->CastSpell(TO_UNIT(ptr),sp,false);
 		return 0;
 	}
-	int CastSpellOnTarget(lua_State * L, UnitPointer ptr)
+	int CastSpellOnTarget(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 sp = luaL_checkint(L, 1);
-		UnitPointer target = Lunar<Unit>::check(L, 2);
+		Unit * target = Lunar<Unit>::check(L, 2);
 
 		if(sp==0 || target==NULL) return 0;
 		if(ptr->GetTypeId() == TYPEID_UNIT)
@@ -210,11 +210,11 @@
 			TO_PLAYER(ptr)->CastSpell(target,sp,true);
 		return 0;
 	}
-	int FullCastSpellOnTarget(lua_State * L, UnitPointer ptr)
+	int FullCastSpellOnTarget(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 sp = luaL_checkint(L, 1);
-		UnitPointer target = Lunar<Unit>::check(L, 2);
+		Unit * target = Lunar<Unit>::check(L, 2);
 
 		if(sp==0 || target==NULL) return 0;
 		if(ptr->GetTypeId() == TYPEID_UNIT)
@@ -223,7 +223,7 @@
 			TO_PLAYER(ptr)->CastSpell(target,sp,false);
 		return 0;
 	}
-	int SpawnCreature(lua_State * L, UnitPointer ptr)
+	int SpawnCreature(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 
@@ -242,7 +242,7 @@
 
 		if(!proto || !inf) return 0;
 
-		CreaturePointer pC = ptr->GetMapMgr()->GetInterface()->SpawnCreature(entry_id,x,y,z,o,false,false,0,0);
+		Creature * pC = ptr->GetMapMgr()->GetInterface()->SpawnCreature(entry_id,x,y,z,o,false,false,0,0);
 		if(pC == NULL) return 0;
 		pC->SetUInt32Value(UNIT_FIELD_FACTIONTEMPLATE,faction);
 		pC->_setFaction();
@@ -256,7 +256,7 @@
 		Lunar<Unit>::push(L,TO_UNIT(pC));
 		return 1;
 	}
-	int SpawnGameObject(lua_State * L, UnitPointer ptr)
+	int SpawnGameObject(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 
@@ -272,7 +272,7 @@
 		GameObjectInfo * goi = GameObjectNameStorage.LookupEntry(entry_id);
 		if(!goi) return 0;
 
-		GameObjectPointer pC = ptr->GetMapMgr()->GetInterface()->SpawnGameObject(entry_id,x,y,z,o,false,0,0);
+		GameObject * pC = ptr->GetMapMgr()->GetInterface()->SpawnGameObject(entry_id,x,y,z,o,false,0,0);
 		if(pC == NULL) return 0;
 		pC->SetMapId(ptr->GetMapId());
 		pC->SetInstanceID(ptr->GetInstanceID());
@@ -284,7 +284,7 @@
 		Lunar<GameObject>::push(L,pC);
 		return 1;
 	}
-	int RegisterEvent(lua_State * L, UnitPointer ptr)
+	int RegisterEvent(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 
@@ -300,7 +300,7 @@
 		sEventMgr.AddEvent(pCreature, &Creature::TriggerScriptEvent, strFunc, EVENT_CREATURE_UPDATE, (uint32)delay, (uint32)repeats, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
 		return 0;
 	}
-	int RemoveEvents(lua_State * L, UnitPointer ptr)
+	int RemoveEvents(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 
@@ -309,7 +309,7 @@
 		return 0;
 	}
 
-	int SetFaction(lua_State * L, UnitPointer ptr)
+	int SetFaction(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL || (ptr->GetTypeId() !=  TYPEID_UNIT && ptr->GetTypeId() != TYPEID_PLAYER) ) return 0;
 		int faction = luaL_checkint(L,1);
@@ -320,7 +320,7 @@
 		ptr->_setFaction();
 		return 0;
 	}
-	int SetStandState(lua_State * L, UnitPointer ptr) //states 0..8
+	int SetStandState(lua_State * L, Unit * ptr) //states 0..8
 	{
 		CHECK_PTR();
 		int state = luaL_checkint(L,1);
@@ -329,14 +329,14 @@
 		ptr->SetStandState(state);
 		return 0;
 	}
-	int IsInCombat(lua_State * L, UnitPointer ptr)
+	int IsInCombat(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		lua_pushboolean(L,(ptr->CombatStatus.IsInCombat())?1:0);
 		return 1;
 	}
 
-	int SetScale(lua_State * L, UnitPointer ptr)
+	int SetScale(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		double faction = luaL_checknumber(L,1);
@@ -347,7 +347,7 @@
 		return 0;
 	}
 
-	int SetModel(lua_State * L, UnitPointer ptr)
+	int SetModel(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 
@@ -358,7 +358,7 @@
 		ptr->SetUInt32Value(UNIT_FIELD_DISPLAYID,modelid);
 		return 0;
 	}
-	int SetCombatCapable(lua_State * L, UnitPointer ptr)
+	int SetCombatCapable(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		int enabled = luaL_checkint(L,1);
@@ -367,7 +367,7 @@
 		return 0;
 	}
 
-	int SetCombatMeleeCapable(lua_State * L, UnitPointer ptr)
+	int SetCombatMeleeCapable(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		int enabled = luaL_checkint(L,1);
@@ -375,7 +375,7 @@
 		return 0;
 	}
 
-	int SetCombatRangedCapable(lua_State * L, UnitPointer ptr)
+	int SetCombatRangedCapable(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		int enabled = luaL_checkint(L,1);
@@ -383,7 +383,7 @@
 		return 0;
 	}
 
-	int SetCombatSpellCapable(lua_State * L, UnitPointer ptr)
+	int SetCombatSpellCapable(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		int enabled = luaL_checkint(L,1);
@@ -391,7 +391,7 @@
 		return 0;
 	}
 
-	int SetCombatTargetingCapable(lua_State * L, UnitPointer ptr)
+	int SetCombatTargetingCapable(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		int enabled = luaL_checkint(L,1);
@@ -399,14 +399,14 @@
 		return 0;
 	}
 
-	int DestroyCustomWaypointMap(lua_State * L, UnitPointer ptr)
+	int DestroyCustomWaypointMap(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		TO_CREATURE(ptr)->DestroyCustomWaypointMap();
 		return 0;
 	}
 
-	int CreateCustomWaypointMap(lua_State * L, UnitPointer ptr)
+	int CreateCustomWaypointMap(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		shared_ptr<Creature> pCreature = TO_CREATURE(ptr);
@@ -422,7 +422,7 @@
 		return 0;
 	}
 
-	int CreateWaypoint(lua_State * L, UnitPointer ptr)
+	int CreateWaypoint(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 wpid = luaL_checkint(L,1);
@@ -458,7 +458,7 @@
 		return 0;
 	}
 
-	int MoveToWaypoint(lua_State * L, UnitPointer ptr)
+	int MoveToWaypoint(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR(); // players w/ ai enabled can move to wps.
 		uint32 id = luaL_checkint(L,1);
@@ -466,7 +466,7 @@
 		return 0;
 	}
 
-	int RemoveItem(lua_State * L, UnitPointer ptr)
+	int RemoveItem(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		int id = luaL_checkint(L,1);
@@ -476,7 +476,7 @@
 		return 0;
 	}
 
-	int AddItem(lua_State * L, UnitPointer ptr)
+	int AddItem(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		int id = luaL_checkint(L,1);
@@ -503,7 +503,7 @@
 
 		return 0;
 	}
-	int GetInstanceID(lua_State * L, UnitPointer ptr)
+	int GetInstanceID(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if( ptr->GetMapMgr()->GetMapInfo()->type == INSTANCE_NULL)
@@ -513,12 +513,12 @@
 		return 1;
 	}
 
-	int GetClosestPlayer(lua_State * L, UnitPointer ptr)
+	int GetClosestPlayer(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 
 		float dist, d2;
-		PlayerPointer ret = NULLPLR;
+		Player * ret = NULLPLR;
 
 		for(PlayerSet::iterator itr = ptr->GetInRangePlayerSetBegin(); itr != ptr->GetInRangePlayerSetEnd(); ++itr)
 		{
@@ -537,7 +537,7 @@
 
 		return 1;
 	}
-	int GetRandomPlayer(lua_State * L, UnitPointer ptr)
+	int GetRandomPlayer(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if(!ptr->HasInRangeObjects())
@@ -647,7 +647,7 @@
 
 		return 1;
 	}
-	int GetRandomFriend(lua_State * L, UnitPointer ptr)
+	int GetRandomFriend(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		if(!ptr->HasInRangeObjects())
@@ -655,12 +655,12 @@
 			lua_pushnil(L);
 			return 1;
 		}
-		std::vector<UnitPointer>Creatures;
+		std::vector<Unit *>Creatures;
 		for(ObjectSet::iterator itr = ptr->GetInRangeSetBegin(); itr != ptr->GetInRangeSetEnd(); ++itr)
 		{
 			if( (*itr)->IsUnit() && isFriendly(ptr,(*itr)) )
 			{
-				UnitPointer pTemp = TO_UNIT((*itr));
+				Unit * pTemp = TO_UNIT((*itr));
 				Creatures.push_back(pTemp);
 			}
 		}
@@ -668,7 +668,7 @@
 			Lunar<Unit>::push(L,Creatures[RandomUInt( (uint32)Creatures.size()-1)]);
 		return 1;
 	}
-	int GetRandomEnemy(lua_State * L, UnitPointer ptr)
+	int GetRandomEnemy(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		if(!ptr->HasInRangeObjects())
@@ -676,12 +676,12 @@
 			lua_pushnil(L);
 			return 1;
 		}
-		std::vector<UnitPointer>Enemies;
+		std::vector<Unit *>Enemies;
 		for(ObjectSet::iterator itr = ptr->GetInRangeSetBegin(); itr != ptr->GetInRangeSetEnd(); ++itr)
 		{
 			if( (*itr)->IsUnit() && isHostile(ptr,(*itr)) )
 			{
-				UnitPointer pTemp = TO_UNIT((*itr));
+				Unit * pTemp = TO_UNIT((*itr));
 				Enemies.push_back( pTemp);
 			}
 		}
@@ -690,7 +690,7 @@
 		return 1;
 	}
 
-	int StopMovement(lua_State * L, UnitPointer ptr)
+	int StopMovement(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		int tim = luaL_checkint(L,1);
@@ -698,7 +698,7 @@
 		return 0;
 	}
 
-	int RemoveAura(lua_State * L, UnitPointer ptr)
+	int RemoveAura(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		int auraid = luaL_checkint(L,1);
@@ -706,7 +706,7 @@
 		return 0;
 	}
 
-	int PlaySoundToSet(lua_State * L, UnitPointer ptr)
+	int PlaySoundToSet(lua_State * L, Unit * ptr)
 	{
 		if(!ptr) return 0;
 		int soundid = luaL_checkint(L,1);
@@ -714,7 +714,7 @@
 		return 0;
 	}
 
-	int GetUnitBySqlId(lua_State * L, UnitPointer ptr)
+	int GetUnitBySqlId(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 sqlid = luaL_checkint(L,1);
@@ -726,7 +726,7 @@
 		return 1;
 	}
 
-	int Despawn(lua_State * L, UnitPointer ptr)
+	int Despawn(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		int delay = luaL_checkint(L,1);
@@ -735,7 +735,7 @@
 		return 0;
 	}
 
-	int GetHealthPct(lua_State * L, UnitPointer ptr)
+	int GetHealthPct(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL)
 			lua_pushinteger(L,0);
@@ -744,7 +744,7 @@
 
 		return 1;
 	}
-	int SetHealthPct(lua_State * L, UnitPointer ptr)
+	int SetHealthPct(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		if(ptr->GetUInt32Value(UNIT_FIELD_HEALTH) == 0 && ptr->getDeathState() != ALIVE)
@@ -754,7 +754,7 @@
 			ptr->SetHealthPct(val);
 		return 1;
 	}
-	int GetItemCount(lua_State * L, UnitPointer ptr)
+	int GetItemCount(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID_RET_INT(TYPEID_PLAYER);
 		int itemid = luaL_checkint(L,1);
@@ -762,7 +762,7 @@
 		return 1;
 	}
 
-	int GetMainTank(lua_State * L, UnitPointer ptr)
+	int GetMainTank(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID_RET_INT(TYPEID_UNIT);
 		shared_ptr<Unit> ret = ptr->GetAIInterface()->GetMostHated();
@@ -772,7 +772,7 @@
 			Lunar<Unit>::push(L,ret);
 		return 1;
 	}
-	int GetAddTank(lua_State * L, UnitPointer ptr)
+	int GetAddTank(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID_RET_INT(TYPEID_UNIT);
 		shared_ptr<Unit> ret = ptr->GetAIInterface()->GetSecondHated();
@@ -782,14 +782,14 @@
 			Lunar<Unit>::push(L,ret);
 		return 1;
 	}
-	int ClearThreatList(lua_State * L, UnitPointer ptr)
+	int ClearThreatList(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID_RET_INT(TYPEID_UNIT);
 		ptr->GetAIInterface()->ClearHateList();
 		return 1;
 	}
 
-	int GetTauntedBy(lua_State * L, UnitPointer ptr)
+	int GetTauntedBy(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT)
 		if (!ptr->GetAIInterface()->getTauntedBy())
@@ -798,10 +798,10 @@
 			Lunar<Unit>::push(L,(ptr->GetAIInterface()->getTauntedBy()),false);
 		return 1;
 	}
-	int SetTauntedBy(lua_State * L, UnitPointer ptr)
+	int SetTauntedBy(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		if (!target || ptr->GetAIInterface()->GetIsTaunted() || target==ptr)
 			return 0;
 		else
@@ -809,7 +809,7 @@
 		return 1;
 	}
 
-	int GetSoulLinkedWith(lua_State * L, UnitPointer ptr)
+	int GetSoulLinkedWith(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		/*if(ptr->GetAIInterface()->getSoullinkedWith() == NULL)
@@ -818,20 +818,20 @@
 			Lunar<Unit>::push(L,(ptr->GetAIInterface()->getSoullinkedWith());*/
 		return 1;
 	}
-	int SetSoulLinkedWith(lua_State * L, UnitPointer ptr)
+	int SetSoulLinkedWith(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
-		/*UnitPointer target = Lunar<Unit>::check(L, 1);
+		/*Unit * target = Lunar<Unit>::check(L, 1);
 		if (!target || ptr->GetAIInterface()->GetIsSoulLinked() || target==ptr)
 			return 0;
 		else
 			ptr->GetAIInterface()->SetSoulLinkedWith(TO_UNIT(ptr));*/
 		return 0;
 	}
-	int ChangeTarget(lua_State * L, UnitPointer ptr)
+	int ChangeTarget(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		if (!target || !isHostile(TO_OBJECT(ptr),TO_OBJECT(target)) || ptr==target )
 			return 0;
 		else
@@ -839,7 +839,7 @@
 		return 0;
 	}
 
-	int HasFinishedQuest(lua_State * L, UnitPointer ptr)
+	int HasFinishedQuest(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID_RET(TYPEID_PLAYER);
 		int questid = luaL_checkint(L,1);
@@ -851,7 +851,7 @@
 		return 1;
 	}
 
-	int UnlearnSpell(lua_State * L, UnitPointer ptr)
+	int UnlearnSpell(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		int spellid = luaL_checkint(L,1);
@@ -859,7 +859,7 @@
 		return 0;
 	}
 
-	int LearnSpell(lua_State * L, UnitPointer ptr)
+	int LearnSpell(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		int spellid = luaL_checkint(L,1);
@@ -867,7 +867,7 @@
 		return 0;
 	}
 
-	int MarkQuestObjectiveAsComplete(lua_State * L, UnitPointer ptr)
+	int MarkQuestObjectiveAsComplete(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		int questid = luaL_checkint(L,1);
@@ -883,7 +883,7 @@
 		return 0;
 	}
 
-	/*int KnockBack(lua_State * L, UnitPointer ptr)
+	/*int KnockBack(lua_State * L, Unit * ptr)
 	{
 		if(!ptr) return 0;
 		double dx = luaL_checknumber(L,1);
@@ -898,7 +898,7 @@
 
 		return 0;
 	}*/
-	int SendAreaTriggerMessage(lua_State * L, UnitPointer ptr)
+	int SendAreaTriggerMessage(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		const char * msg = luaL_checkstring(L,1);
@@ -907,7 +907,7 @@
 		return 0;
 	}
 
-	int SendBroadcastMessage(lua_State * L, UnitPointer ptr)
+	int SendBroadcastMessage(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		shared_ptr<Player> plr = TO_PLAYER( ptr);
@@ -917,7 +917,7 @@
 		return 0;
 	}
 
-	int TeleportUnit(lua_State * L, UnitPointer ptr)
+	int TeleportUnit(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 mapId = luaL_checkint(L, 1);
@@ -931,7 +931,7 @@
 		return 0;
 	}
 
-	int GetHealth(lua_State * L, UnitPointer ptr)
+	int GetHealth(lua_State * L, Unit * ptr)
 	{
 		if( ptr == NULL )
 			lua_pushnil(L);
@@ -940,7 +940,7 @@
 		return 1;
 	}
 
-	int GetMaxHealth(lua_State * L, UnitPointer ptr)
+	int GetMaxHealth(lua_State * L, Unit * ptr)
 	{
 		if( ptr == NULL )
 			lua_pushnil(L);
@@ -949,7 +949,7 @@
 		return 1;
 	}
 
-	int SetHealth(lua_State * L, UnitPointer ptr)
+	int SetHealth(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		if(ptr->GetUInt32Value(UNIT_FIELD_HEALTH) == 0 && ptr->getDeathState() != ALIVE) return 0;
@@ -964,7 +964,7 @@
 		return 0;
 	}
 
-	int SetMaxHealth(lua_State * L, UnitPointer ptr)
+	int SetMaxHealth(lua_State * L, Unit * ptr)
 	{
 		int val = luaL_checkint( L, 1 );
 		if( ptr != NULL && val > 0 )
@@ -978,28 +978,28 @@
 		return 0;
 	}
 
-	int WipeHateList(lua_State * L, UnitPointer ptr)
+	int WipeHateList(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID_RET_INT(TYPEID_UNIT);
 		ptr->GetAIInterface()->WipeHateList();
 		return 0;
 	}
 
-	int WipeTargetList(lua_State * L, UnitPointer ptr)
+	int WipeTargetList(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID_RET_INT(TYPEID_UNIT);
 		ptr->GetAIInterface()->WipeTargetList();
 		return 0;
 	}
 
-	int WipeCurrentTarget(lua_State * L, UnitPointer ptr)
+	int WipeCurrentTarget(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID_RET_INT(TYPEID_UNIT);
 		ptr->GetAIInterface()->WipeCurrentTarget();
 		return 0;
 	}
 
-	int GetPlayerClass(lua_State * L, UnitPointer ptr)
+	int GetPlayerClass(lua_State * L, Unit * ptr)
 	{
 	   if(ptr == NULL || ptr->GetTypeId()!=TYPEID_PLAYER) 
 	   {
@@ -1044,33 +1044,33 @@
 	   }
 	   return 1;
 	}
-	int ClearHateList(lua_State * L, UnitPointer ptr)
+	int ClearHateList(lua_State * L, Unit * ptr)
 	{
  		CHECK_TYPEID_RET_INT(TYPEID_UNIT);
  		ptr->GetAIInterface()->ClearHateList();
  		return 1;
 	}
-	int PvPFlagged(lua_State * L, UnitPointer ptr)
+	int PvPFlagged(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_pushboolean(L,( TO_PLAYER( ptr )->IsPvPFlagged())?1:0);
 		return 1;
 	}
-	int GetRunSpeed(lua_State *  L, UnitPointer ptr)
+	int GetRunSpeed(lua_State *  L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if(ptr->GetTypeId() == TYPEID_PLAYER || ptr->GetTypeId() == TYPEID_UNIT)
 			lua_pushnumber(L,(float)ptr->m_runSpeed);
 		return 1;
 	}
-	int GetFlySpeed(lua_State * L, UnitPointer ptr)
+	int GetFlySpeed(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if(ptr->GetTypeId() == TYPEID_UNIT || ptr->GetTypeId() == TYPEID_PLAYER)
 			lua_pushnumber(L,(float)ptr->m_flySpeed);
 		return 1;
 	}
-	int GetModel(lua_State * L, UnitPointer ptr)
+	int GetModel(lua_State * L, Unit * ptr)
 	{
 		if( ptr == NULL )
 			lua_pushnil(L);
@@ -1079,25 +1079,25 @@
 
 		return 1;
 	}
-	int Disconnect(lua_State * L, UnitPointer ptr)
+	int Disconnect(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		TO_PLAYER( ptr )->GetSession()->Disconnect();
 		return 0;
 	}
-	int GetZone(lua_State * L, UnitPointer ptr)
+	int GetZone(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		lua_pushinteger(L,ptr->GetZoneId());
 		return 1;
 	}
-	int GetMapId(lua_State * L, UnitPointer ptr)
+	int GetMapId(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		lua_pushinteger(L,ptr->GetMapId());
 		return 1;
 	}
-	int SendWideBroadcastMessage(lua_State * L, UnitPointer ptr)
+	int SendWideBroadcastMessage(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		const char * msg = luaL_checkstring(L,1);
@@ -1105,15 +1105,15 @@
 		sWorld.SendWorldWideScreenText(msg, 0);
 		return 0;
 	}
-	int IsBehind(lua_State * L, UnitPointer ptr)
+	int IsBehind(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		if(target == NULL) return 0;
 		lua_pushboolean(L,(ptr->isInBack( TO_UNIT( target)))?1:0);
 		return 1;
 	}
-	int RemoveFlag(lua_State * L, UnitPointer ptr)
+	int RemoveFlag(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		int newflag = luaL_checkint( L, 1 );
@@ -1121,7 +1121,7 @@
 		ptr->RemoveFlag(newflag, oldflag);
 		return 0;
 	}
-	int IsFlying(lua_State * L, UnitPointer ptr)
+	int IsFlying(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL || ptr->GetTypeId() !=  TYPEID_PLAYER && ptr->GetTypeId() != TYPEID_UNIT) return 0;
 		if(ptr->GetTypeId() == TYPEID_PLAYER)
@@ -1130,7 +1130,7 @@
 			//lua_pushboolean(L,( TO_CREATURE( ptr)->GetAIInterface()->IsFlying())?1:0);
 			return 1;
 	}
-	int SetFactionStanding(lua_State * L, UnitPointer ptr)
+	int SetFactionStanding(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		int faction = luaL_checkint( L, 1 );
@@ -1139,56 +1139,56 @@
 			TO_PLAYER( ptr)->SetStanding(faction,val);
 		return 0;
 	}
-	int GetLevel(lua_State * L, UnitPointer ptr)
+	int GetLevel(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL || ptr->GetTypeId() != TYPEID_UNIT && ptr->GetTypeId() != TYPEID_PLAYER) return 0;
 		lua_pushinteger(L,ptr->getLevel());
 		return 1;
 	}
-	int IsAlive(lua_State * L, UnitPointer ptr)
+	int IsAlive(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL || ptr->GetTypeId() != TYPEID_UNIT && ptr->GetTypeId() != TYPEID_PLAYER) return 0;
 		lua_pushboolean(L,(ptr->isAlive())?1:0);
 		return 1;
 	}
-	int IsStealthed(lua_State * L, UnitPointer ptr)
+	int IsStealthed(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		//lua_pushboolean(L,(TO_PLAYER(ptr)->IsStealth())?1:0);
 		return 1;
 	}
-	int IsGM(lua_State * L, UnitPointer ptr)
+	int IsGM(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_pushboolean(L,(TO_PLAYER(ptr)->GetSession()->HasGMPermissions())?1:0);
 		return 1;
 	}
-	int IsAlliance(lua_State * L, UnitPointer ptr)
+	int IsAlliance(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_pushboolean(L,(TO_PLAYER(ptr)->GetTeam() == 1)?1:0);
 		return 1;
 	}
-	int IsHorde(lua_State * L, UnitPointer ptr)
+	int IsHorde(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_pushboolean(L,(TO_PLAYER(ptr)->GetTeam() == 2)?1:0);
 		return 1;
 	}
-	int HasAmountOfPlayers(lua_State * L, UnitPointer ptr)
+	int HasAmountOfPlayers(lua_State * L, Unit * ptr)
 	{
 		int Amount = luaL_checkint( L, 1 );
 		if (Amount == 0) return 0;
 		lua_pushboolean(L, (sWorld.AlliancePlayers+sWorld.HordePlayers == Amount)?1:0);
 		return 1;
 	}
-	int HasGMTagOn(lua_State * L, UnitPointer ptr)
+	int HasGMTagOn(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_pushboolean(L,(TO_PLAYER(ptr)->bGMTagOn)?1:0);
 		return 1;
 	}
-	int CastSpellAoF(lua_State * L, UnitPointer ptr)
+	int CastSpellAoF(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 sp = luaL_checkint(L, 4);
@@ -1200,7 +1200,7 @@
 		ptr->CastSpellAoF(x,y,z,dbcSpell.LookupEntry(sp), true);
 		return 0;
 	}
-	int RemoveAllAuras(lua_State * L, UnitPointer ptr)
+	int RemoveAllAuras(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if(ptr->GetTypeId() != TYPEID_UNIT || ptr->GetTypeId() != TYPEID_PLAYER )
@@ -1208,53 +1208,53 @@
 		ptr->RemoveAllAuras();
 		return 0;
 	}
-	int TogglePvP(lua_State * L, UnitPointer ptr)
+	int TogglePvP(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		TO_PLAYER(ptr)->PvPToggle();
 		return 0;
 	}
-	int ApplyRestState(lua_State * L, UnitPointer ptr)
+	int ApplyRestState(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
-		PlayerPointer  plr = TO_PLAYER(ptr);
+		Player *  plr = TO_PLAYER(ptr);
 		uint32 rs = luaL_checkint(L, 1);
 		plr->ApplyPlayerRestState( (rs >0)?true:false);
 		return 0;
 	}
-	int ResurrectPlayer(lua_State * L, UnitPointer ptr)
+	int ResurrectPlayer(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
-		PlayerPointer  Plr = TO_PLAYER(ptr);
+		Player *  Plr = TO_PLAYER(ptr);
 		Plr->ResurrectPlayer(NULLPLR);
 		return 0;
 	}
-	int SetEmoteState(lua_State * L, UnitPointer ptr)
+	int SetEmoteState(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		uint32 emote = luaL_checkint(L, 1);
 		ptr->setEmoteState(emote);
 		return 0;
 	}
-	int GetPlayerAccountName(lua_State * L, UnitPointer ptr)
+	int GetPlayerAccountName(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_pushstring(L,TO_PLAYER(ptr)->GetSession()->GetAccountNameS());
 		return 1;
 	}
-	int RemoveStealth(lua_State * L, UnitPointer ptr)
+	int RemoveStealth(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		TO_PLAYER(ptr)->RemoveStealth();
 		return 0;
 	}
-	int Die(lua_State * L, UnitPointer ptr)
+	int Die(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		ptr->DealDamage(TO_UNIT(ptr),ptr->GetUInt32Value(UNIT_FIELD_HEALTH),0,0,0);
 		return 0;
 	}
-	int SetStealth(lua_State * L, UnitPointer ptr)
+	int SetStealth(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 id = luaL_checkint(L, 1);
@@ -1262,14 +1262,14 @@
 		TO_PLAYER(ptr)->SetStealth(id);
 		return 0;
 	}
-	int WorldQuery(lua_State * L, UnitPointer ptr)
+	int WorldQuery(lua_State * L, Unit * ptr)
 	{
 		const char * query = luaL_checkstring(L, 1);
 		if(query == 0) return 0;
 		WorldDatabase.Query(query);
 		return 0;
 	}
-	int AddCreatureLoot(lua_State * L, UnitPointer ptr)
+	int AddCreatureLoot(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		int entry = luaL_checkint(L, 1);
@@ -1283,10 +1283,10 @@
 		return 0;
 	}
 
-	int SystemMessageToPlr(lua_State * L, UnitPointer ptr)
+	int SystemMessageToPlr(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
-		UnitPointer pTemp = Lunar<Unit>::check(L, 1);
+		Unit * pTemp = Lunar<Unit>::check(L, 1);
 		const char * msg = luaL_checkstring(L, 2);
 		int color = luaL_checkint(L, 3);
 		shared_ptr<Player> target = TO_PLAYER(pTemp);
@@ -1303,7 +1303,7 @@
 		return 0;
 	}
 
-	int CharacterQuery(lua_State * L, UnitPointer ptr)
+	int CharacterQuery(lua_State * L, Unit * ptr)
 	{
 		const char * query = luaL_checkstring(L, 1);
 		if(query == 0) return 0;
@@ -1311,14 +1311,14 @@
 		return 0;
 	}
 
-	int IsInvincible(lua_State * L, UnitPointer ptr)
+	int IsInvincible(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		if(ptr->GetTypeId() != TYPEID_PLAYER && ptr->GetTypeId() != TYPEID_UNIT ) return 0;
 		lua_pushboolean(L,(TO_PLAYER(ptr)->bInvincible)?1:0);
 		return 1;
 	}
-	int SaveToDB(lua_State * L, UnitPointer ptr)
+	int SaveToDB(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if(ptr->GetTypeId() == TYPEID_UNIT)
@@ -1328,7 +1328,7 @@
 		return 0;
 	}
 
-	int IsMoving(lua_State * L, UnitPointer ptr)
+	int IsMoving(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if(ptr->GetTypeId() == TYPEID_UNIT)
@@ -1337,7 +1337,7 @@
 			lua_pushboolean(L,( TO_PLAYER(ptr)->m_isMoving)?1:0);
 		return 1;
 	}
-	int IsAttacking(lua_State * L, UnitPointer ptr)
+	int IsAttacking(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if(ptr->GetTypeId() == TYPEID_UNIT)
@@ -1347,14 +1347,14 @@
 		return 1;
 	}
 			
-	int SetInvincible(lua_State * L, UnitPointer ptr)
+	int SetInvincible(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 choice = luaL_checkint(L,1);
 		ptr->bInvincible = ( (choice > 0)? true : false );
 		return 0;
 	}
-	bool IsInrangeSQ( ObjectPointer t1, ObjectPointer t2,float sq_r)
+	bool IsInrangeSQ( Object * t1, Object * t2,float sq_r)
 	{
 		if( !t1 || !t2 )
 			return false;
@@ -1364,15 +1364,15 @@
 		float dist = distx*distx + disty*disty; 
 		return dist <= sq_r;
 	}
-	int IsInRange(lua_State * L, UnitPointer ptr)
+	int IsInRange(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
-		PlayerPointer  plr = TO_PLAYER(ptr);
+		Player *  plr = TO_PLAYER(ptr);
 		float range = (float)luaL_checknumber(L,1);
 		( (IsInrangeSQ(plr, ptr, range) == true)?lua_pushboolean(L,1) : lua_pushboolean(L,0) );
 		return 1;
 	}
-	int FinishQuest(lua_State * L, UnitPointer ptr)
+	int FinishQuest(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		QuestLogEntry * qle;
@@ -1383,7 +1383,7 @@
 		return 0;
 	}
 		
-	int IfQuestCanBeFinished(lua_State * L, UnitPointer ptr)
+	int IfQuestCanBeFinished(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		QuestLogEntry * qle;
@@ -1394,7 +1394,7 @@
 		lua_pushboolean(L, (qle->CanBeFinished())?1:0);
 		return 1;
 	}
-	int SetQuestComplete(lua_State * L, UnitPointer ptr)
+	int SetQuestComplete(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		QuestLogEntry * qle;
@@ -1406,7 +1406,7 @@
 		return 0;
 	}
 
-	int SubtractTime(lua_State * L, UnitPointer ptr)
+	int SubtractTime(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		QuestLogEntry * qle;
@@ -1419,59 +1419,59 @@
 		return 0;
 	}
 
-	int MoveToPlayer(lua_State * L, UnitPointer ptr)
+	int MoveToPlayer(lua_State * L, Unit * ptr)
 	{
-		UnitPointer plr = Lunar<Unit>::check(L,1);
+		Unit * plr = Lunar<Unit>::check(L,1);
 		if( plr->IsPlayer())
 			ptr->GetAIInterface()->MoveTo(plr->GetPositionX(),plr->GetPositionY(),plr->GetPositionZ(),ptr->GetOrientation());
 		return 0;
 	}
 
-	int EventCreatureYell(lua_State * L, UnitPointer ptr)
+	int EventCreatureYell(lua_State * L, Unit * ptr)
 	{
-		CreaturePointer cre = TO_CREATURE(ptr);
+		Creature * cre = TO_CREATURE(ptr);
 		uint32 time = luaL_checkint(L, 2);
 		string msg = luaL_checkstring(L, 1);
 		//sEAS.EventCreatureYell(cre, msg, time);
 		return 0;
 	}
 
-	int EventCreatureDelete(lua_State * L, UnitPointer ptr)
+	int EventCreatureDelete(lua_State * L, Unit * ptr)
 	{
-		CreaturePointer cre = TO_CREATURE(ptr);
+		Creature * cre = TO_CREATURE(ptr);
 		uint32 time = luaL_checkint(L, 1);
 		//sEAS.EventCreatureDelete(cre, time);
 		return 0;
 	}
 
-	int EventCastSpell(lua_State * L, UnitPointer ptr)
+	int EventCastSpell(lua_State * L, Unit * ptr)
 	{
-		CreaturePointer cre = TO_CREATURE(ptr);
+		Creature * cre = TO_CREATURE(ptr);
 		uint32 time = luaL_checkint(L, 2);
 		uint32 spellid = luaL_checkint(L, 1);
-		UnitPointer target = Lunar<Unit>::check(L,3);
+		Unit * target = Lunar<Unit>::check(L,3);
 		//sEAS.EventCastSpell(ptr, target, spellid, time);
 		return 0;
 	}
 
-	int EventCastSpellOnSelf(lua_State * L, UnitPointer ptr)
+	int EventCastSpellOnSelf(lua_State * L, Unit * ptr)
 	{
-		CreaturePointer cre = TO_CREATURE(ptr);
+		Creature * cre = TO_CREATURE(ptr);
 		uint32 time = luaL_checkint(L, 2);
 		uint32 spellid = luaL_checkint(L, 1);
 		//sEAS.EventCastSpell(ptr, ptr, spellid, time);
 		return 0;
 	}
 
-	int EventPlaySound(lua_State * L, UnitPointer ptr)
+	int EventPlaySound(lua_State * L, Unit * ptr)
 	{
-		CreaturePointer cre = TO_CREATURE(ptr);
+		Creature * cre = TO_CREATURE(ptr);
 		uint32 time = luaL_checkint(L, 2);
 		uint32 soundid = luaL_checkint(L, 1);
 		//sEAS.EventPlaySound(cre, soundid, time);
 		return 0;
 	}
-	int MonsterMove(lua_State * L, UnitPointer ptr)
+	int MonsterMove(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL || (ptr->GetTypeId() != TYPEID_UNIT && ptr->GetTypeId() != TYPEID_PLAYER)) return 0;
 		float x = (float)luaL_checkint(L,1);
@@ -1502,7 +1502,7 @@
 			TO_PLAYER(ptr)->GetSession()->SendPacket(&data);
 		return 0;
 	}
-	int SetPosition(lua_State * L, UnitPointer ptr)
+	int SetPosition(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		float x = (float)luaL_checkint(L,1);
@@ -1513,7 +1513,7 @@
 		ptr->SetPosition(vec,true);
 		return 0;
 	}
-	int SetCurrentAgent(lua_State * L, UnitPointer ptr)
+	int SetCurrentAgent(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		uint32 agent = luaL_checkint(L,1);
@@ -1521,7 +1521,7 @@
 		ptr->GetAIInterface()->setCurrentAgent(AI_Agent(agent));
 		return 0;
 	}
-	/*int AddAISpell(lua_State * L, UnitPointer ptr)
+	/*int AddAISpell(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		uint32 spellid = luaL_checkint(L,1);
@@ -1556,7 +1556,7 @@
 			ptr->GetAIInterface()->addSpellToList(sp);
 		return 0;
 	}*/
-	int RegisterAIUpdateEvent(lua_State * L, UnitPointer ptr)
+	int RegisterAIUpdateEvent(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		uint32 time = luaL_checkint(L,1);
@@ -1564,7 +1564,7 @@
 		sEventMgr.AddEvent( TO_CREATURE(ptr),&Creature::CallScriptUpdate,EVENT_CREATURE_UPDATE,time,0,0);
 		return 0;
 	}
-	int ModifyAIUpdateEvent(lua_State * L, UnitPointer ptr)
+	int ModifyAIUpdateEvent(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		uint32 newtime = luaL_checkint(L,1);
@@ -1572,13 +1572,13 @@
 		sEventMgr.ModifyEventTime( TO_CREATURE(ptr),EVENT_CREATURE_UPDATE,newtime);
 		return 0;
 	}
-	int RemoveAIUpdateEvent(lua_State * L, UnitPointer ptr)
+	int RemoveAIUpdateEvent(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		sEventMgr.RemoveEvents( TO_CREATURE(ptr),EVENT_CREATURE_UPDATE);
 		return 0;
 	}
-	int SetDamageDone(lua_State * L, UnitPointer ptr)
+	int SetDamageDone(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		uint32 school = luaL_checkint(L,1);
@@ -1587,27 +1587,27 @@
 		TO_CREATURE(ptr)->ModDamageDone[school] = coeff;
 		return 0;
 	}
-	int GetDamageDone(lua_State * L, UnitPointer ptr)
+	int GetDamageDone(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		uint32 school = luaL_checkint(L,1);
 		lua_pushnumber(L,TO_CREATURE(ptr)->ModDamageDone[school]);
 		return 1;
 	}
-	int SetAIState(lua_State * L, UnitPointer ptr)
+	int SetAIState(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		uint32 typ = luaL_checkint(L,1);
 		TO_CREATURE(ptr)->GetAIInterface()->SetAIState(AI_State(typ));
 		return 0;
 	}
-	int DisableRespawn(lua_State * L, UnitPointer ptr)
+	int DisableRespawn(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		TO_CREATURE(ptr)->m_noRespawn = true;
 		return 0;
 	}
-	int ModifySpeed(lua_State  * L, UnitPointer ptr)
+	int ModifySpeed(lua_State  * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		uint32 speed = luaL_checkint(L,1);
@@ -1616,7 +1616,7 @@
 		ptr->UpdateSpeed();
 		return 0;
 	}
-	int SetInvisible(lua_State * L, UnitPointer ptr)
+	int SetInvisible(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		uint32 choice = luaL_checkint(L,1);
@@ -1633,7 +1633,7 @@
 		ptr->UpdateVisibility();
 		return 0;
 	}
-	int GetInRangePlayers(lua_State * L, UnitPointer ptr)
+	int GetInRangePlayers(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		uint32 count = NULL;
@@ -1647,7 +1647,7 @@
 		}
 		return 1;
 	}
-	int GetInRangeFriends(lua_State * L, UnitPointer ptr)
+	int GetInRangeFriends(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		uint32 count = NULL;
@@ -1664,7 +1664,7 @@
 		}
 		return 1;
 	}
-	int GetInRangeUnits(lua_State * L, UnitPointer ptr)
+	int GetInRangeUnits(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 count = 0;
@@ -1681,14 +1681,14 @@
 		}
 		return 1;
 	}
-	int RemoveFromWorld(lua_State * L, UnitPointer ptr)
+	int RemoveFromWorld(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if( ptr->GetTypeId() != TYPEID_UNIT && ptr->GetTypeId() != TYPEID_PLAYER ) return 0;
 		ptr->RemoveFromWorld(true);
 		return 0;
 	}
-	int GetCreatureNearestCoords(lua_State * L, UnitPointer ptr)
+	int GetCreatureNearestCoords(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		float x = (float)luaL_checkinteger(L,1);
@@ -1701,7 +1701,7 @@
 		Lunar<Unit>::push(L,TO_UNIT(pC));
 		return 1;
 	}
-	int GetGameObjectNearestCoords(lua_State * L, UnitPointer ptr)
+	int GetGameObjectNearestCoords(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		float x = (float)luaL_checkinteger(L,1);
@@ -1714,29 +1714,29 @@
 		Lunar<GameObject>::push(L,Obj);
 		return 1;
 	}
-	int GetUInt32Value(lua_State * L, UnitPointer ptr)
+	int GetUInt32Value(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL || (ptr->GetTypeId() != TYPEID_UNIT && ptr->GetTypeId() != TYPEID_PLAYER)) return 0;
 		uint32 field = luaL_checkint(L,1);
 		lua_pushinteger(L,ptr->GetUInt32Value(field));
 		return 1;
 	}
-	int GetUInt64Value(lua_State * L, UnitPointer ptr)
+	int GetUInt64Value(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL || (ptr->GetTypeId() != TYPEID_UNIT && ptr->GetTypeId() != TYPEID_PLAYER)) return 0;
 		uint32 field = luaL_checkint(L,1);
 		lua_pushnumber(L,ptr->GetUInt64Value(field));
 		return 1;
 	}
-	int GetDistance(lua_State * L, UnitPointer ptr)
+	int GetDistance(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL ) return 0;
-		UnitPointer tar = Lunar<Unit>::check(L,1);
+		Unit * tar = Lunar<Unit>::check(L,1);
 		if( tar == NULL) return 0;
 		lua_pushnumber(L,ptr->CalcDistance(tar->GetPositionX(),tar->GetPositionY(),tar->GetPositionZ()));
 		return 1;
 	}
-	int CalcDistance(lua_State * L, UnitPointer ptr)
+	int CalcDistance(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		float x = (float)luaL_checkint(L,1);
@@ -1746,46 +1746,46 @@
 		lua_pushnumber(L,ptr->CalcDistance(x,y,z));
 		return 1;
 	}
-	int GetCurrentSpellId(lua_State * L, UnitPointer ptr)
+	int GetCurrentSpellId(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		if(ptr->GetCurrentSpell() != 0)
 			lua_pushinteger(L,ptr->GetCurrentSpell()->m_spellInfo->Id);
 		return 1;
 	}
-	int GetCurrentSpellName(lua_State * L, UnitPointer ptr)
+	int GetCurrentSpellName(lua_State * L, Unit * ptr)
 	{
 		if(ptr == NULL) return 0;
 		if(ptr->GetCurrentSpell() != 0 )
 			lua_pushstring(L,ptr->GetCurrentSpell()->m_spellInfo->Name);
 		return 1;
 	}
-	int ModThreat(lua_State * L, UnitPointer ptr)
+	int ModThreat(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		uint32 threattomod = luaL_checkint(L,2);
 		if(target == NULL) return 0;
 		ptr->GetAIInterface()->modThreatByPtr(TO_UNIT( target),threattomod);
 		return 0;
 	}
-	int RemoveThreat(lua_State * L, UnitPointer ptr)
+	int RemoveThreat(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		if(target == NULL) return 0;
 		ptr->GetAIInterface()->RemoveThreatByPtr(TO_UNIT( target));
 		return 0;
 	}
-	int GetThreat(lua_State * L, UnitPointer ptr)
+	int GetThreat(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		if(target == NULL) return 0;
 		lua_pushinteger(L,(uint32)ptr->GetAIInterface()->getThreatByPtr(TO_UNIT( target)));
 		return 1;
 	}
-	int GetPowerType(lua_State * L, UnitPointer ptr)
+	int GetPowerType(lua_State * L, Unit * ptr)
 	{
 		if( ptr == NULL ||(ptr->GetTypeId() != TYPEID_PLAYER && ptr->GetTypeId() != TYPEID_UNIT)) return 0;
 		switch(ptr->GetPowerType())
@@ -1811,52 +1811,52 @@
 		}
 		return 1;
 	}
-	int SetNextTarget(lua_State * L, UnitPointer ptr)
+	int SetNextTarget(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
-		UnitPointer tar = Lunar<Unit>::check(L,1);
+		Unit * tar = Lunar<Unit>::check(L,1);
 		if( tar == NULL) return 0;
 		ptr->GetAIInterface()->SetNextTarget(TO_UNIT( tar ));
 		return 0;
 	}
-	int GetNextTarget(lua_State * L, UnitPointer ptr)
+	int GetNextTarget(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		Lunar<Unit>::push(L,(ptr->GetAIInterface()->GetNextTarget()) );
 		return 1;
 	}
-	int GetSpawnX(lua_State * L, UnitPointer ptr)
+	int GetSpawnX(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		if(ptr->GetSpawnX() != 0)
 			lua_pushnumber(L,(float)ptr->GetSpawnX());
 		return 1;
 	}
-	int GetSpawnY(lua_State * L, UnitPointer ptr)
+	int GetSpawnY(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		if(ptr->GetSpawnY() != 0)
 			lua_pushnumber(L,(float)ptr->GetSpawnY());
 		return 1;
 	}
-	int GetSpawnZ(lua_State * L, UnitPointer ptr)
+	int GetSpawnZ(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		if(ptr->GetSpawnZ() != 0)
 			lua_pushnumber(L,(float)ptr->GetSpawnZ());
 		return 1;
 	}
-	int GetSpawnO(lua_State * L, UnitPointer ptr)
+	int GetSpawnO(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		if(ptr->GetSpawnO() != 0)
 			lua_pushnumber(L,(float)ptr->GetSpawnO());
 		return 1;
 	}
-	int GetInstanceMode(lua_State * L, UnitPointer ptr)
+	int GetInstanceMode(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
-		PlayerPointer plr = TO_PLAYER(ptr);
+		Player * plr = TO_PLAYER(ptr);
 		if(plr->GetMapMgr()->GetMapInfo()->type != INSTANCE_NULL)
 		{
 			switch(plr->iInstanceType)
@@ -1873,12 +1873,12 @@
 		}
 		return 1;
 	}
-	/*int KnockBack(lua_State * L, UnitPointer ptr)
+	/*int KnockBack(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		float distance = (float)luaL_checkint(L,1);
 		float height = (float)luaL_checkint(L,2);
-		PlayerPointer  plr = TO_PLAYER(ptr);
+		Player *  plr = TO_PLAYER(ptr);
 		WorldPacket data(SMSG_MOVE_KNOCK_BACK,50);
 		data << plr->GetNewGUID();
 		data << getMSTime();
@@ -1890,35 +1890,35 @@
 		plr->GetSession()->SendPacket(&data);
 		return 0;
 	}*/
-	int Root(lua_State * L, UnitPointer ptr)
+	int Root(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		ptr->m_canMove = false;
 		return 0;
 	}
-	int Unroot(lua_State * L, UnitPointer ptr)
+	int Unroot(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		ptr->m_canMove = true;
 		return 0;
 	}
-	int GetSelection(lua_State * L, UnitPointer ptr)
+	int GetSelection(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
-		PlayerPointer plr =  TO_PLAYER(ptr);
+		Player * plr =  TO_PLAYER(ptr);
 		if( plr->GetSelection() != 0)
 			Lunar<Unit>::push(L,(plr->GetMapMgr()->GetUnit(plr->GetSelection())) );
 		return 1;
 	}
-	int SetSelection(lua_State * L, UnitPointer ptr)
+	int SetSelection(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
-		UnitPointer tar = Lunar<Unit>::check(L,1);
+		Unit * tar = Lunar<Unit>::check(L,1);
 		if(tar == NULL) return 0;
 		TO_PLAYER(ptr)->SetSelection(tar->GetGUID());
 		return 0;
 	}
-	int SendMeetingStoneQueue(lua_State * L, UnitPointer ptr)
+	int SendMeetingStoneQueue(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 dungeon_id = luaL_checkint(L,1);
@@ -1926,22 +1926,22 @@
 		TO_PLAYER(ptr)->SendMeetingStoneQueue(dungeon_id,status);
 		return 0;
 	}
-	int IsInFeralForm(lua_State * L, UnitPointer ptr)
+	int IsInFeralForm(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
-		PlayerPointer  plr = TO_PLAYER(ptr);
+		Player *  plr = TO_PLAYER(ptr);
 		lua_pushboolean(L,(plr->IsInFeralForm() != 0)?1:0);
 		return 1;
 	}
-	int GetStanding(lua_State * L, UnitPointer ptr)
+	int GetStanding(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 faction = luaL_checkint(L,1);
-		PlayerPointer  plr = TO_PLAYER(ptr);
+		Player *  plr = TO_PLAYER(ptr);
 		lua_pushinteger(L,( plr->GetStanding(faction) != 0)?plr->GetStanding(faction) : 0);
 		return 1;
 	}
-	int SetStanding(lua_State * L, UnitPointer ptr)
+	int SetStanding(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 faction = luaL_checkint(L,1);
@@ -1949,7 +1949,7 @@
 		TO_PLAYER(ptr)->SetStanding(faction,value);
 		return 0;
 	}
-	int ModStanding(lua_State * L, UnitPointer ptr)
+	int ModStanding(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 faction = luaL_checkint(L,1);
@@ -1957,7 +1957,7 @@
 		TO_PLAYER(ptr)->ModStanding(faction,value);
 		return 0;
 	}
-	int SetAtWar(lua_State * L, UnitPointer ptr)
+	int SetAtWar(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 faction = luaL_checkint(L,1);
@@ -1965,18 +1965,18 @@
 		TO_PLAYER(ptr)->SetAtWar(faction,(set > 0)?true:false);
 		return 0;
 	}
-	/*int IsAtWar(lua_State * L, UnitPointer ptr)
+	/*int IsAtWar(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 faction = luaL_checkint(L,1);
-		PlayerPointer  plr = static_cast<Player*>(ptr);
+		Player *  plr = static_cast<Player*>(ptr);
 		if( plr->IsAtWar(faction) == true)
 			lua_pushboolean(L,1);
 		else
 			lua_pushboolean(L,0);
 		return 1;
 	}*/
-	int GetStandingRank(lua_State * L, UnitPointer ptr)
+	int GetStandingRank(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 faction = luaL_checkint(L,1);
@@ -2003,13 +2003,13 @@
 		}
 		return 1;
 	}
-	int UpdateInRangeSet(lua_State * L, UnitPointer ptr)
+	int UpdateInRangeSet(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		TO_PLAYER(ptr)->UpdateInrangeSetsBasedOnReputation();
 		return 0;
 	}
-	int GetRepRankFromStanding(lua_State * L, UnitPointer ptr)
+	int GetRepRankFromStanding(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		uint32 value = luaL_checkint(L,1);
@@ -2036,32 +2036,32 @@
 		}
 		return 1;
 	}
-	int GetPVPRank(lua_State * L, UnitPointer ptr)
+	int GetPVPRank(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_pushinteger(L, TO_PLAYER(ptr)->GetPVPRank());
 		return 1;
 	}
-	int SetPVPRank(lua_State * L, UnitPointer ptr)
+	int SetPVPRank(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		int32 newrank = luaL_checkint(L,1);
 		TO_PLAYER(ptr)->SetPVPRank(newrank);
 		return 0;
 	}
-	int IsGroupLeader(lua_State* L, UnitPointer ptr)
+	int IsGroupLeader(lua_State* L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_pushboolean(L,( TO_PLAYER(ptr)->IsGroupLeader() == true)?1:0);
 		return 1;
 	}
-	int IsGroupMember(lua_State * L, UnitPointer ptr)
+	int IsGroupMember(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_pushboolean(L,( TO_PLAYER(ptr )->IsGroupMember( TO_PLAYER(ptr )) == true)?1:0);
 		return 1;
 	}
-	int SetBanned(lua_State * L, UnitPointer ptr)
+	int SetBanned(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		const char * msg = luaL_checklstring(L,1,NULL);
@@ -2071,13 +2071,13 @@
 			TO_PLAYER(ptr)->SetBanned();
 		return 0;
 	}
-	int UnSetBanned(lua_State  * L, UnitPointer ptr)
+	int UnSetBanned(lua_State  * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		TO_PLAYER(ptr)->UnSetBanned();
 		return 0;
 	}
-	int SetBindPoint(lua_State * L, UnitPointer ptr)
+	int SetBindPoint(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		float x = (float)luaL_checkint(L,1);
@@ -2088,17 +2088,17 @@
 		TO_PLAYER(ptr)->SetBindPoint(x,y,z,mapid,zoneid);
 		return 0;
 	}
-	int ResetTalents(lua_State * L, UnitPointer ptr)
+	int ResetTalents(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		TO_PLAYER(ptr)->Reset_Talents();
 		return 0;
 	}
-	int GetBindPosition(lua_State * L, UnitPointer ptr)
+	int GetBindPosition(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_newtable(L);
-		PlayerPointer  plr = TO_PLAYER(ptr);
+		Player *  plr = TO_PLAYER(ptr);
 		lua_pushstring(L,"x");
 		lua_pushnumber(L,(float)plr->GetBindPositionX());
 		lua_rawset(L,-3);
@@ -2117,20 +2117,20 @@
 		
 		return 1;
 	}
-	int AllowFallDamage(lua_State * L, UnitPointer ptr)
+	int AllowFallDamage(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 choice = luaL_checkint(L,1);
 		TO_PLAYER(ptr)->m_noFallDamage = (choice > 0)?true:false;
 		return 0;
 	}
-	int GetSoulStone(lua_State * L, UnitPointer ptr)
+	int GetSoulStone(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		lua_pushinteger(L,TO_PLAYER(ptr)->GetSoulStone());
 		return 1;
 	}
-	int SetSoulStone(lua_State * L, UnitPointer ptr)
+	int SetSoulStone(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 id = luaL_checkint(L,1);
@@ -2138,20 +2138,20 @@
 			TO_PLAYER(ptr)->SetSoulStone(id);
 		return 0;
 	}
-	int SetReincarnate(lua_State * L, UnitPointer ptr)
+	int SetReincarnate(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		uint32 choice = luaL_checkint(L,1);
 		TO_PLAYER(ptr)->bReincarnation = (choice >0)?true:false;
 		return 0;
 	}
-	int EjectFromInstance(lua_State * L, UnitPointer ptr)
+	int EjectFromInstance(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		TO_PLAYER(ptr)->EjectFromInstance();
 		return 0;
 	}
-	int SetPlayerName(lua_State * L, UnitPointer ptr)
+	int SetPlayerName(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		const char * name = luaL_checkstring(L,1);
@@ -2159,27 +2159,27 @@
 		TO_PLAYER(ptr)->SetName(string(name));
 		return 0;
 	}
-	int OnUnitEvent(lua_State * L, UnitPointer ptr)
+	int OnUnitEvent(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		const char * func_to_call = luaL_checkstring(L,1);
 		uint32 eventnum = luaL_checkint(L,2);
-		UnitPointer pMisc = Lunar<Unit>::check(L,3);
+		Unit * pMisc = Lunar<Unit>::check(L,3);
 		uint32 Misc  = luaL_checkint(L,4);
 		g_engine.OnUnitEvent(ptr,func_to_call,eventnum,pMisc,Misc);
 		return 0;
 	}
 	/* Date : 01/05/2009 */
-	int GetEntry(lua_State * L, UnitPointer ptr)
+	int GetEntry(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		( (ptr != NULL) ? lua_pushinteger(L, ptr->GetEntry()) : lua_pushnil(L));
 		return 1;
 	}
-	int Energize(lua_State * L, UnitPointer ptr)
+	int Energize(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		uint32 spellid = luaL_checkint(L,2);
 		uint32 amt = luaL_checkint(L,3);
 		uint32 type = luaL_checkint(L,4);
@@ -2187,24 +2187,24 @@
 		ptr->Energize( TO_UNIT(target), spellid, amt, type);
 		return 0;
 	}
-	int Heal(lua_State * L, UnitPointer ptr)
+	int Heal(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		uint32 spellid = luaL_checkint(L,2);
 		uint32 amt = luaL_checkint(L,3);
 		if(target == NULL || !spellid) return 0;
 		ptr->Heal( TO_UNIT(target), spellid, amt);
 		return 0;
 	}
-	int GetAP(lua_State * L, UnitPointer ptr)
+	int GetAP(lua_State * L, Unit * ptr)
 	{
 		bool ranged = ( (luaL_checkint(L,1) != 0) ? true : false );
 		if(ptr == NULL) lua_pushnil(L);
 		( (ranged == true) ? lua_pushinteger(L, ptr->GetRAP()) : lua_pushinteger(L,ptr->GetAP()) );
 		return 1;
 	}
-	int GetPlayerRace(lua_State * L, UnitPointer ptr) {
+	int GetPlayerRace(lua_State * L, Unit * ptr) {
 		char * s;
 		switch( ptr->getRace()) {
 			case RACE_HUMAN: s = "Human"; break;
@@ -2222,17 +2222,17 @@
 		lua_pushstring(L,s);
 		return 1;
 	}
-	int GetSummon(lua_State * L, UnitPointer ptr)
+	int GetSummon(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		shared_ptr<Pet> pPet = TO_PLAYER(ptr)->GetSummon();
 		( (pPet != NULL) ? Lunar<Unit>::push(L,pPet) : lua_pushnil(L) );
 		return 1;
 	}
-	int IsInParty(lua_State * L, UnitPointer ptr)
+	int IsInParty(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
-		PlayerPointer plr = TO_PLAYER(ptr);
+		Player * plr = TO_PLAYER(ptr);
 		if(plr->GetGroup() == NULL) return 0;
 		Group * party = plr->GetGroup();
 		if(party->GetGroupType() == GROUP_TYPE_PARTY)
@@ -2241,10 +2241,10 @@
 			lua_pushboolean(L,0);
 		return 1;
 	}
-	int IsInRaid(lua_State * L, UnitPointer ptr)
+	int IsInRaid(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
-		PlayerPointer plr = TO_PLAYER(ptr);
+		Player * plr = TO_PLAYER(ptr);
 		if(plr->GetGroup() == NULL) return 0;
 		Group * party = plr->GetGroup();
 		if(party->GetGroupType() == GROUP_TYPE_RAID)
@@ -2253,13 +2253,13 @@
 			lua_pushboolean(L,0);
 		return 1;
 	}
-	int IsCasting(lua_State * L, UnitPointer ptr)
+	int IsCasting(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		( (ptr->isCasting() == true) ? lua_pushboolean(L,1) : lua_pushboolean(L, 0) );
 		return 1;
 	}
-	int SetAttackTimer(lua_State * L, UnitPointer ptr)
+	int SetAttackTimer(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		int32 timer = luaL_checkint(L,1);
@@ -2267,7 +2267,7 @@
 		ptr->setAttackTimer(timer, offhand);
 		return 0;
 	}
-	int SetDeathState(lua_State * L, UnitPointer ptr)
+	int SetDeathState(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 deathstate = luaL_checkint(L,1);
@@ -2275,20 +2275,20 @@
 		ptr->setDeathState( DeathState(deathstate) );
 		return 0;
 	}
-	int GetDeathState(lua_State * L, UnitPointer ptr)
+	int GetDeathState(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		lua_pushinteger(L, uint32(ptr->getDeathState()) );
 		return 1;
 	}
-	int ShareHealth(lua_State * L, UnitPointer ptr)
+	int ShareHealth(lua_State * L, Unit * ptr)
 	{
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		if(target == NULL) return 0;
 		//ptr->ShareHealthWithUnit( TO_UNIT(target()) );
 		return 0;
 	}
-	int GetStandState(lua_State * L, UnitPointer ptr)
+	int GetStandState(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		lua_pushinteger(L, uint32(ptr->GetStandState()));
@@ -2296,7 +2296,7 @@
 	}
 	/* End Date : 01/05/2009 */
 	/* Date : 01/07/2009 */
-	int SetUInt32Value(lua_State * L, UnitPointer ptr)
+	int SetUInt32Value(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 field = luaL_checkint(L,1);
@@ -2305,7 +2305,7 @@
 		ptr->SetUInt32Value(field,valu);
 		return 0;
 	}
-	int SetUInt64Value(lua_State * L, UnitPointer ptr)
+	int SetUInt64Value(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 field = luaL_checkint(L,1);
@@ -2314,13 +2314,13 @@
 		ptr->SetUInt64Value(field, uint64(valu));
 		return 0;
 	}
-	int GetGUID(lua_State * L, UnitPointer ptr)
+	int GetGUID(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		( (ptr->GetGUID()) ? lua_pushinteger(L, (uint32)ptr->GetGUID()) : lua_pushnil(L) );
 		return 1;
 	}
-	int CalcRadAngle(lua_State * L, UnitPointer ptr)
+	int CalcRadAngle(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 x1 = luaL_checkint(L,1);
@@ -2331,7 +2331,7 @@
 		lua_pushnumber(L, ptr->calcRadAngle(x1,y1,x2,y2) );
 		return 1;
 	}
-	int EnableFlight(lua_State * L, UnitPointer ptr)
+	int EnableFlight(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		WorldPacket data(835,13);
@@ -2351,7 +2351,7 @@
 		}
 		else return 0;
 	}
-	int DisableFlight(lua_State * L, UnitPointer ptr)
+	int DisableFlight(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		WorldPacket data(836,13);
@@ -2372,16 +2372,16 @@
 
 	return 0;
 	}
-	int AttackReaction(lua_State * L, UnitPointer ptr)
+	int AttackReaction(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		uint32 amt = luaL_checkint(L,2);
 		if(target == NULL) return 0;
 		TO_CREATURE(ptr)->GetAIInterface()->AttackReaction(TO_UNIT(target),amt);
 		return 0;
 	}
-	int IsInWorld(lua_State * L, UnitPointer ptr)
+	int IsInWorld(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		if(ptr->IsInWorld() == true)
@@ -2390,16 +2390,16 @@
 				lua_pushboolean(L,0);
 		return 1;
 	}
-	int PlaySpellVisual(lua_State * L, UnitPointer ptr)
+	int PlaySpellVisual(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 visualid = luaL_checkint(L,2);
-		UnitPointer target = Lunar<Unit>::check(L,1);
+		Unit * target = Lunar<Unit>::check(L,1);
 		if(target == NULL || !visualid) return 0;
 		ptr->PlaySpellVisual(target->GetGUID(),visualid);
 		return 0;
 	}
-	int ImmuneMechanic(lua_State * L, UnitPointer ptr)
+	int ImmuneMechanic(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 mechanic = luaL_checkint(L,1);
@@ -2410,35 +2410,35 @@
 	}
 	/* End Date : 01/07/2008 */
 	/* Date : 01/13/2009 */
-	int GetCurrentWaypoint(lua_State * L, UnitPointer ptr)
+	int GetCurrentWaypoint(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		lua_pushinteger(L,ptr->GetAIInterface()->m_currentWaypoint);
 		return 1;
 	}
-	int SetAllowedToEnterCombat(lua_State * L, UnitPointer ptr)
+	int SetAllowedToEnterCombat(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		uint32 choice = luaL_checkint(L,1);
 		( (choice > 0) ? ptr->GetAIInterface()->SetAllowedToEnterCombat(true) : ptr->GetAIInterface()->SetAllowedToEnterCombat(false));
 		return 0;
 	}
-	int GetDistanceSq(lua_State * L, UnitPointer ptr)
+	int GetDistanceSq(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
-		UnitPointer tar = Lunar<Unit>::check(L,1);
+		Unit * tar = Lunar<Unit>::check(L,1);
 		if( tar == NULL) return 0;
 		lua_pushnumber(L,(float)ptr->GetDistanceSq(TO_OBJECT( tar)));
 		return 1;
 	}
-	int SetOutOfCombatRange(lua_State * L, UnitPointer ptr)
+	int SetOutOfCombatRange(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		uint32 nrange = luaL_checkint(L,1);
 		ptr->GetAIInterface()->setOutOfCombatRange(nrange);
 		return 0;
 	}
-	int SetSpawnLocation(lua_State * L, UnitPointer ptr)
+	int SetSpawnLocation(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_UNIT);
 		double x = luaL_checknumber(L,1);
@@ -2449,13 +2449,13 @@
 		//ptr->SetSpawnPosition(pVect);
 		return 0;
 	}
-	int DeleteAllWaypoints(lua_State * L, UnitPointer ptr)
+	int DeleteAllWaypoints(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		ptr->GetAIInterface()->deleteWaypoints();
 		return 0;
 	}
-	int ChangeWaypoint(lua_State * L , UnitPointer ptr)
+	int ChangeWaypoint(lua_State * L , Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 oldwp = luaL_checkint(L,1);
@@ -2463,14 +2463,14 @@
 		ptr->GetAIInterface()->changeWayPointID(oldwp,newwp);
 		return 0;
 	}
-	int DeleteWaypoint(lua_State * L, UnitPointer ptr)
+	int DeleteWaypoint(lua_State * L, Unit * ptr)
 	{
 		CHECK_PTR();
 		uint32 wp = luaL_checkint(L,1);
 		ptr->GetAIInterface()->deleteWayPoint(wp);
 		return 0;
 	}
-	int SaveInstanceToDB(lua_State * L, UnitPointer ptr)
+	int SaveInstanceToDB(lua_State * L, Unit * ptr)
 	{
 		/*CHECK_TYPEID(TYPEID_PLAYER);
 		shared_ptr<Player> plr = TO_PLAYER(ptr);
@@ -2481,7 +2481,7 @@
 		in->SaveToDB();*/
 		return 0;
 	}
-	int ResetSavedInstances(lua_State * L, UnitPointer ptr)
+	int ResetSavedInstances(lua_State * L, Unit * ptr)
 	{
 		CHECK_TYPEID(TYPEID_PLAYER);
 		shared_ptr<Player> plr = TO_PLAYER(ptr);
Index: Trunk/src/LUAScripting/NameSpaces/UnitFunctions.h
===================================================================
--- Trunk/src/LUAScripting/NameSpaces/UnitFunctions.h	(revision 896)
+++ Trunk/src/LUAScripting/NameSpaces/UnitFunctions.h	(working copy)
@@ -4,247 +4,247 @@
 
 namespace luaUnit
 {
-	int GossipCreateMenu(lua_State * L, UnitPointer ptr);
-	int GossipMenuAddItem(lua_State * L, UnitPointer ptr);
-	int GossipSendMenu(lua_State * L, UnitPointer ptr);
-	int GossipComplete(lua_State * L, UnitPointer ptr);
-	int GossipSendPOI(lua_State * L, UnitPointer ptr);
-	int GetName(lua_State * L, UnitPointer ptr);
-	int SendChatMessage(lua_State * L, UnitPointer ptr);
-	int MoveTo(lua_State * L, UnitPointer ptr);
-	int SetMovementType(lua_State * L, UnitPointer ptr);
-	int CastSpell(lua_State * L, UnitPointer ptr);
-	int CastSpellOnTarget(lua_State * L, UnitPointer ptr);
-	int FullCastSpell(lua_State * L, UnitPointer ptr);
-	int FullCastSpellOnTarget(lua_State * L, UnitPointer ptr);
-	int SpawnGameObject(lua_State * L, UnitPointer ptr);
-	int SpawnCreature(lua_State * L, UnitPointer ptr);
-	int GetX(lua_State * L, UnitPointer ptr);
-	int GetY(lua_State * L, UnitPointer ptr);
-	int GetZ(lua_State * L, UnitPointer ptr);
-	int GetO(lua_State * L, UnitPointer ptr);
-	int IsPlayer(lua_State * L, UnitPointer ptr);
-	int IsCreature(lua_State * L, UnitPointer ptr);
-	int RegisterEvent(lua_State * L, UnitPointer ptr);
-	int RemoveEvents(lua_State * L, UnitPointer ptr);
-	int SendBroadcastMessage(lua_State * L, UnitPointer ptr);
-	int SendAreaTriggerMessage(lua_State * L, UnitPointer ptr);
-	//int KnockBack(lua_State * L, UnitPointer ptr);
-	int MarkQuestObjectiveAsComplete(lua_State * L, UnitPointer ptr);
-	int LearnSpell(lua_State * L, UnitPointer ptr);
-	int UnlearnSpell(lua_State * L, UnitPointer ptr);
-	int HasFinishedQuest(lua_State * L, UnitPointer ptr);
-	int GetItemCount(lua_State * L, UnitPointer ptr);
-	int IsInCombat(lua_State * L, UnitPointer ptr);
-	int GetMainTank(lua_State * L, UnitPointer ptr);
-	int GetAddTank(lua_State * L, UnitPointer ptr);
-	int ClearThreatList(lua_State * L, UnitPointer ptr);
-	int GetTauntedBy(lua_State * L, UnitPointer ptr);
-	int SetTauntedBy(lua_State * L, UnitPointer ptr);
-	int GetSoulLinkedWith(lua_State * L, UnitPointer ptr);
-	int SetSoulLinkedWith(lua_State * L, UnitPointer ptr);
-	int ChangeTarget(lua_State * L, UnitPointer ptr);
-	int GetHealthPct(lua_State * L, UnitPointer ptr);
-	int GetManaPct(lua_State * L, UnitPointer ptr);
-	int Emote(lua_State * L, UnitPointer ptr);
-	int SetHealthPct(lua_State * L, UnitPointer ptr);
-	int Despawn(lua_State * L, UnitPointer ptr);
-	int GetUnitBySqlId(lua_State * L, UnitPointer ptr);
-	int PlaySoundToSet(lua_State * L, UnitPointer ptr);
-	int RemoveAura(lua_State * L, UnitPointer ptr);
-	int StopMovement(lua_State * L, UnitPointer ptr);
-	int GetInstanceID(lua_State * L, UnitPointer ptr);
-	int GetClosestPlayer(lua_State * L, UnitPointer ptr);
-	int GetRandomPlayer(lua_State * L, UnitPointer ptr);
-	int GetRandomFriend(lua_State * L, UnitPointer ptr);
-	int AddItem(lua_State * L, UnitPointer ptr);
-	int RemoveItem(lua_State * L, UnitPointer ptr);
-	int CreateCustomWaypointMap(lua_State * L, UnitPointer ptr);
-	int CreateWaypoint(lua_State * L, UnitPointer ptr);
-	int DestroyCustomWaypointMap(lua_State * L, UnitPointer ptr);
-	int MoveToWaypoint(lua_State * L, UnitPointer ptr);
-	int SetCombatCapable(lua_State * L, UnitPointer ptr);
-	int SetCombatMeleeCapable(lua_State * L, UnitPointer ptr);
-	int SetCombatRangedCapable(lua_State * L, UnitPointer ptr);
-	int SetCombatSpellCapable(lua_State * L, UnitPointer ptr);
-	int SetCombatTargetingCapable(lua_State * L, UnitPointer ptr);
-	int SetNPCFlags(lua_State * L, UnitPointer ptr);
-	int SetModel(lua_State * L, UnitPointer ptr);
-	int SetScale(lua_State * L, UnitPointer ptr);
-	int SetFaction(lua_State * L, UnitPointer ptr);
-	int SetStandState(lua_State * L, UnitPointer ptr);
-	int TeleportUnit(lua_State * L, UnitPointer ptr);
-	int GetPlayerClass(lua_State * L, UnitPointer ptr);
-	int ClearHateList(lua_State * L, UnitPointer ptr);
-	int WipeHateList(lua_State * L, UnitPointer ptr);
-	int WipeTargetList(lua_State * L, UnitPointer ptr);
-	int WipeCurrentTarget(lua_State * L, UnitPointer ptr);
-	int GetHealth(lua_State * L, UnitPointer ptr);
-	int GetMaxHealth(lua_State * L, UnitPointer ptr);
-	int SetHealth(lua_State * L, UnitPointer ptr);
-	int SetMaxHealth(lua_State * L, UnitPointer ptr);
-	int SetFieldFlags(lua_State * L, UnitPointer ptr);
-	int PvPFlagged(lua_State * L, UnitPointer ptr);
-	int GetModel(lua_State * L, UnitPointer ptr);
-	int GetRunSpeed(lua_State *  L, UnitPointer ptr);
-	int GetFlySpeed(lua_State * L, UnitPointer ptr);
-	int Disconnect(lua_State * L, UnitPointer ptr);
-	int GetZone(lua_State * L, UnitPointer ptr);
-	int GetMapId(lua_State * L, UnitPointer ptr);
-	int SendWideBroadcastMessage(lua_State * L, UnitPointer ptr);
-	int IsBehind(lua_State * L, UnitPointer ptr);
-	int RemoveFlag(lua_State * L, UnitPointer ptr);
-	int IsFlying(lua_State * L, UnitPointer ptr);
-	int SetFactionStanding(lua_State * L, UnitPointer ptr);
-	int GetLevel(lua_State * L, UnitPointer ptr);
-	int IsAlive(lua_State * L, UnitPointer ptr);
-	int IsStealthed(lua_State * L, UnitPointer ptr);
-	int IsGM(lua_State * L, UnitPointer ptr);
-	int IsHorde(lua_State * L, UnitPointer ptr);
-	int IsAlliance(lua_State * L, UnitPointer ptr);
-	int HasAmountOfPlayers(lua_State * L, UnitPointer ptr);
-	int HasGMTagOn(lua_State * L, UnitPointer ptr);
-	int CastSpellAoF(lua_State * L, UnitPointer ptr);
-	int RemoveAllAuras(lua_State * L, UnitPointer ptr);
-	int TogglePvP(lua_State * L, UnitPointer ptr);
-	int ApplyRestState(lua_State * L, UnitPointer ptr);
-	int ResurrectPlayer(lua_State * L, UnitPointer ptr);
-	int SetEmoteState(lua_State * L, UnitPointer ptr);
-	int GetPlayerAccountName(lua_State * L, UnitPointer ptr);
-	int RemoveStealth(lua_State * L, UnitPointer ptr);
-	int Die(lua_State * L, UnitPointer ptr);
-	int SetStealth(lua_State * L, UnitPointer ptr);
-	int WorldQuery(lua_State * L, UnitPointer ptr);
-	int CharacterQuery(lua_State * L, UnitPointer ptr);
-	int AddCreatureLoot(lua_State * L, UnitPointer ptr);
-	int SystemMessageToPlr(lua_State * L, UnitPointer ptr);
-	int SaveToDB(lua_State * L, UnitPointer ptr);
-	int IsInvincible(lua_State * L, UnitPointer ptr);
-	int IsAttacking(lua_State * L, UnitPointer ptr);
-	int SetInvincible(lua_State * L, UnitPointer ptr);
-	int IsInRange(lua_State * L, UnitPointer ptr);
-	int FinishQuest(lua_State * L, UnitPointer ptr);
-	int IfQuestCanBeFinished(lua_State * L, UnitPointer ptr);
-	int SetQuestComplete(lua_State * L, UnitPointer ptr);
-	int SubtractTime(lua_State * L, UnitPointer ptr);
-	int MoveToPlayer(lua_State * L, UnitPointer ptr);
-	int EventCreatureYell(lua_State * L, UnitPointer ptr);
-	int EventCreatureDelete(lua_State * L, UnitPointer ptr);
-	int EventCastSpell(lua_State * L, UnitPointer ptr);
-	int EventCreatureYell(lua_State * L, UnitPointer ptr);
-	int EventPlaySound(lua_State * L, UnitPointer ptr);
-	int EventCastSpellOnSelf(lua_State * L, UnitPointer ptr);
-	int MonsterMove(lua_State * L, UnitPointer ptr);
-	int SetPosition(lua_State * L, UnitPointer ptr);
-	int SetCurrentAgent(lua_State * L, UnitPointer ptr);
-	int AddAISpell(lua_State * L, UnitPointer ptr);
-	int RegisterAIUpdateEvent(lua_State * L, UnitPointer ptr);
-	int ModifyAIUpdateEvent(lua_State * L, UnitPointer ptr);
-	int RemoveAIUpdateEvent(lua_State * L, UnitPointer ptr);
-	int SetDamageDone(lua_State * L, UnitPointer ptr);
-	int GetDamageDone(lua_State * L, UnitPointer ptr);
-	int SetAIState(lua_State * L, UnitPointer ptr);
-	int DisableRespawn(lua_State * L, UnitPointer ptr);
-	int ModifySpeed(lua_State  * L, UnitPointer ptr);
-	int SetInvisible(lua_State * L, UnitPointer ptr);
-	int GetInRangePlayers(lua_State * L, UnitPointer ptr);
-	int GetInRangeFriends(lua_State * L, UnitPointer ptr);
-	int RemoveFromWorld(lua_State * L, UnitPointer ptr);
-	int GetCreatureNearestCoords(lua_State * L, UnitPointer ptr);
-	int GetGameObjectNearestCoords(lua_State * L, UnitPointer ptr);
-	int GetUInt32Value(lua_State * L, UnitPointer ptr);
-	int GetUInt64Value(lua_State * L, UnitPointer ptr);
-	int IsMoving(lua_State * L, UnitPointer ptr);
-	int IsAttacking(lua_State * L, UnitPointer ptr);
-	int GetDistance(lua_State * L, UnitPointer ptr);
-	int GetCurrentSpellName(lua_State * L, UnitPointer ptr);
-	int GetCurrentSpellId(lua_State * L, UnitPointer ptr);
-	int ModThreat(lua_State * L, UnitPointer ptr);
-	int RemoveThreat(lua_State * L, UnitPointer ptr);
-	int GetThreat(lua_State * L, UnitPointer ptr);
-	int CalcDistance(lua_State * L, UnitPointer ptr);
-	int GetPowerType(lua_State * L, UnitPointer ptr);
-	int SetNextTarget(lua_State * L, UnitPointer ptr);
-	int GetNextTarget(lua_State * L, UnitPointer ptr);
-	int GetSpawnX(lua_State * L, UnitPointer ptr);
-	int GetSpawnY(lua_State * L, UnitPointer ptr);
-	int GetSpawnZ(lua_State * L, UnitPointer ptr);
-	int GetSpawnO(lua_State * L, UnitPointer ptr);
-	int GetInstanceMode(lua_State * L, UnitPointer ptr);
-	int KnockBack(lua_State * L, UnitPointer ptr);
-	int Root(lua_State * L, UnitPointer ptr);
-	int Unroot(lua_State * L, UnitPointer ptr);
+	int GossipCreateMenu(lua_State * L, Unit * ptr);
+	int GossipMenuAddItem(lua_State * L, Unit * ptr);
+	int GossipSendMenu(lua_State * L, Unit * ptr);
+	int GossipComplete(lua_State * L, Unit * ptr);
+	int GossipSendPOI(lua_State * L, Unit * ptr);
+	int GetName(lua_State * L, Unit * ptr);
+	int SendChatMessage(lua_State * L, Unit * ptr);
+	int MoveTo(lua_State * L, Unit * ptr);
+	int SetMovementType(lua_State * L, Unit * ptr);
+	int CastSpell(lua_State * L, Unit * ptr);
+	int CastSpellOnTarget(lua_State * L, Unit * ptr);
+	int FullCastSpell(lua_State * L, Unit * ptr);
+	int FullCastSpellOnTarget(lua_State * L, Unit * ptr);
+	int SpawnGameObject(lua_State * L, Unit * ptr);
+	int SpawnCreature(lua_State * L, Unit * ptr);
+	int GetX(lua_State * L, Unit * ptr);
+	int GetY(lua_State * L, Unit * ptr);
+	int GetZ(lua_State * L, Unit * ptr);
+	int GetO(lua_State * L, Unit * ptr);
+	int IsPlayer(lua_State * L, Unit * ptr);
+	int IsCreature(lua_State * L, Unit * ptr);
+	int RegisterEvent(lua_State * L, Unit * ptr);
+	int RemoveEvents(lua_State * L, Unit * ptr);
+	int SendBroadcastMessage(lua_State * L, Unit * ptr);
+	int SendAreaTriggerMessage(lua_State * L, Unit * ptr);
+	//int KnockBack(lua_State * L, Unit * ptr);
+	int MarkQuestObjectiveAsComplete(lua_State * L, Unit * ptr);
+	int LearnSpell(lua_State * L, Unit * ptr);
+	int UnlearnSpell(lua_State * L, Unit * ptr);
+	int HasFinishedQuest(lua_State * L, Unit * ptr);
+	int GetItemCount(lua_State * L, Unit * ptr);
+	int IsInCombat(lua_State * L, Unit * ptr);
+	int GetMainTank(lua_State * L, Unit * ptr);
+	int GetAddTank(lua_State * L, Unit * ptr);
+	int ClearThreatList(lua_State * L, Unit * ptr);
+	int GetTauntedBy(lua_State * L, Unit * ptr);
+	int SetTauntedBy(lua_State * L, Unit * ptr);
+	int GetSoulLinkedWith(lua_State * L, Unit * ptr);
+	int SetSoulLinkedWith(lua_State * L, Unit * ptr);
+	int ChangeTarget(lua_State * L, Unit * ptr);
+	int GetHealthPct(lua_State * L, Unit * ptr);
+	int GetManaPct(lua_State * L, Unit * ptr);
+	int Emote(lua_State * L, Unit * ptr);
+	int SetHealthPct(lua_State * L, Unit * ptr);
+	int Despawn(lua_State * L, Unit * ptr);
+	int GetUnitBySqlId(lua_State * L, Unit * ptr);
+	int PlaySoundToSet(lua_State * L, Unit * ptr);
+	int RemoveAura(lua_State * L, Unit * ptr);
+	int StopMovement(lua_State * L, Unit * ptr);
+	int GetInstanceID(lua_State * L, Unit * ptr);
+	int GetClosestPlayer(lua_State * L, Unit * ptr);
+	int GetRandomPlayer(lua_State * L, Unit * ptr);
+	int GetRandomFriend(lua_State * L, Unit * ptr);
+	int AddItem(lua_State * L, Unit * ptr);
+	int RemoveItem(lua_State * L, Unit * ptr);
+	int CreateCustomWaypointMap(lua_State * L, Unit * ptr);
+	int CreateWaypoint(lua_State * L, Unit * ptr);
+	int DestroyCustomWaypointMap(lua_State * L, Unit * ptr);
+	int MoveToWaypoint(lua_State * L, Unit * ptr);
+	int SetCombatCapable(lua_State * L, Unit * ptr);
+	int SetCombatMeleeCapable(lua_State * L, Unit * ptr);
+	int SetCombatRangedCapable(lua_State * L, Unit * ptr);
+	int SetCombatSpellCapable(lua_State * L, Unit * ptr);
+	int SetCombatTargetingCapable(lua_State * L, Unit * ptr);
+	int SetNPCFlags(lua_State * L, Unit * ptr);
+	int SetModel(lua_State * L, Unit * ptr);
+	int SetScale(lua_State * L, Unit * ptr);
+	int SetFaction(lua_State * L, Unit * ptr);
+	int SetStandState(lua_State * L, Unit * ptr);
+	int TeleportUnit(lua_State * L, Unit * ptr);
+	int GetPlayerClass(lua_State * L, Unit * ptr);
+	int ClearHateList(lua_State * L, Unit * ptr);
+	int WipeHateList(lua_State * L, Unit * ptr);
+	int WipeTargetList(lua_State * L, Unit * ptr);
+	int WipeCurrentTarget(lua_State * L, Unit * ptr);
+	int GetHealth(lua_State * L, Unit * ptr);
+	int GetMaxHealth(lua_State * L, Unit * ptr);
+	int SetHealth(lua_State * L, Unit * ptr);
+	int SetMaxHealth(lua_State * L, Unit * ptr);
+	int SetFieldFlags(lua_State * L, Unit * ptr);
+	int PvPFlagged(lua_State * L, Unit * ptr);
+	int GetModel(lua_State * L, Unit * ptr);
+	int GetRunSpeed(lua_State *  L, Unit * ptr);
+	int GetFlySpeed(lua_State * L, Unit * ptr);
+	int Disconnect(lua_State * L, Unit * ptr);
+	int GetZone(lua_State * L, Unit * ptr);
+	int GetMapId(lua_State * L, Unit * ptr);
+	int SendWideBroadcastMessage(lua_State * L, Unit * ptr);
+	int IsBehind(lua_State * L, Unit * ptr);
+	int RemoveFlag(lua_State * L, Unit * ptr);
+	int IsFlying(lua_State * L, Unit * ptr);
+	int SetFactionStanding(lua_State * L, Unit * ptr);
+	int GetLevel(lua_State * L, Unit * ptr);
+	int IsAlive(lua_State * L, Unit * ptr);
+	int IsStealthed(lua_State * L, Unit * ptr);
+	int IsGM(lua_State * L, Unit * ptr);
+	int IsHorde(lua_State * L, Unit * ptr);
+	int IsAlliance(lua_State * L, Unit * ptr);
+	int HasAmountOfPlayers(lua_State * L, Unit * ptr);
+	int HasGMTagOn(lua_State * L, Unit * ptr);
+	int CastSpellAoF(lua_State * L, Unit * ptr);
+	int RemoveAllAuras(lua_State * L, Unit * ptr);
+	int TogglePvP(lua_State * L, Unit * ptr);
+	int ApplyRestState(lua_State * L, Unit * ptr);
+	int ResurrectPlayer(lua_State * L, Unit * ptr);
+	int SetEmoteState(lua_State * L, Unit * ptr);
+	int GetPlayerAccountName(lua_State * L, Unit * ptr);
+	int RemoveStealth(lua_State * L, Unit * ptr);
+	int Die(lua_State * L, Unit * ptr);
+	int SetStealth(lua_State * L, Unit * ptr);
+	int WorldQuery(lua_State * L, Unit * ptr);
+	int CharacterQuery(lua_State * L, Unit * ptr);
+	int AddCreatureLoot(lua_State * L, Unit * ptr);
+	int SystemMessageToPlr(lua_State * L, Unit * ptr);
+	int SaveToDB(lua_State * L, Unit * ptr);
+	int IsInvincible(lua_State * L, Unit * ptr);
+	int IsAttacking(lua_State * L, Unit * ptr);
+	int SetInvincible(lua_State * L, Unit * ptr);
+	int IsInRange(lua_State * L, Unit * ptr);
+	int FinishQuest(lua_State * L, Unit * ptr);
+	int IfQuestCanBeFinished(lua_State * L, Unit * ptr);
+	int SetQuestComplete(lua_State * L, Unit * ptr);
+	int SubtractTime(lua_State * L, Unit * ptr);
+	int MoveToPlayer(lua_State * L, Unit * ptr);
+	int EventCreatureYell(lua_State * L, Unit * ptr);
+	int EventCreatureDelete(lua_State * L, Unit * ptr);
+	int EventCastSpell(lua_State * L, Unit * ptr);
+	int EventCreatureYell(lua_State * L, Unit * ptr);
+	int EventPlaySound(lua_State * L, Unit * ptr);
+	int EventCastSpellOnSelf(lua_State * L, Unit * ptr);
+	int MonsterMove(lua_State * L, Unit * ptr);
+	int SetPosition(lua_State * L, Unit * ptr);
+	int SetCurrentAgent(lua_State * L, Unit * ptr);
+	int AddAISpell(lua_State * L, Unit * ptr);
+	int RegisterAIUpdateEvent(lua_State * L, Unit * ptr);
+	int ModifyAIUpdateEvent(lua_State * L, Unit * ptr);
+	int RemoveAIUpdateEvent(lua_State * L, Unit * ptr);
+	int SetDamageDone(lua_State * L, Unit * ptr);
+	int GetDamageDone(lua_State * L, Unit * ptr);
+	int SetAIState(lua_State * L, Unit * ptr);
+	int DisableRespawn(lua_State * L, Unit * ptr);
+	int ModifySpeed(lua_State  * L, Unit * ptr);
+	int SetInvisible(lua_State * L, Unit * ptr);
+	int GetInRangePlayers(lua_State * L, Unit * ptr);
+	int GetInRangeFriends(lua_State * L, Unit * ptr);
+	int RemoveFromWorld(lua_State * L, Unit * ptr);
+	int GetCreatureNearestCoords(lua_State * L, Unit * ptr);
+	int GetGameObjectNearestCoords(lua_State * L, Unit * ptr);
+	int GetUInt32Value(lua_State * L, Unit * ptr);
+	int GetUInt64Value(lua_State * L, Unit * ptr);
+	int IsMoving(lua_State * L, Unit * ptr);
+	int IsAttacking(lua_State * L, Unit * ptr);
+	int GetDistance(lua_State * L, Unit * ptr);
+	int GetCurrentSpellName(lua_State * L, Unit * ptr);
+	int GetCurrentSpellId(lua_State * L, Unit * ptr);
+	int ModThreat(lua_State * L, Unit * ptr);
+	int RemoveThreat(lua_State * L, Unit * ptr);
+	int GetThreat(lua_State * L, Unit * ptr);
+	int CalcDistance(lua_State * L, Unit * ptr);
+	int GetPowerType(lua_State * L, Unit * ptr);
+	int SetNextTarget(lua_State * L, Unit * ptr);
+	int GetNextTarget(lua_State * L, Unit * ptr);
+	int GetSpawnX(lua_State * L, Unit * ptr);
+	int GetSpawnY(lua_State * L, Unit * ptr);
+	int GetSpawnZ(lua_State * L, Unit * ptr);
+	int GetSpawnO(lua_State * L, Unit * ptr);
+	int GetInstanceMode(lua_State * L, Unit * ptr);
+	int KnockBack(lua_State * L, Unit * ptr);
+	int Root(lua_State * L, Unit * ptr);
+	int Unroot(lua_State * L, Unit * ptr);
 	// New functions start
-	int GetSelection(lua_State * L, UnitPointer ptr);
-	int SendMeetingStoneQueue(lua_State * L, UnitPointer ptr);
-	int IsInFeralForm(lua_State * L, UnitPointer ptr);
-	int SetSelection(lua_State * L, UnitPointer ptr);
-	int GetStanding(lua_State * L, UnitPointer ptr);
-	int ModStanding(lua_State * L, UnitPointer ptr);
-	int SetStanding(lua_State * L, UnitPointer ptr);
-	int SetAtWar(lua_State * L, UnitPointer ptr);
-	//int IsAtWar(lua_State * L, UnitPointer ptr);
-	int GetStandingRank(lua_State * L, UnitPointer ptr);
-	int UpdateInRangeSet(lua_State * L, UnitPointer ptr);
-	int GetRepRankFromStanding(lua_State * L, UnitPointer ptr);
-	int GetPVPRank(lua_State * L, UnitPointer ptr);
-	int SetPVPRank(lua_State * L, UnitPointer ptr);
-	int IsGroupLeader(lua_State* L, UnitPointer ptr);
-	int IsGroupMember(lua_State * L, UnitPointer ptr);
-	int SetBanned(lua_State * L, UnitPointer ptr);
-	int UnSetBanned(lua_State  * L, UnitPointer ptr);
-	int SetBindPoint(lua_State * L, UnitPointer ptr);
-	int ResetTalents(lua_State * L, UnitPointer ptr);
-	int GetBindPosition(lua_State * L, UnitPointer ptr);
-	int AllowFallDamage(lua_State * L, UnitPointer ptr);
-	int GetSoulStone(lua_State * L, UnitPointer ptr);
-	int GetSoulStone(lua_State * L, UnitPointer ptr);
-	int SetSoulStone(lua_State * L, UnitPointer ptr);
-	int SetReincarnate(lua_State * L, UnitPointer ptr);
-	int EjectFromInstance(lua_State * L, UnitPointer ptr);
-	int SetPlayerName(lua_State * L, UnitPointer ptr);
-	int OnUnitEvent(lua_State * L, UnitPointer ptr);
-	int GetRandomEnemy(lua_State * L, UnitPointer ptr);
+	int GetSelection(lua_State * L, Unit * ptr);
+	int SendMeetingStoneQueue(lua_State * L, Unit * ptr);
+	int IsInFeralForm(lua_State * L, Unit * ptr);
+	int SetSelection(lua_State * L, Unit * ptr);
+	int GetStanding(lua_State * L, Unit * ptr);
+	int ModStanding(lua_State * L, Unit * ptr);
+	int SetStanding(lua_State * L, Unit * ptr);
+	int SetAtWar(lua_State * L, Unit * ptr);
+	//int IsAtWar(lua_State * L, Unit * ptr);
+	int GetStandingRank(lua_State * L, Unit * ptr);
+	int UpdateInRangeSet(lua_State * L, Unit * ptr);
+	int GetRepRankFromStanding(lua_State * L, Unit * ptr);
+	int GetPVPRank(lua_State * L, Unit * ptr);
+	int SetPVPRank(lua_State * L, Unit * ptr);
+	int IsGroupLeader(lua_State* L, Unit * ptr);
+	int IsGroupMember(lua_State * L, Unit * ptr);
+	int SetBanned(lua_State * L, Unit * ptr);
+	int UnSetBanned(lua_State  * L, Unit * ptr);
+	int SetBindPoint(lua_State * L, Unit * ptr);
+	int ResetTalents(lua_State * L, Unit * ptr);
+	int GetBindPosition(lua_State * L, Unit * ptr);
+	int AllowFallDamage(lua_State * L, Unit * ptr);
+	int GetSoulStone(lua_State * L, Unit * ptr);
+	int GetSoulStone(lua_State * L, Unit * ptr);
+	int SetSoulStone(lua_State * L, Unit * ptr);
+	int SetReincarnate(lua_State * L, Unit * ptr);
+	int EjectFromInstance(lua_State * L, Unit * ptr);
+	int SetPlayerName(lua_State * L, Unit * ptr);
+	int OnUnitEvent(lua_State * L, Unit * ptr);
+	int GetRandomEnemy(lua_State * L, Unit * ptr);
 	/* Date : 01/05/2009 */
-	int GetEntry(lua_State * L, UnitPointer ptr);
-	int Energize(lua_State * L, UnitPointer ptr);
-	int Heal(lua_State * L, UnitPointer ptr);
-	int GetAP(lua_State * L, UnitPointer ptr);
-	int GetPlayerRace(lua_State * L, UnitPointer ptr);
-	int GetSummon(lua_State * L, UnitPointer ptr);
-	int IsInParty(lua_State * L, UnitPointer ptr);
-	int IsInRaid(lua_State * L, UnitPointer ptr);
-	int IsCasting(lua_State * L, UnitPointer ptr);
-	int SetAttackTimer(lua_State * L, UnitPointer ptr);
-	int SetDeathState(lua_State * L, UnitPointer ptr);
-	int GetDeathState(lua_State * L, UnitPointer ptr);
-	int ShareHealth(lua_State * L, UnitPointer ptr);
-	int GetStandState(lua_State * L, UnitPointer ptr);
+	int GetEntry(lua_State * L, Unit * ptr);
+	int Energize(lua_State * L, Unit * ptr);
+	int Heal(lua_State * L, Unit * ptr);
+	int GetAP(lua_State * L, Unit * ptr);
+	int GetPlayerRace(lua_State * L, Unit * ptr);
+	int GetSummon(lua_State * L, Unit * ptr);
+	int IsInParty(lua_State * L, Unit * ptr);
+	int IsInRaid(lua_State * L, Unit * ptr);
+	int IsCasting(lua_State * L, Unit * ptr);
+	int SetAttackTimer(lua_State * L, Unit * ptr);
+	int SetDeathState(lua_State * L, Unit * ptr);
+	int GetDeathState(lua_State * L, Unit * ptr);
+	int ShareHealth(lua_State * L, Unit * ptr);
+	int GetStandState(lua_State * L, Unit * ptr);
 	/* End Date : 01/05/2009 */
 	/* Date : 01/07/2009 */
-	int SetUInt32Value(lua_State * L, UnitPointer ptr);
-	int SetUInt64Value(lua_State * L, UnitPointer ptr);
-	int GetGUID(lua_State * L, UnitPointer ptr);
-	int CalcRadAngle(lua_State * L, UnitPointer ptr);
-	int EnableFlight(lua_State * L, UnitPointer ptr);
-	int DisableFlight(lua_State * L, UnitPointer ptr);
-	int AttackReaction(lua_State * L, UnitPointer ptr);
-	int IsInWorld(lua_State * L, UnitPointer ptr);
-	int PlaySpellVisual(lua_State * L, UnitPointer ptr);
-	int ImmuneMechanic(lua_State * L, UnitPointer ptr);
+	int SetUInt32Value(lua_State * L, Unit * ptr);
+	int SetUInt64Value(lua_State * L, Unit * ptr);
+	int GetGUID(lua_State * L, Unit * ptr);
+	int CalcRadAngle(lua_State * L, Unit * ptr);
+	int EnableFlight(lua_State * L, Unit * ptr);
+	int DisableFlight(lua_State * L, Unit * ptr);
+	int AttackReaction(lua_State * L, Unit * ptr);
+	int IsInWorld(lua_State * L, Unit * ptr);
+	int PlaySpellVisual(lua_State * L, Unit * ptr);
+	int ImmuneMechanic(lua_State * L, Unit * ptr);
 	/* End Date : 01/07/2009 */
 	/* Date : 01/13/2009 */
-	int GetCurrentWaypoint(lua_State * L, UnitPointer ptr);
-	int SetAllowedToEnterCombat(lua_State * L, UnitPointer  ptr);
-	int GetDistanceSq(lua_State * L, UnitPointer ptr);
-	int SetOutOfCombatRange(lua_State * L, UnitPointer ptr);
-	int SetSpawnLocation(lua_State * L, UnitPointer ptr);
-	int GetInRangeUnits(lua_State * L, UnitPointer ptr);
-	int DeleteAllWaypoints(lua_State * L, UnitPointer ptr);
-	int ChangeWaypoint(lua_State * L , UnitPointer ptr);
-	int DeleteWaypoint(lua_State * L, UnitPointer ptr);
-	int SaveInstanceToDB(lua_State * L, UnitPointer ptr);
-	int ResetSavedInstances(lua_State * L, UnitPointer ptr);
+	int GetCurrentWaypoint(lua_State * L, Unit * ptr);
+	int SetAllowedToEnterCombat(lua_State * L, Unit *  ptr);
+	int GetDistanceSq(lua_State * L, Unit * ptr);
+	int SetOutOfCombatRange(lua_State * L, Unit * ptr);
+	int SetSpawnLocation(lua_State * L, Unit * ptr);
+	int GetInRangeUnits(lua_State * L, Unit * ptr);
+	int DeleteAllWaypoints(lua_State * L, Unit * ptr);
+	int ChangeWaypoint(lua_State * L , Unit * ptr);
+	int DeleteWaypoint(lua_State * L, Unit * ptr);
+	int SaveInstanceToDB(lua_State * L, Unit * ptr);
+	int ResetSavedInstances(lua_State * L, Unit * ptr);
 	/* End Date: 01/13/2009 */
 }
 #endif
Index: Trunk/src/MiscScripts/Creatures.cpp
===================================================================
--- Trunk/src/MiscScripts/Creatures.cpp	(revision 896)
+++ Trunk/src/MiscScripts/Creatures.cpp	(working copy)
@@ -25,9 +25,9 @@
 {
 public:
   ADD_CREATURE_FACTORY_FUNCTION(CrimsonHammersmith);
-  CrimsonHammersmith(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+  CrimsonHammersmith(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-  void OnCombatStart(UnitPointer mTarget)
+  void OnCombatStart(Unit * mTarget)
   {
     _unit->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Who Dares Disturb Me");
   }
@@ -38,7 +38,7 @@
 {
 public:
   ADD_CREATURE_FACTORY_FUNCTION(Corrupt_Minor_Manifestation_Water_Dead);
-  Corrupt_Minor_Manifestation_Water_Dead(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+  Corrupt_Minor_Manifestation_Water_Dead(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
   void OnDied(Unit *mKiller)
   {
@@ -47,7 +47,7 @@
     float SSZ = _unit->GetPositionZ();
     float SSO = _unit->GetOrientation();
 
-	CreaturePointer NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(5895, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
+	Creature * NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(5895, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
 	if ( NewCreature != NULL )
 		NewCreature->Despawn(600000, 0);
   }
@@ -56,7 +56,7 @@
 class SavannahProwler : public CreatureAIScript
 {
 public:
-  SavannahProwler(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+  SavannahProwler(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
   void OnLoad()
   {
@@ -66,7 +66,7 @@
       _unit->SetStandState(STANDSTATE_SLEEP); 
   }
 
-  void OnCombatStart( UnitPointer pTarget )
+  void OnCombatStart( Unit * pTarget )
   {
     if(_unit->GetStandState() == STANDSTATE_SLEEP)
       _unit->SetStandState(0);
@@ -77,7 +77,7 @@
     delete this;
   }
 
-  static CreatureAIScript *Create(CreaturePointer c) { return new SavannahProwler(c); }
+  static CreatureAIScript *Create(Creature * c) { return new SavannahProwler(c); }
 };
 
 //Lazy Peons
@@ -85,7 +85,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(PeonSleepingAI);
-	PeonSleepingAI(CreaturePointer pCreature) : CreatureAIScript(pCreature) 
+	PeonSleepingAI(Creature * pCreature) : CreatureAIScript(pCreature) 
 	{
 		RegisterAIUpdateEvent( 3000 + RandomUInt( 180000 ) );
 	};
@@ -101,13 +101,13 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(KirithAI);
-	KirithAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+	KirithAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 	
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if (mKiller->IsPlayer())
 		{
-			 CreaturePointer NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(7729, _unit->GetPositionX()+2, _unit->GetPositionY()+2, _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
+			 Creature * NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(7729, _unit->GetPositionX()+2, _unit->GetPositionY()+2, _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
 			 if ( NewCreature != NULL )
 				NewCreature->Despawn(3*6*1000, 0);
 		}	
@@ -119,14 +119,14 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(AllianceGryphon);
 
-	AllianceGryphon(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	AllianceGryphon(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-   	void OnCombatStart(UnitPointer mTarget)
+   	void OnCombatStart(Unit * mTarget)
     {
 		if(!mTarget->IsPlayer())
 		     return;
 
-		CreaturePointer NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(9526, _unit->GetPositionX()+RandomFloat(5.0f), _unit->GetPositionY()+RandomFloat(5.0f), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
+		Creature * NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(9526, _unit->GetPositionX()+RandomFloat(5.0f), _unit->GetPositionY()+RandomFloat(5.0f), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
 		if ( NewCreature != NULL )
 			NewCreature->Despawn(360000, 0);
 
@@ -141,14 +141,14 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(AllianceHippogryph);
 
-	AllianceHippogryph(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	AllianceHippogryph(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-   	void OnCombatStart(UnitPointer mTarget)
+   	void OnCombatStart(Unit * mTarget)
     {
 		if(!mTarget->IsPlayer())
 		     return;
 		
-		CreaturePointer NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(9527, _unit->GetPositionX()+RandomFloat(5.0f), _unit->GetPositionY()+RandomFloat(5.0f), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
+		Creature * NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(9527, _unit->GetPositionX()+RandomFloat(5.0f), _unit->GetPositionY()+RandomFloat(5.0f), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
 		if ( NewCreature != NULL )
 			NewCreature->Despawn(360000, 0);
 
@@ -162,14 +162,14 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(HordeWyvern);
-	HordeWyvern(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	HordeWyvern(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-   	void OnCombatStart(UnitPointer mTarget)
+   	void OnCombatStart(Unit * mTarget)
     {
 		if(!mTarget->IsPlayer())
 		     return;
 
-		CreaturePointer NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(9297, _unit->GetPositionX()+RandomFloat(5.0f), _unit->GetPositionY()+RandomFloat(5.0f), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
+		Creature * NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(9297, _unit->GetPositionX()+RandomFloat(5.0f), _unit->GetPositionY()+RandomFloat(5.0f), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
 		if ( NewCreature != NULL )
 			NewCreature->Despawn(360000, 0);
 
@@ -183,14 +183,14 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(HordeBat);
-	HordeBat(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	HordeBat(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-   	void OnCombatStart(UnitPointer mTarget)
+   	void OnCombatStart(Unit * mTarget)
     {
 		if(!mTarget->IsPlayer())
 		     return;
 
-		CreaturePointer NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(9521, _unit->GetPositionX()+RandomFloat(5.0f), _unit->GetPositionY()+RandomFloat(5.0f), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
+		Creature * NewCreature = _unit->GetMapMgr()->GetInterface()->SpawnCreature(9521, _unit->GetPositionX()+RandomFloat(5.0f), _unit->GetPositionY()+RandomFloat(5.0f), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
 		if ( NewCreature != NULL )
 			NewCreature->Despawn(360000, 0);
 
@@ -204,9 +204,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(TyrandeWhisperwind);
-	TyrandeWhisperwind(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	TyrandeWhisperwind(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 			_unit->PlaySoundToSet(5885);
 	}
@@ -218,9 +218,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ProphetVelen);
-	ProphetVelen(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	ProphetVelen(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 			_unit->PlaySoundToSet(10155);
 	}
@@ -232,9 +232,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(KingMagniBronzebeard);
-	KingMagniBronzebeard(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	KingMagniBronzebeard(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 			_unit->PlaySoundToSet(5896);
 	}
@@ -246,9 +246,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Thrall);
-	Thrall(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Thrall(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 			_unit->PlaySoundToSet(5880);
 	}
@@ -260,9 +260,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(CairneBloodhoof);
-	CairneBloodhoof(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	CairneBloodhoof(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 			_unit->PlaySoundToSet(5884);
 	}
@@ -274,9 +274,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(LadySylvanasWindrunner);
-	LadySylvanasWindrunner(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	LadySylvanasWindrunner(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-	void OnCombatStart(UnitPointer mTarget)
+	void OnCombatStart(Unit * mTarget)
 	{
 			_unit->PlaySoundToSet(5886);
 	}
Index: Trunk/src/MiscScripts/DarkmoonFaireObjects.cpp
===================================================================
--- Trunk/src/MiscScripts/DarkmoonFaireObjects.cpp	(revision 896)
+++ Trunk/src/MiscScripts/DarkmoonFaireObjects.cpp	(working copy)
@@ -13,23 +13,23 @@
 class Blastenheimer5000 : public GameObjectAIScript
 {
 public:
-	Blastenheimer5000( GameObjectPointer pGameObject ) : GameObjectAIScript( pGameObject )
+	Blastenheimer5000( GameObject * pGameObject ) : GameObjectAIScript( pGameObject )
 	{
 		mPlayerGuid = 0;
 	};
 
-	static GameObjectAIScript* Create( GameObjectPointer pGameObject )
+	static GameObjectAIScript* Create( GameObject * pGameObject )
 	{
 		return new Blastenheimer5000( pGameObject );
 	};
 
-	void OnActivate( PlayerPointer pPlayer )
+	void OnActivate( Player * pPlayer )
 	{
 		if ( pPlayer == NULLPLR || mPlayerGuid != 0 )
 			return;
 
 		// Do you think we should look for ai owner ?
-		/*GameObjectPointer BlastCannon = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 180515 );
+		/*GameObject * BlastCannon = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 180515 );
 		if ( BlastCannon != NULLGOB )
 			BlastCannon->SetUInt32Value( GAMEOBJECT_FLAGS, 33 );*/
 
@@ -42,7 +42,7 @@
 
 	void AIUpdate()
 	{
-		PlayerPointer CurrentPlayer = objmgr.GetPlayer( mPlayerGuid );
+		Player * CurrentPlayer = objmgr.GetPlayer( mPlayerGuid );
 		if ( CurrentPlayer == NULLPLR )
 		{
 			RemoveAIUpdateEvent();
@@ -89,14 +89,14 @@
 class TonkControlConsole : public GameObjectAIScript
 {
 public:
-	TonkControlConsole(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new TonkControlConsole(GO); }
+	TonkControlConsole(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new TonkControlConsole(GO); }
 
 	// Click the Console
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		// Pre-flight checks
-		GameObjectPointer tonkConsole = NULL;
+		GameObject * tonkConsole = NULL;
 		tonkConsole = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 180524);
 
 		// Open and disable the Tonk Console
@@ -107,7 +107,7 @@
 		pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(19405, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), true, false, 0, 0)->Despawn(310000, 0);;
 
 		// Store the tonk just spawned
-		CreaturePointer pTonk = NULL;
+		Creature * pTonk = NULL;
 		pTonk = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 19405);
 
 		// Cast the tonk control spell on the tonk
@@ -139,9 +139,9 @@
 	}
 
 protected:
-	PlayerPointer Plr;
+	Player * Plr;
 	Creature* Tonk;
-	GameObjectPointer Console;
+	GameObject * Console;
 };
 */
 
Index: Trunk/src/MiscScripts/GameObjects.cpp
===================================================================
--- Trunk/src/MiscScripts/GameObjects.cpp	(revision 896)
+++ Trunk/src/MiscScripts/GameObjects.cpp	(working copy)
@@ -24,10 +24,10 @@
 class OrbOfCommand : public GameObjectAIScript
 {
 public:
-	OrbOfCommand(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new OrbOfCommand(GO); }
+	OrbOfCommand(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new OrbOfCommand(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->HasFinishedQuest(7761) && pPlayer->getLevel() >= 58 && pPlayer->InGroup() == true)
 		{
@@ -49,10 +49,10 @@
 class OrbOfTransLocUC : public GameObjectAIScript
 {
 public:
-	OrbOfTransLocUC(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new OrbOfTransLocUC(GO); }
+	OrbOfTransLocUC(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new OrbOfTransLocUC(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->getRace() == RACE_TAUREN || pPlayer->getRace() == RACE_TROLL || pPlayer->getRace() == RACE_ORC || pPlayer->getRace() == RACE_UNDEAD || pPlayer->getRace() == RACE_BLOODELF )
 		{
@@ -70,10 +70,10 @@
 class OrbOfTransLocSILVM : public GameObjectAIScript
 {
 public:
-	OrbOfTransLocSILVM(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new OrbOfTransLocSILVM(GO); }
+	OrbOfTransLocSILVM(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new OrbOfTransLocSILVM(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if( pPlayer->getRace() == RACE_TAUREN || pPlayer->getRace() == RACE_TROLL || pPlayer->getRace() == RACE_ORC || pPlayer->getRace() == RACE_UNDEAD || pPlayer->getRace() == RACE_BLOODELF )
 		{
@@ -91,10 +91,10 @@
 class FalconTowerUpper : public GameObjectAIScript
 {
 public:
-	FalconTowerUpper(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new FalconTowerUpper(GO); }
+	FalconTowerUpper(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new FalconTowerUpper(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 0, -588.9f, 4070.8f, 93.8f, 4.724170f);
 	}
@@ -105,10 +105,10 @@
 class FalconTowerLower : public GameObjectAIScript
 {
 public:
-	FalconTowerLower(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new FalconTowerLower(GO); }
+	FalconTowerLower(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new FalconTowerLower(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 0, -592.2f, 4070.2f, 143.3f, 4.724170f);
 	}
@@ -119,10 +119,10 @@
 class FirewingPointOrb1 : public GameObjectAIScript
 {
 public:
-	FirewingPointOrb1(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new FirewingPointOrb1(GO); }
+	FirewingPointOrb1(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new FirewingPointOrb1(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 0, -2260.6f, 3186.5f, 23.6f, 4.724170f);
 	}
@@ -133,10 +133,10 @@
 class FirewingPointOrb2 : public GameObjectAIScript
 {
 public:
-	FirewingPointOrb2(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new FirewingPointOrb2(GO); }
+	FirewingPointOrb2(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new FirewingPointOrb2(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 0, -2250.4f, 3120.7f, 27.3f, 4.724170f);
 	}
@@ -147,10 +147,10 @@
 class duskwitherspirebottom : public GameObjectAIScript
 {
 public:
-	duskwitherspirebottom(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new duskwitherspirebottom(GO); }
+	duskwitherspirebottom(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new duskwitherspirebottom(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 0, 9334.352f, -7880.743f, 74.910f, 4.724170f);
 	}
@@ -161,10 +161,10 @@
 class duskwitherspiretop : public GameObjectAIScript
 {
 public:
-	duskwitherspiretop(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new duskwitherspiretop(GO); }
+	duskwitherspiretop(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new duskwitherspiretop(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 0, 9291.155f, -7913.556f, 176.130f, 4.724170f);
 	}
@@ -175,17 +175,17 @@
 class Blacksmithing_Plans_Use : public GameObjectAIScript
 {
 public:
-	Blacksmithing_Plans_Use(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new Blacksmithing_Plans_Use(GO); }
+	Blacksmithing_Plans_Use(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new Blacksmithing_Plans_Use(GO); }
 
-	void OnLootTaken(PlayerPointer pLooter, ItemPrototype *pItemInfo)
+	void OnLootTaken(Player * pLooter, ItemPrototype *pItemInfo)
 	{
 		float SSX = pLooter->GetPositionX();
 		float SSY = pLooter->GetPositionY();
 		float SSZ = pLooter->GetPositionZ();
 		float SSO = pLooter->GetOrientation();
 
-		CreaturePointer NewCreature = pLooter->GetMapMgr()->GetInterface()->SpawnCreature(11120, SSX, SSY, SSZ, SSO, true, false, 0, 0);
+		Creature * NewCreature = pLooter->GetMapMgr()->GetInterface()->SpawnCreature(11120, SSX, SSY, SSZ, SSO, true, false, 0, 0);
 		if ( NewCreature != NULL )
 			NewCreature->Despawn(600000, 0);
 	}
@@ -196,12 +196,12 @@
 class GongOfBethekk : public GameObjectAIScript
 {
 public:
-	GongOfBethekk(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new GongOfBethekk(GO); }
+	GongOfBethekk(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new GongOfBethekk(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
-		CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(14515, -11556.3f, -1628.32f, 41.299f, 4.1f, true, false, 0, 0);
+		Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(14515, -11556.3f, -1628.32f, 41.299f, 4.1f, true, false, 0, 0);
 		if ( NewCreature != NULL )
 			NewCreature->Despawn(1200000, 0);
 	}
@@ -212,10 +212,10 @@
 class TerokksDownfall : public GameObjectAIScript
 {
 public:
-	TerokksDownfall(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new TerokksDownfall(GO); }
+	TerokksDownfall(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new TerokksDownfall(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->GetQuestLogForEntry(11073) && pPlayer->GetItemInterface()->GetItemCount(32720, 1))
 		{
@@ -224,7 +224,7 @@
 			float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
 
-			CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(21838, SSX, SSY, SSZ, SSO, true, false, 0, 0);
+			Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(21838, SSX, SSY, SSZ, SSO, true, false, 0, 0);
 			if ( NewCreature != NULL )
 				NewCreature->Despawn(600000, 0);
 		}
@@ -240,17 +240,17 @@
 class VilebranchKidnapper : public GameObjectAIScript
 {
 public:
-	VilebranchKidnapper(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new VilebranchKidnapper(GO); }
+	VilebranchKidnapper(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new VilebranchKidnapper(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		float SSX = pPlayer->GetPositionX();
 		float SSY = pPlayer->GetPositionY();
 		float SSZ = pPlayer->GetPositionZ();
 		float SSO = pPlayer->GetOrientation();
 
-		CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(14748, SSX+1, SSY, SSZ, SSO, true, false, 0, 0);
+		Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(14748, SSX+1, SSY, SSZ, SSO, true, false, 0, 0);
 		if ( NewCreature != NULL )
 			NewCreature->Despawn(600000, 0);
 
@@ -269,10 +269,10 @@
 class GongOfZulFarrak : public GameObjectAIScript
 {
 public:
-	GongOfZulFarrak(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new GongOfZulFarrak(GO); }
+	GongOfZulFarrak(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new GongOfZulFarrak(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->GetItemInterface()->GetItemCount(9240, 1))
 		{
@@ -281,7 +281,7 @@
 			float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
 
-			CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(7273, SSX+1, SSY, SSZ, SSO, true, false, 0, 0);
+			Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(7273, SSX+1, SSY, SSZ, SSO, true, false, 0, 0);
 			if ( NewCreature != NULL )
 				NewCreature->Despawn(1800000, 0);
 		}
@@ -297,10 +297,10 @@
 class Obsidias_Egg : public GameObjectAIScript
 {
 public:
-	Obsidias_Egg(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new Obsidias_Egg(GO); }
+	Obsidias_Egg(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new Obsidias_Egg(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->GetQuestLogForEntry(11078))
 		{
@@ -309,7 +309,7 @@
 			float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
 
-			CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(23282, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
+			Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(23282, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
 			if ( NewCreature != NULL )
 				NewCreature->Despawn(600000, 0);
 		}
@@ -325,10 +325,10 @@
 class Rivendarks_Egg : public GameObjectAIScript
 {
 public:
-	Rivendarks_Egg(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new Rivendarks_Egg(GO); }
+	Rivendarks_Egg(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new Rivendarks_Egg(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->GetQuestLogForEntry(11078))
 		{
@@ -337,7 +337,7 @@
 			float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
 
-			CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(23061, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
+			Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(23061, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
 			if ( NewCreature != NULL )
 				NewCreature->Despawn(600000, 0);
 		}
@@ -353,10 +353,10 @@
 class Furywings_Egg : public GameObjectAIScript
 {
 public:
-	Furywings_Egg(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new Furywings_Egg(GO); }
+	Furywings_Egg(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new Furywings_Egg(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->GetQuestLogForEntry(11078))
 		{
@@ -365,7 +365,7 @@
 			float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
 
-			CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(23261, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
+			Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(23261, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
 			if ( NewCreature != NULL )
 				NewCreature->Despawn(600000, 0);
 		}
@@ -381,10 +381,10 @@
 class Insidions_Egg : public GameObjectAIScript
 {
 public:
-	Insidions_Egg(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new Insidions_Egg(GO); }
+	Insidions_Egg(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new Insidions_Egg(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->GetQuestLogForEntry(11078))
 		{
@@ -393,7 +393,7 @@
 			float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
 
-			CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(23281, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
+			Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(23281, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
 			if ( NewCreature != NULL )
 				NewCreature->Despawn(600000, 0);
 		}
@@ -409,10 +409,10 @@
 class Corrupt_Minor_Manifestation_Water_Object : public GameObjectAIScript
 {
 public:
-	Corrupt_Minor_Manifestation_Water_Object(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new Corrupt_Minor_Manifestation_Water_Object(GO); }
+	Corrupt_Minor_Manifestation_Water_Object(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new Corrupt_Minor_Manifestation_Water_Object(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->GetQuestLogForEntry(63))
 		{
@@ -421,7 +421,7 @@
 			float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
 
-			CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(5894, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
+			Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(5894, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
 			if ( NewCreature != NULL )
 				NewCreature->Despawn(600000, 0);
 		}
@@ -437,10 +437,10 @@
 class Telathion_the_Impure_Object : public GameObjectAIScript
 {
 public:
-	Telathion_the_Impure_Object(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new Telathion_the_Impure_Object(GO); }
+	Telathion_the_Impure_Object(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new Telathion_the_Impure_Object(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->GetQuestLogForEntry(9508))
 		{
@@ -449,7 +449,7 @@
 			float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
 
-			CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(17359, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
+			Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(17359, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
 			if ( NewCreature != NULL )
 				NewCreature->Despawn(600000, 0);
 		}
@@ -465,21 +465,21 @@
 class UlagTheCleaver : public GameObjectAIScript
 {
 public:
-	UlagTheCleaver(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new UlagTheCleaver(GO); }
+	UlagTheCleaver(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new UlagTheCleaver(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 
-		CreaturePointer Ulag = NULLCREATURE;
-		GameObjectPointer pDoor = NULLGOB;
+		Creature * Ulag = NULLCREATURE;
+		GameObject * pDoor = NULLGOB;
 		Ulag = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(2390.101807f, 336.676788f, 40.015614f, 6390);
 		pDoor = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2388.480029f, 338.3901f, 40.092899f, 176594);
 		QuestLogEntry * en = pPlayer->GetQuestLogForEntry(1819);
 		if(!en || pDoor==NULL || Ulag)
 		return;
 
-		CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(6390, 2390.101807f, 336.676788f, 40.015614f, 2.259590f, true, false, 0, 0);
+		Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(6390, 2390.101807f, 336.676788f, 40.015614f, 2.259590f, true, false, 0, 0);
 		if ( NewCreature != NULL )
 		{
 			NewCreature->Despawn(180000, 0);
@@ -496,10 +496,10 @@
 class DustySpellbooks : public GameObjectAIScript
 {
 public:
-	DustySpellbooks(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new DustySpellbooks(GO); }
+	DustySpellbooks(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new DustySpellbooks(GO); }
 
-	void OnLootTaken(PlayerPointer pLooter, ItemPrototype *pItemInfo)
+	void OnLootTaken(Player * pLooter, ItemPrototype *pItemInfo)
 	{
 		QuestLogEntry * en = pLooter->GetQuestLogForEntry(422);
 		if(!en)
@@ -510,7 +510,7 @@
 		float SSZ = pLooter->GetPositionZ();
 		float SSO = pLooter->GetOrientation();
 
-		CreaturePointer NewCreature = pLooter->GetMapMgr()->GetInterface()->SpawnCreature(1770, SSX, SSY, SSZ, SSO, true, false, 0, 0);
+		Creature * NewCreature = pLooter->GetMapMgr()->GetInterface()->SpawnCreature(1770, SSX, SSY, SSZ, SSO, true, false, 0, 0);
 		if ( NewCreature != NULL )
 			NewCreature->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "The Sons of Arugal will rise against all who challenge the power of the Moonrage!");
 	}
@@ -521,10 +521,10 @@
 class CatFigurine : public GameObjectAIScript
 {
 public:
-	CatFigurine(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new CatFigurine(GO); }
+	CatFigurine(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new CatFigurine(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		uint32 Chance = RandomUInt(100);
 
@@ -535,7 +535,7 @@
 			float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
 
-			CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(3619, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
+			Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(3619, SSX, SSY+1, SSZ, SSO, true, false, 0, 0);
 			if ( NewCreature != NULL )
 				NewCreature->Despawn(600000, 0);
 		}
@@ -547,12 +547,12 @@
 class EthereumTransponderZeta : public GameObjectAIScript
 {
 public:
-	EthereumTransponderZeta(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new EthereumTransponderZeta(GO); }
+	EthereumTransponderZeta(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new EthereumTransponderZeta(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
-		CreaturePointer commander = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 20482);
+		Creature * commander = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 20482);
 		if(commander)
 			return;
 
@@ -562,7 +562,7 @@
 			float SSY = 2315.91f;
 			float SSZ = 116.418f;
 			float SSO = pPlayer->GetOrientation();
-			CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(20482, SSX, SSY, SSZ, SSO, true, false, 0, 0);
+			Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(20482, SSX, SSY, SSZ, SSO, true, false, 0, 0);
 			if ( NewCreature != NULL )
 				NewCreature->Despawn(1*60*1000, 0);
 		}
@@ -575,10 +575,10 @@
 class BringMetheEgg : public GameObjectAIScript
 {
 public:
-	BringMetheEgg(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new BringMetheEgg(GO); }
+	BringMetheEgg(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new BringMetheEgg(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -596,10 +596,10 @@
 class MysteriousEgg : public GameObjectAIScript
 {
 public:
-	MysteriousEgg(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new MysteriousEgg(GO); }
+	MysteriousEgg(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new MysteriousEgg(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -615,7 +615,7 @@
 			qle->UpdatePlayerFields();
 		}
 
-		CreaturePointer bird = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 19055);
+		Creature * bird = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 19055);
 		if(bird)
 			return;
 
@@ -630,10 +630,10 @@
 class AlterofTidalMastery : public GameObjectAIScript
 {
 public:
-	AlterofTidalMastery(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new AlterofTidalMastery(GO); }
+	AlterofTidalMastery(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new AlterofTidalMastery(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(16292, 7934.343750f, -7637.020996f, 112.694130f, 3.098388f, true, false, 0, 0);
 	}
@@ -644,10 +644,10 @@
 class ShrineOfDathRemar : public GameObjectAIScript
 {
 public:
-	ShrineOfDathRemar(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new ShrineOfDathRemar(GO); }
+	ShrineOfDathRemar(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new ShrineOfDathRemar(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		QuestLogEntry *qle = pPlayer->GetQuestLogForEntry(8345);
 		if(qle)
@@ -660,10 +660,10 @@
 class FirewingPointUpper : public GameObjectAIScript
 {
 public:
-	FirewingPointUpper(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new FirewingPointUpper(GO); }
+	FirewingPointUpper(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new FirewingPointUpper(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 0, -2260, 3223.16f, 5.534f, 1.60f);
 	}
@@ -674,10 +674,10 @@
 class FirewingPointLower : public GameObjectAIScript
 {
 public:
-	FirewingPointLower(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new FirewingPointLower(GO); }
+	FirewingPointLower(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new FirewingPointLower(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 0, -2263, 3111.45f, 136.35f, 3.65f);
 	}
@@ -688,15 +688,15 @@
 class APlagueUponThee : public GameObjectAIScript
 {
 public:
-	APlagueUponThee(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new APlagueUponThee(GO); }
+	APlagueUponThee(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new APlagueUponThee(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
 
-		GameObjectPointer barel = sEAS.SpawnGameobject(pPlayer, 177491, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 1, 0, 0, 0, 0);
+		GameObject * barel = sEAS.SpawnGameobject(pPlayer, 177491, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 1, 0, 0, 0, 0);
 		sEAS.GameobjectDelete(barel, 2*60*1000);
 	}
 };
@@ -706,10 +706,10 @@
 class SerpentStatue : public GameObjectAIScript
 {
 public:
-	SerpentStatue(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new SerpentStatue(GO); }
+	SerpentStatue(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new SerpentStatue(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -718,7 +718,7 @@
 		if(qle == NULL)
 			  return;
 
-		CreaturePointer naga = sEAS.SpawnCreature(pPlayer, 12369, 246.741, 2953.3, 5.8631, 1.078, 0);
+		Creature * naga = sEAS.SpawnCreature(pPlayer, 12369, 246.741, 2953.3, 5.8631, 1.078, 0);
 		if ( naga != NULL )
 			naga->Despawn(6*60*1000, 0);
 	}
@@ -729,10 +729,10 @@
 class CuregosGold : public GameObjectAIScript
 {
 public:
-	CuregosGold(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new CuregosGold(GO); }
+	CuregosGold(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new CuregosGold(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -741,7 +741,7 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer pirate = sEAS.SpawnCreature(pPlayer, 7899, pPlayer->GetPositionX()+RandomFloat(5.0f), pPlayer->GetPositionY()+RandomFloat(5.0f), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+		Creature * pirate = sEAS.SpawnCreature(pPlayer, 7899, pPlayer->GetPositionX()+RandomFloat(5.0f), pPlayer->GetPositionY()+RandomFloat(5.0f), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
 		if ( pirate != NULL )
 			pirate->Despawn(6*60*1000, 0);
 
@@ -761,7 +761,7 @@
 		if ( pirate != NULL )
 			pirate->Despawn(6*60*1000, 0);
 
-		GameObjectPointer gobj = sEAS.SpawnGameobject(pPlayer, 142194, pPlayer->GetPositionX()+5, pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 1, 0, 0, 0, 0);
+		GameObject * gobj = sEAS.SpawnGameobject(pPlayer, 142194, pPlayer->GetPositionX()+5, pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 1, 0, 0, 0, 0);
 		sEAS.GameobjectDelete(gobj, 10*60*1000);
 	}
 };
@@ -771,10 +771,10 @@
 class DreadmaulRock : public GameObjectAIScript
 {
 public:
-	DreadmaulRock(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new DreadmaulRock(GO); }
+	DreadmaulRock(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new DreadmaulRock(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -783,11 +783,11 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer shaghost = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 9136);
+		Creature * shaghost = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 9136);
 		if(shaghost)
 			return;
 
-		CreaturePointer shaghostspawn = sEAS.SpawnCreature(pPlayer, 9136, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+		Creature * shaghostspawn = sEAS.SpawnCreature(pPlayer, 9136, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
 		if ( shaghostspawn != NULL )
 			shaghostspawn->Despawn(2*60*1000, 0);
 	}
@@ -798,10 +798,10 @@
 class HandofIruxos : public GameObjectAIScript
 {
 public:
-	HandofIruxos(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new HandofIruxos(GO); }
+	HandofIruxos(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new HandofIruxos(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -810,7 +810,7 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer demon = sEAS.SpawnCreature(pPlayer, 11876, -348.231, 1763.85, 138.371, 4.42728, 0);
+		Creature * demon = sEAS.SpawnCreature(pPlayer, 11876, -348.231, 1763.85, 138.371, 4.42728, 0);
 		if ( demon != NULL )
 			demon->Despawn(6*60*1000, 0);
 	}
@@ -821,10 +821,10 @@
 class LegionPortals : public GameObjectAIScript
 {
 public:
-	LegionPortals(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new LegionPortals(GO); }
+	LegionPortals(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new LegionPortals(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -848,10 +848,10 @@
 class ProphecyofAkida : public GameObjectAIScript
 {
 public:
-	ProphecyofAkida(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new ProphecyofAkida(GO); }
+	ProphecyofAkida(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new ProphecyofAkida(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -867,7 +867,7 @@
 			qle->UpdatePlayerFields();
 		}
 
-		CreaturePointer prisoner = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17375);
+		Creature * prisoner = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17375);
 		if(!prisoner)
 			return;
 
@@ -880,10 +880,10 @@
 class Razormaw : public GameObjectAIScript
 {
 public:
-	Razormaw(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new Razormaw(GO); }
+	Razormaw(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new Razormaw(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -892,7 +892,7 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer razormaw = sEAS.SpawnCreature(pPlayer, 17592, -1203.8, -12424.7, 95.36, 4.7, 0);
+		Creature * razormaw = sEAS.SpawnCreature(pPlayer, 17592, -1203.8, -12424.7, 95.36, 4.7, 0);
 		if ( razormaw != NULL )
 			razormaw->Despawn(6*60*1000, 0);
 	}
@@ -903,10 +903,10 @@
 class TabletoftheSeven : public GameObjectAIScript
 {
 public:
-	TabletoftheSeven(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new TabletoftheSeven(GO); }
+	TabletoftheSeven(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new TabletoftheSeven(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -925,10 +925,10 @@
 class TestofEndurance : public GameObjectAIScript
 {
 public:
-	TestofEndurance(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new TestofEndurance(GO); }
+	TestofEndurance(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new TestofEndurance(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -937,7 +937,7 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer grenka = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 4490);
+		Creature * grenka = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 4490);
 		if(grenka)
 		{
 			if(!grenka->isAlive())
@@ -946,7 +946,7 @@
 				return;
 		}
 
-		CreaturePointer grenkaspawn = sEAS.SpawnCreature(pPlayer, 4490, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+		Creature * grenkaspawn = sEAS.SpawnCreature(pPlayer, 4490, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
 		if ( grenkaspawn != NULL )
 			grenkaspawn->Despawn(6*60*1000, 0);
 	}
@@ -957,10 +957,10 @@
 class TheFallenExarch : public GameObjectAIScript
 {
 public:
-	TheFallenExarch(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new TheFallenExarch(GO); }
+	TheFallenExarch(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new TheFallenExarch(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -969,7 +969,7 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer exarch = sEAS.SpawnCreature(pPlayer, 22452, -3365.9, 5143.19, -9.00132, 3.05, 0);
+		Creature * exarch = sEAS.SpawnCreature(pPlayer, 22452, -3365.9, 5143.19, -9.00132, 3.05, 0);
 		if ( exarch != NULL )
 			exarch->Despawn(6*60*1000, 0);
 	}
@@ -980,10 +980,10 @@
 class TheFinalCode : public GameObjectAIScript
 {
 public:
-	TheFinalCode(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new TheFinalCode(GO); }
+	TheFinalCode(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new TheFinalCode(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -1006,10 +1006,10 @@
 class TheRootofAllEvil : public GameObjectAIScript
 {
 public:
-	TheRootofAllEvil(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new TheRootofAllEvil(GO); }
+	TheRootofAllEvil(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new TheRootofAllEvil(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -1018,7 +1018,7 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer xandivious = sEAS.SpawnCreature(pPlayer, 15623, pPlayer->GetPositionX()+5, pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+		Creature * xandivious = sEAS.SpawnCreature(pPlayer, 15623, pPlayer->GetPositionX()+5, pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
 		if ( xandivious != NULL )
 			xandivious->Despawn(6*60*1000, 0);
 	}
@@ -1029,10 +1029,10 @@
 class TheThunderspike : public GameObjectAIScript
 {
 public:
-	TheThunderspike(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new TheThunderspike(GO); }
+	TheThunderspike(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new TheThunderspike(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -1041,13 +1041,13 @@
 			return;
 
 		// Wth is that ? To remove ?
-		GameObjectPointer gobj = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 184729);
+		GameObject * gobj = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 184729);
 		if(!gobj)
 			return;
 
 		gobj->Despawn(6*60*1000);
 
-		CreaturePointer spike = sEAS.SpawnCreature(pPlayer, 21319, 1315.54, 6688.33, -18, 0.001, 0);
+		Creature * spike = sEAS.SpawnCreature(pPlayer, 21319, 1315.54, 6688.33, -18, 0.001, 0);
 		spike->Despawn(5*60*1000, 0);
 	}
 };
@@ -1057,10 +1057,10 @@
 class StrengthofOne : public GameObjectAIScript
 {
 public:
-	StrengthofOne(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new StrengthofOne(GO); }
+	StrengthofOne(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new StrengthofOne(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -1070,10 +1070,10 @@
 			return;
 
 		// What is this ? :O To remove ?
-		CreaturePointer reaver = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17556);
+		Creature * reaver = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17556);
 		if(reaver)
 		{
-			CreaturePointer reaver2 = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(17556, reaver->GetPositionX(), reaver->GetPositionY(), reaver->GetPositionZ(), reaver->GetOrientation(), true, false, 0, 0);
+			Creature * reaver2 = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(17556, reaver->GetPositionX(), reaver->GetPositionY(), reaver->GetPositionZ(), reaver->GetOrientation(), true, false, 0, 0);
 			reaver2->Despawn(5*60*1000, 0);
 			reaver->Despawn(1, 5*60*1000);
 		}
@@ -1086,10 +1086,10 @@
 class HealingTheLake : public GameObjectAIScript
 {
 public:
-	HealingTheLake(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new HealingTheLake(GO); }
+	HealingTheLake(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new HealingTheLake(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry(181433);
 		if(pQuest && pQuest->GetMobCount(0) < pQuest->GetQuest()->required_mobcount[0])
@@ -1106,10 +1106,10 @@
 class OrbOfTransLocQuelLower : public GameObjectAIScript
 {
 public:
-	OrbOfTransLocQuelLower(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new OrbOfTransLocQuelLower(GO); }
+	OrbOfTransLocQuelLower(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new OrbOfTransLocQuelLower(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 4080, 12791.350586f, -6891.479004f, 31.322657f, 5.336779f);		 // teleports to the upper level
 	}
@@ -1121,10 +1121,10 @@
 class OrbOfTransLocQuelTop : public GameObjectAIScript
 {
 public:
-	OrbOfTransLocQuelTop(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new OrbOfTransLocQuelTop(GO); }
+	OrbOfTransLocQuelTop(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new OrbOfTransLocQuelTop(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 4080, 12782.415039f, -6879.196289f, 23.106073f, 2.222675f);		 // teleports to the lower level
 	}
@@ -1136,10 +1136,10 @@
 class OrbSunwell : public GameObjectAIScript
 {
 public:
-	OrbSunwell(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new OrbSunwell(GO); }
+	OrbSunwell(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new OrbSunwell(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		pPlayer->SafeTeleport(530, 4080, 12558.393555f, -6774.535645f, 15.027822f, 0.035100f);		 // Sunwell quit portal
 	}
@@ -1150,10 +1150,10 @@
 class TheRavensClaw : public GameObjectAIScript
 {
 public:
-	TheRavensClaw(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new TheRavensClaw(GO); }
+	TheRavensClaw(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new TheRavensClaw(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if ( pPlayer->GetMapMgr()->iInstanceMode == MODE_HEROIC )
 			sEAS.SpawnCreature(pPlayer, 23035, -87.3546, 288.006, 26.4832, 0, 0);
@@ -1165,8 +1165,8 @@
 class DeathGate1 : public GameObjectAIScript
 {
 public:
-	DeathGate1(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new DeathGate1(GO); }
+	DeathGate1(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new DeathGate1(GO); }
 
 	void OnSpawn()
 	{
@@ -1175,7 +1175,7 @@
 
 	void AIUpdate()
 	{
-		PlayerPointer plr = _gameobject->GetMapMgr()->GetInterface()->GetPlayerNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ() );
+		Player * plr = _gameobject->GetMapMgr()->GetInterface()->GetPlayerNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ() );
 		if( !plr )
 			return;
 
@@ -1196,8 +1196,8 @@
 class DeathGate2 : public GameObjectAIScript
 {
 public:
-	DeathGate2(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new DeathGate2(GO); }
+	DeathGate2(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new DeathGate2(GO); }
 
 	void OnSpawn()
 	{
@@ -1206,7 +1206,7 @@
 
 	void AIUpdate()
 	{
-		PlayerPointer plr = _gameobject->GetMapMgr()->GetInterface()->GetPlayerNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ() );
+		Player * plr = _gameobject->GetMapMgr()->GetInterface()->GetPlayerNearestCoords( _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ() );
 		if( !plr )
 			return;
 
@@ -1226,10 +1226,10 @@
 class DeathGate3 : public GameObjectAIScript
 {
 public:
-	DeathGate3(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new DeathGate3(GO); }
+	DeathGate3(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new DeathGate3(GO); }
 
-    void OnActivate(PlayerPointer pPlayer)
+    void OnActivate(Player * pPlayer)
     {
        if (pPlayer->getClass() == 6)
        {
@@ -1245,17 +1245,17 @@
  class SacredFireofLife : public GameObjectAIScript
 {
 public:
-	SacredFireofLife(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new SacredFireofLife(GO); }
+	SacredFireofLife(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new SacredFireofLife(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		float SSX = pPlayer->GetPositionX();
 		float SSY = pPlayer->GetPositionY();
 		float SSZ = pPlayer->GetPositionZ();
 		float SSO = pPlayer->GetOrientation();
 
-		CreaturePointer NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(10882, SSX, SSY, SSZ, SSO, true, false, 0, 0);
+		Creature * NewCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(10882, SSX, SSY, SSZ, SSO, true, false, 0, 0);
 		if ( NewCreature != NULL )
 			NewCreature->Despawn(600000, 0);
 	}
Index: Trunk/src/MiscScripts/QuelDanasPortal.cpp
===================================================================
--- Trunk/src/MiscScripts/QuelDanasPortal.cpp	(revision 896)
+++ Trunk/src/MiscScripts/QuelDanasPortal.cpp	(working copy)
@@ -23,8 +23,8 @@
 class PortalEffectSunwellIsle : public GameObjectAIScript
   {
   public:
-          PortalEffectSunwellIsle(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-          void OnActivate(PlayerPointer pPlayer)
+          PortalEffectSunwellIsle(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+          void OnActivate(Player * pPlayer)
           {
                 if(pPlayer->getLevel() >= 70) 
                 {
@@ -36,9 +36,9 @@
 					pPlayer->BroadcastMessage("You must be level 70 to use this!");
                 }
           }
-          static GameObjectAIScript *Create(GameObjectPointer GO) { return new PortalEffectSunwellIsle(GO); }
+          static GameObjectAIScript *Create(GameObject * GO) { return new PortalEffectSunwellIsle(GO); }
   };
-GameObjectAIScript * create_go(GameObjectPointer GO) { return new PortalEffectSunwellIsle(GO); }
+GameObjectAIScript * create_go(GameObject * GO) { return new PortalEffectSunwellIsle(GO); }
 void SetupQDGoHandlers(ScriptMgr * mgr)
 {
 
Index: Trunk/src/MiscScripts/RandomScripts.cpp
===================================================================
--- Trunk/src/MiscScripts/RandomScripts.cpp	(revision 896)
+++ Trunk/src/MiscScripts/RandomScripts.cpp	(working copy)
@@ -20,7 +20,7 @@
 #include "StdAfx.h"
 #include "Setup.h"
 
-void GuardsOnSalute(PlayerPointer pPlayer, UnitPointer pUnit)
+void GuardsOnSalute(Player * pPlayer, Unit * pUnit)
 {
 	if ( pPlayer == NULLPLR || pUnit == NULLUNIT )
 		return;
@@ -34,7 +34,7 @@
 	}
 }
 
-void GaurdsOnKiss(PlayerPointer pPlayer, UnitPointer pUnit)
+void GaurdsOnKiss(Player * pPlayer, Unit * pUnit)
 {
 	if ( pPlayer == NULLPLR || pUnit == NULLUNIT )
 		return;
@@ -48,7 +48,7 @@
 	}
 }
 
-void GuardsOnWave(PlayerPointer pPlayer, UnitPointer pUnit)
+void GuardsOnWave(Player * pPlayer, Unit * pUnit)
 {
 	if ( pPlayer == NULLPLR || pUnit == NULLUNIT )
 		return;
@@ -62,7 +62,7 @@
 	}
 }
 
-void OnEmote(PlayerPointer pPlayer, uint32 Emote, UnitPointer pUnit)
+void OnEmote(Player * pPlayer, uint32 Emote, Unit * pUnit)
 {
 	pUnit = pPlayer->GetMapMgr()->GetUnit(pPlayer->GetSelection());
 	if (!pUnit || !pUnit->isAlive() || pUnit->GetAIInterface()->GetNextTarget())
Index: Trunk/src/QuestScripts/ArathiHighlands.cpp
===================================================================
--- Trunk/src/QuestScripts/ArathiHighlands.cpp	(revision 896)
+++ Trunk/src/QuestScripts/ArathiHighlands.cpp	(working copy)
@@ -24,7 +24,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -32,7 +32,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 2768);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 2768);
 		if(creat == NULL)
 			return;
 		creat->m_escorter = mTarget;   
@@ -65,7 +65,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Professor_Phizzlethorpe);
-	Professor_Phizzlethorpe(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Professor_Phizzlethorpe(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
@@ -76,7 +76,7 @@
 			sEAS.DeleteWaypoints(_unit);
 			if(_unit->m_escorter == NULL)
 				return;
-			PlayerPointer plr = _unit->m_escorter;
+			Player * plr = _unit->m_escorter;
 			_unit->m_escorter = NULLPLR;
 			plr->GetQuestLogForEntry(665)->SendQuestComplete();
 		}
Index: Trunk/src/QuestScripts/Azshara.cpp
===================================================================
--- Trunk/src/QuestScripts/Azshara.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Azshara.cpp	(working copy)
@@ -33,7 +33,7 @@
 	{
 		delete this;
 	}
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1994, plr);
@@ -43,9 +43,9 @@
 		if(AutoSend)
 			Menu->SendTo(plr);
 	}
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
 	{
-		CreaturePointer  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature *  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pCreature==NULL)
 		{
 			return;
@@ -72,7 +72,7 @@
 	{
 		delete this;
 	}
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 2593, plr);
@@ -83,9 +83,9 @@
 			Menu->SendTo(plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
 	{
-		CreaturePointer  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature *  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pCreature==NULL)
 		{
 			return;
Index: Trunk/src/QuestScripts/Azuremyst_Isle.cpp
===================================================================
--- Trunk/src/QuestScripts/Azuremyst_Isle.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Azuremyst_Isle.cpp	(working copy)
@@ -28,7 +28,7 @@
 class DraeneiFishingNet : public GossipScript
 {
 public:
-	void GossipHello( ObjectPointer pObject, PlayerPointer pPlayer, bool AutoSend )
+	void GossipHello( Object * pObject, Player * pPlayer, bool AutoSend )
 	{
 		if ( pObject == NULL || pObject->GetTypeId() != TYPEID_ITEM || pPlayer == NULL )
 			return;
@@ -45,7 +45,7 @@
 			return;
 
 		// Meh, double object looking - we should find a way to remove this
-		GameObjectPointer School = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 181616 );
+		GameObject * School = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 181616 );
 		if ( School == NULLGOB || pPlayer->CalcDistance( School ) > 5.0f )
 			return;
 
@@ -58,7 +58,7 @@
 		uint32 Chance = RandomUInt( 10 );
 		if ( Chance <= 3 )
 		{
-			CreaturePointer NewCreature = sEAS.SpawnCreature( pPlayer, 17102, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 180000 );
+			Creature * NewCreature = sEAS.SpawnCreature( pPlayer, 17102, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 180000 );
 			if ( NewCreature != NULLCREATURE )
 			{
 				NewCreature->GetAIInterface()->StopMovement( 500 );
@@ -81,18 +81,18 @@
 	};
 };
 
-typedef std::pair< uint64, CreaturePointer > QuestDefinition;
+typedef std::pair< uint64, Creature * > QuestDefinition;
 typedef std::vector< QuestDefinition > QuestCreature;
 
 class TotemofCoo : public QuestScript 
 { 
 public:
-	void OnQuestStart(PlayerPointer pPlayer, QuestLogEntry *pQuest)
+	void OnQuestStart(Player * pPlayer, QuestLogEntry *pQuest)
 	{
 		if ( pPlayer == NULL || pPlayer->GetMapMgr() == NULL || pPlayer->GetMapMgr()->GetInterface() == NULL )
 			return;
 
-		CreaturePointer pAkida = sEAS.SpawnCreature( pPlayer, 17379, -4183.043457f, -12511.419922f, 44.361786f, 6.05629f, 0 );
+		Creature * pAkida = sEAS.SpawnCreature( pPlayer, 17379, -4183.043457f, -12511.419922f, 44.361786f, 6.05629f, 0 );
 		if ( pAkida == NULL )
 			return;
 
@@ -117,14 +117,14 @@
 		mAkidas.push_back( std::make_pair( pPlayer->GetGUID(), pAkida ) );
 	}
 
-	void OnQuestComplete(PlayerPointer pPlayer, QuestLogEntry *pQuest)
+	void OnQuestComplete(Player * pPlayer, QuestLogEntry *pQuest)
 	{
 		uint64 PlayerGuid = pPlayer->GetGUID();
 		for ( QuestCreature::iterator itr = mAkidas.begin(); itr != mAkidas.end(); ++itr )
 		{
 			if ( itr->first == PlayerGuid )
 			{
-				CreaturePointer pAkida = itr->second;
+				Creature * pAkida = itr->second;
 				if ( pAkida != NULL )							// Can't happen, but whatever :)
 				{
 					pAkida->CastSpell( pAkida, 30428, true );	// Disparition Effect
@@ -136,14 +136,14 @@
 		}
 	}
 
-	void OnQuestCancel(PlayerPointer pPlayer)
+	void OnQuestCancel(Player * pPlayer)
 	{
 		uint64 PlayerGuid = pPlayer->GetGUID();
 		for ( QuestCreature::iterator itr = mAkidas.begin(); itr != mAkidas.end(); ++itr )
 		{
 			if ( itr->first == PlayerGuid )
 			{
-				CreaturePointer pAkida = itr->second;
+				Creature * pAkida = itr->second;
 				if ( pAkida != NULL )							// Can't happen, but whatever :)
 				{
 					pAkida->CastSpell( pAkida, 30428, true );	// Disparition Effect
@@ -162,7 +162,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( !mTarget || !mTarget->GetMapMgr() || !mTarget->GetMapMgr()->GetInterface() )
 			return;
@@ -185,8 +185,8 @@
 		sEAS.EnableWaypoints( Coo );
 
 
-		UnitPointer Totem = TO_UNIT(Coo);
-		UnitPointer Plr = TO_UNIT(mTarget);
+		Unit * Totem = TO_UNIT(Coo);
+		Unit * Plr = TO_UNIT(mTarget);
 
 		string msg = "Ritk kin'chikx azul azure summit...";
 		sEventMgr.AddEvent(TO_UNIT(Coo), &Unit::SendChatMessage, (uint8)CHAT_MSG_MONSTER_SAY, (uint32)LANG_UNIVERSAL, msg.c_str(), EVENT_UNIT_CHAT_MSG, 6000, 0, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
@@ -202,14 +202,14 @@
 	}
 
 private:
-	CreaturePointer  Coo;
+	Creature *  Coo;
 };
 
 class TotemofYor : public QuestScript
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry )
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry )
 	{
 		if( !mTarget || !mTarget->GetMapMgr() || !mTarget->GetMapMgr()->GetInterface() )
 			return;
@@ -231,8 +231,8 @@
 		sEAS.WaypointCreate( Tikti, -3886.341553f, -13098.914063f, 3.964841f, 1.855801f, 0, 256, 16999 );
 		sEAS.EnableWaypoints( Tikti );
 
-		UnitPointer Totem = TO_UNIT(Tikti);
-		UnitPointer Plr = TO_UNIT(mTarget);
+		Unit * Totem = TO_UNIT(Tikti);
+		Unit * Plr = TO_UNIT(mTarget);
 		string msg = "[Furbolg] Far you mixik tak come. Gaze upon the kitch'kal river. Follow. Ilog to Yor.";
 		sEventMgr.AddEvent(TO_UNIT(Tikti), &Unit::SendChatMessage, (uint8)CHAT_MSG_MONSTER_SAY, (uint32)LANG_UNIVERSAL, msg.c_str(), EVENT_UNIT_CHAT_MSG, 15000, 0, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
 
@@ -248,14 +248,14 @@
 	}
 
 private:
-	CreaturePointer  Tikti;
+	Creature *  Tikti;
 };
 
 class TotemofVark : public QuestScript
 { 
 public:
 
-	void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( !mTarget || !mTarget->GetMapMgr() || !mTarget->GetMapMgr()->GetInterface() )
 			return;
@@ -280,8 +280,8 @@
 		sEAS.EnableWaypoints( Yor );
 
 		//We have to set up these pointers first to resolve ambiguity in the event manager template
-		UnitPointer Totem = TO_UNIT(Yor);
-		UnitPointer Plr = TO_UNIT(mTarget);
+		Unit * Totem = TO_UNIT(Yor);
+		Unit * Plr = TO_UNIT(mTarget);
 		// Change to Stillpine form
 		sEventMgr.AddEvent(Totem, &Unit::EventCastSpell, Totem, dbcSpell.LookupEntry(30446), EVENT_CREATURE_UPDATE, 15500, 0, EVENT_FLAG_DO_NOT_EXECUTE_IN_WORLD_CONTEXT);
 		string msg2 = "[Furbolg] We go now, together. We will seek Vark.";
@@ -296,7 +296,7 @@
 
 	// NEED TO MAKE THE PATH TO THE TOTEM OF VARK
 private:
-	CreaturePointer  Yor;
+	Creature *  Yor;
 };
 
 // Chieftain Oomooroo
@@ -305,9 +305,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ChieftainOomoorooQAI);
-    ChieftainOomoorooQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+    ChieftainOomoorooQAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if ( mKiller->IsPlayer() )
 		{
@@ -324,12 +324,12 @@
 
 // Healing The Lake
 
-bool HealingTheLake(uint32 i, SpellPointer pSpell)
+bool HealingTheLake(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 9294 );
 	if ( pQuest == NULL )
Index: Trunk/src/QuestScripts/BladeEdge_Mountains.cpp
===================================================================
--- Trunk/src/QuestScripts/BladeEdge_Mountains.cpp	(revision 896)
+++ Trunk/src/QuestScripts/BladeEdge_Mountains.cpp	(working copy)
@@ -27,9 +27,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(BladespireQAI);
-	BladespireQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+	BladespireQAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if (mKiller->IsPlayer()) 
 		{
@@ -49,9 +49,9 @@
 class IntotheSoulgrinder : public QuestScript
 {   
 public:
-	void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry *qLogEntry)
+	void OnQuestComplete(Player * mTarget, QuestLogEntry *qLogEntry)
 	{
-		CreaturePointer qg = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 22941);
+		Creature * qg = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 22941);
 		if(qg == NULL)
 			return;
 		qg->GetMapMgr()->GetInterface()->SpawnCreature(23053, 2794.978271f, 5842.185547f, 35.911819f, 0, true, false, 0, 0);
@@ -62,7 +62,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(MagnetoAura);
-	MagnetoAura(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	MagnetoAura(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -73,10 +73,10 @@
 class powerconv : public GameObjectAIScript
 {
 public:
-	powerconv(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new powerconv(GO); }
+	powerconv(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new powerconv(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -85,7 +85,7 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer magneto = sEAS.SpawnCreature(pPlayer, 21729, _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 0, 0);
+		Creature * magneto = sEAS.SpawnCreature(pPlayer, 21729, _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 0, 0);
 		if (magneto != NULL)
 		{
 			magneto->Despawn(5*60*1000, 0);
@@ -98,10 +98,10 @@
 class NetherEgg : public GameObjectAIScript
 {
 public:
-	NetherEgg(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new NetherEgg(GO); }
+	NetherEgg(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new NetherEgg(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -110,7 +110,7 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer whelp = sEAS.SpawnCreature(pPlayer, 20021, _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 0, 0);
+		Creature * whelp = sEAS.SpawnCreature(pPlayer, 20021, _gameobject->GetPositionX(), _gameobject->GetPositionY(), _gameobject->GetPositionZ(), 0, 0);
 		if (whelp != NULL)
 		{
 			whelp->Despawn(5*60*1000, 0);
@@ -126,7 +126,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(FunnyDragon);
-	FunnyDragon(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	FunnyDragon(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -168,19 +168,19 @@
 class LegionObelisk : public GameObjectAIScript
 {
 public:
-	LegionObelisk(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new LegionObelisk(GO); }
+	LegionObelisk(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new LegionObelisk(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if( pPlayer == NULL || pPlayer->GetMapMgr() == NULL || pPlayer->GetMapMgr()->GetInterface() == NULL )
 				return;
 
-		GameObjectPointer obelisk1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2898.92, 4759.29, 277.408, 185198);
-		GameObjectPointer obelisk2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2942.3, 4752.28, 285.553, 185197);
-		GameObjectPointer obelisk3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2834.39, 4856.67, 277.632, 185196);
-		GameObjectPointer obelisk4 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2923.37, 4840.36, 278.45, 185195);
-		GameObjectPointer obelisk5 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2965.75, 4835.25, 277.949, 185193);
+		GameObject * obelisk1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2898.92, 4759.29, 277.408, 185198);
+		GameObject * obelisk2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2942.3, 4752.28, 285.553, 185197);
+		GameObject * obelisk3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2834.39, 4856.67, 277.632, 185196);
+		GameObject * obelisk4 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2923.37, 4840.36, 278.45, 185195);
+		GameObject * obelisk5 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2965.75, 4835.25, 277.949, 185193);
 		
 		if( obelisk1 && obelisk2 && obelisk3 && obelisk4 && obelisk5 )
 		{
@@ -208,14 +208,14 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(BloodmaulQAI);
-    BloodmaulQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+    BloodmaulQAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if ( mKiller == NULL || !mKiller->IsPlayer() )
 			return;
 
-		PlayerPointer pPlayer = TO_PLAYER(mKiller);
+		Player * pPlayer = TO_PLAYER(mKiller);
 		QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 10502 );
 		if ( pQuest == NULL )
 		{
@@ -241,14 +241,14 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(Thuk_the_DefiantAI);
 	
-	Thuk_the_DefiantAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	Thuk_the_DefiantAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 	}
 	void OnLoad()
 	{ 	
 		_unit->SetFloatValue(OBJECT_FIELD_SCALE_X, 0.4f);
 	}
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
        RemoveAIUpdateEvent();
     }
@@ -263,16 +263,16 @@
 class Stasis_Chamber_Alpha : public GameObjectAIScript
 {
 public:
-	Stasis_Chamber_Alpha(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) {
+	Stasis_Chamber_Alpha(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) {
 		return new Stasis_Chamber_Alpha(GO);
 	}
 
-	void OnActivate(PlayerPointer pPlayer)	
+	void OnActivate(Player * pPlayer)	
 	{
 		if(pPlayer->GetQuestLogForEntry(10974))
 		{
-			CreaturePointer  pCreature = NULLCREATURE;
+			Creature *  pCreature = NULLCREATURE;
 			pCreature = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(3989.094482f, 6071.562500f, 266.416656f, 22920);			
 			if (pCreature != NULL)
 			{
@@ -291,12 +291,12 @@
 };
 
 // Protecting Our Own
-bool ProtectingOurOwn(uint32 i, SpellPointer pSpell)
+bool ProtectingOurOwn(uint32 i, Spell * pSpell)
 {
    if(pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer())
       return true;
 
-   PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+   Player * plr = TO_PLAYER(pSpell->u_caster);
    QuestLogEntry *qle = plr->GetQuestLogForEntry(10488);
    
    if(qle == NULL)
@@ -323,7 +323,7 @@
 {
 public:
    MOONSCRIPT_FACTORY_FUNCTION(BladespireOgreAI, MoonScriptCreatureAI);
-   BladespireOgreAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+   BladespireOgreAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
    {
 
    }
@@ -337,7 +337,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(BrutebaneStoutTriggerAI, MoonScriptCreatureAI);
-	BrutebaneStoutTriggerAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	BrutebaneStoutTriggerAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 	  _unit->SetUInt32Value(UNIT_FIELD_FACTIONTEMPLATE, 35);	  
       _unit->_setFaction();
@@ -392,9 +392,9 @@
       ParentClass::AIUpdate();
    }
 
-   PlayerPointer					plr;
-   GameObjectPointer				Keg;
-   GameObjectPointer				NdGo;
+   Player *					plr;
+   GameObject *				Keg;
+   GameObject *				NdGo;
    MoonScriptCreatureAI*	Ogre;
 };
 
Index: Trunk/src/QuestScripts/BlastedLands.cpp
===================================================================
--- Trunk/src/QuestScripts/BlastedLands.cpp	(revision 896)
+++ Trunk/src/QuestScripts/BlastedLands.cpp	(working copy)
@@ -26,24 +26,24 @@
 class HeroesofOld : public QuestScript
 {	
 public:
-  void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+  void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
   {
 	  if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 		  return;
 
-	CreaturePointer spawncheckcr = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), mTarget->GetPositionZ(), 7750);
+	Creature * spawncheckcr = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), mTarget->GetPositionZ(), 7750);
 
 	if(!spawncheckcr)
 	{
-		CreaturePointer general = sEAS.SpawnCreature(mTarget, 7750, -10619, -2997, 28.8, 4, 0);
+		Creature * general = sEAS.SpawnCreature(mTarget, 7750, -10619, -2997, 28.8, 4, 0);
 		general->Despawn(3*60*1000, 0);
 	}
 
-	GameObjectPointer spawncheckgobj = mTarget->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(),mTarget->GetPositionZ(), 141980);
+	GameObject * spawncheckgobj = mTarget->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(),mTarget->GetPositionZ(), 141980);
 
 	if(!spawncheckgobj)
 	{
-		GameObjectPointer generalsbox = sEAS.SpawnGameobject(mTarget, 141980, -10622, -2994, 28.6, 4, 4, 0, 0, 0, 0);
+		GameObject * generalsbox = sEAS.SpawnGameobject(mTarget, 141980, -10622, -2994, 28.6, 4, 4, 0, 0, 0, 0);
 		sEAS.GameobjectDelete(generalsbox, 3*60*1000);
 	}
   }
@@ -54,13 +54,13 @@
 class HeroesofOld1 : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		if(!plr)
 			return;
 
 		GossipMenu *Menu;
-		CreaturePointer general = TO_CREATURE(pObject);
+		Creature * general = TO_CREATURE(pObject);
 		if (general == NULL)
 			return;
 
@@ -72,12 +72,12 @@
 			Menu->SendTo(plr);
 	}
  
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
 	{
 		if(!plr)
 			return;
 
-		CreaturePointer general = TO_CREATURE(pObject);
+		Creature * general = TO_CREATURE(pObject);
 		if (general == NULL)
 			return;
 
@@ -89,19 +89,19 @@
  
 			case 1:
 			{
-				CreaturePointer spawncheckcr = plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(), 7750);
+				Creature * spawncheckcr = plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(), 7750);
 
 				if(!spawncheckcr)
 				{
-					CreaturePointer general = sEAS.SpawnCreature(plr, 7750, -10619, -2997, 28.8, 4, 0);
+					Creature * general = sEAS.SpawnCreature(plr, 7750, -10619, -2997, 28.8, 4, 0);
 					general->Despawn(3*60*1000, 0);
 				}
 
-				GameObjectPointer spawncheckgobj = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(), 141980);
+				GameObject * spawncheckgobj = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(), 141980);
 
 				if(!spawncheckgobj)
 				{
-					GameObjectPointer generalsbox = sEAS.SpawnGameobject(plr, 141980, -10622, -2994, 28.6, 4, 4, 0, 0, 0, 0);
+					GameObject * generalsbox = sEAS.SpawnGameobject(plr, 141980, -10622, -2994, 28.6, 4, 4, 0, 0, 0, 0);
 					sEAS.GameobjectDelete(generalsbox, 3*60*1000);
 				}
 			}
Index: Trunk/src/QuestScripts/BloodmystIsle.cpp
===================================================================
--- Trunk/src/QuestScripts/BloodmystIsle.cpp	(revision 896)
+++ Trunk/src/QuestScripts/BloodmystIsle.cpp	(working copy)
@@ -26,7 +26,7 @@
 class TheKesselRun : public QuestScript
 {	
 public:
-  void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+  void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
   {
     if(!mTarget)
 		return;
@@ -40,13 +40,13 @@
 class TheKesselRun1 : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		if(!plr)
 			return;
 
         GossipMenu *Menu;
-		CreaturePointer highchief = TO_CREATURE(pObject);
+		Creature * highchief = TO_CREATURE(pObject);
 		if (highchief == NULL)
 			return;
 
@@ -58,12 +58,12 @@
 			Menu->SendTo(plr);
     }
  
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
     {
 		if(!plr)
 			return;
 
-		CreaturePointer highchief = TO_CREATURE(pObject);
+		Creature * highchief = TO_CREATURE(pObject);
 		if (highchief == NULL)
 			return;
 
@@ -97,13 +97,13 @@
 class TheKesselRun2 : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		if(!plr)
 			return;
 
         GossipMenu *Menu;
-		CreaturePointer highchief = TO_CREATURE(pObject);
+		Creature * highchief = TO_CREATURE(pObject);
 		if (highchief == NULL)
 			return;
 
@@ -115,12 +115,12 @@
 			Menu->SendTo(plr);
     }
  
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
     {
 		if(!plr)
 			return;
 
-		CreaturePointer highchief = TO_CREATURE(pObject);
+		Creature * highchief = TO_CREATURE(pObject);
 		if (highchief == NULL)
 			return;
 
@@ -154,13 +154,13 @@
 class TheKesselRun3 : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		if(!plr)
 			return;
 
         GossipMenu *Menu;
-		CreaturePointer highchief = TO_CREATURE(pObject);
+		Creature * highchief = TO_CREATURE(pObject);
 		if (highchief == NULL)
 			return;
 
@@ -172,12 +172,12 @@
 			Menu->SendTo(plr);
     }
  
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
     {
 		if(!plr)
 			return;
 
-		CreaturePointer highchief = TO_CREATURE(pObject);
+		Creature * highchief = TO_CREATURE(pObject);
 		if (highchief == NULL)
 			return;
 
@@ -215,10 +215,10 @@
 class SavingPrincessStillpine : public GameObjectAIScript
 {
 public:
-	SavingPrincessStillpine(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new SavingPrincessStillpine(GO); }
+	SavingPrincessStillpine(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new SavingPrincessStillpine(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -234,7 +234,7 @@
 			qle->UpdatePlayerFields();
 		}
 
-		CreaturePointer princess = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17682);
+		Creature * princess = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17682);
 		if(!princess)
 			return;
 
@@ -247,14 +247,14 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(HighChiefBristlelimb);
-	HighChiefBristlelimb(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	HighChiefBristlelimb(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		fulborgskilled++;
 		if(mKiller->IsPlayer())
 		{
-			PlayerPointer mPlayer = TO_PLAYER(mKiller);
+			Player * mPlayer = TO_PLAYER(mKiller);
 
 			if(fulborgskilled > 8&& mPlayer->GetQuestLogForEntry( 9667 ))
 			{
@@ -271,26 +271,26 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION( WebbedCreature );
-    WebbedCreature( CreaturePointer pCreature ) : CreatureAIScript( pCreature )
+    WebbedCreature( Creature * pCreature ) : CreatureAIScript( pCreature )
 	{
 	};
 
-	void OnCombatStart( UnitPointer pTarget )
+	void OnCombatStart( Unit * pTarget )
 	{
 		_unit->GetAIInterface()->disable_melee = true;
 		_unit->Root();
 		_unit->GetAIInterface()->StopMovement( 0 );
 	};
 
-	void OnCombatStop( UnitPointer pTarget )
+	void OnCombatStop( Unit * pTarget )
 	{
 		_unit->GetAIInterface()->disable_melee = false;
 		_unit->UnRoot();
 	};
 
-	void OnDied( UnitPointer pKiller )
+	void OnDied( Unit * pKiller )
 	{
-		PlayerPointer QuestHolder = NULLPLR;
+		Player * QuestHolder = NULLPLR;
 		if ( pKiller->IsPlayer() )
 			QuestHolder = TO_PLAYER( pKiller );
 		else if ( pKiller->IsPet() && TO_PET( pKiller )->GetPetOwner() != NULLPLR )
@@ -301,7 +301,7 @@
 
 		// M4ksiu: I don't think the method is correct, but it can stay the way it was until someone gives proper infos
 		QuestLogEntry* Quest = QuestHolder->GetQuestLogForEntry( 9670 );
-		CreaturePointer RandomCreature = NULLCREATURE;
+		Creature * RandomCreature = NULLCREATURE;
 		if ( Quest == NULL )
 		{
 			// Creatures from Bloodmyst Isle
Index: Trunk/src/QuestScripts/DeathKnight.cpp
===================================================================
--- Trunk/src/QuestScripts/DeathKnight.cpp	(revision 896)
+++ Trunk/src/QuestScripts/DeathKnight.cpp	(working copy)
@@ -5,7 +5,7 @@
 class ScourgeGryphonOne : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		TaxiPath * path = sTaxiMgr.GetTaxiPath( 1053 );
 		plr->TaxiStart( path, 26308, 0 );
@@ -20,7 +20,7 @@
 class ScourgeGryphonTwo : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		TaxiPath * path = sTaxiMgr.GetTaxiPath( 1054 );
 		plr->TaxiStart( path, 26308, 0 );
@@ -40,13 +40,13 @@
 class AcherusSoulPrison : GameObjectAIScript
 {
 public:
-    AcherusSoulPrison(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-    static GameObjectAIScript *Create(GameObjectPointer GO) 
+    AcherusSoulPrison(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+    static GameObjectAIScript *Create(GameObject * GO) 
 	{ 
 	return new AcherusSoulPrison(GO); 
 	}
 
-    void OnActivate(PlayerPointer pPlayer)
+    void OnActivate(Player * pPlayer)
     {
         QuestLogEntry * en = pPlayer->GetQuestLogForEntry(12848);
         if(!en)
@@ -57,7 +57,7 @@
             float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
             
-            CreaturePointer pCreature = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, SSO);
+            Creature * pCreature = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, SSO);
 		     
 			if(!pCreature || !pCreature->isAlive())
             return;
@@ -81,12 +81,12 @@
     }
 };
 
-bool PreparationForBattle(uint32 i, SpellPointer pSpell)
+bool PreparationForBattle(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 	return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 12842 );
 	if ( pQuest != NULL )
 	{
Index: Trunk/src/QuestScripts/Desolace.cpp
===================================================================
--- Trunk/src/QuestScripts/Desolace.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Desolace.cpp	(working copy)
@@ -24,7 +24,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -33,7 +33,7 @@
 		float SSZ = mTarget->GetPositionZ();
 
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 5644);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 5644);
 		if(creat == NULL)
 			return;		
 		creat->m_escorter = mTarget;   
@@ -64,7 +64,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Dalinda_Malem );
-	Dalinda_Malem (CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Dalinda_Malem (Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
@@ -75,7 +75,7 @@
 			sEAS.DeleteWaypoints(_unit);
 			if(_unit->m_escorter == NULL)
 				return;
-			PlayerPointer plr = _unit->m_escorter;
+			Player * plr = _unit->m_escorter;
 			_unit->m_escorter = NULLPLR;
 			plr->GetQuestLogForEntry(1440)->SendQuestComplete();
 		}
Index: Trunk/src/QuestScripts/Dragonblight.cpp
===================================================================
--- Trunk/src/QuestScripts/Dragonblight.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Dragonblight.cpp	(working copy)
@@ -6,7 +6,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(WoodlandWalker);
-	WoodlandWalker(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	WoodlandWalker(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 		pCreature->SetUInt32Value( UNIT_FIELD_FACTIONTEMPLATE, 35 );
 	}
@@ -15,9 +15,9 @@
 class WoodlandWalkerGossip : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
-		CreaturePointer  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature *  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if( pCreature == NULL )
 			return;
 
@@ -44,7 +44,7 @@
 class WrathGateQuestCinema : public QuestScript
 {	
 public:
-  void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry *qLogEntry)
+  void OnQuestComplete(Player * mTarget, QuestLogEntry *qLogEntry)
   {
 	if( mTarget == NULL )
 		return;
Index: Trunk/src/QuestScripts/Druid.cpp
===================================================================
--- Trunk/src/QuestScripts/Druid.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Druid.cpp	(working copy)
@@ -28,12 +28,12 @@
 #include "Setup.h"
 #include "../Common/EasyFunctions.h"
 
-bool CenarionMoondust(uint32 i, SpellPointer pSpell) // Body And Heart (Alliance)
+bool CenarionMoondust(uint32 i, Spell * pSpell) // Body And Heart (Alliance)
 {
   const float pos[] = {6348.540039f, 128.124176f, 22.024008f, 4.172032f}; // x, y, z, o
-  PlayerPointer p_caster = pSpell->p_caster;
+  Player * p_caster = pSpell->p_caster;
 
-  CreaturePointer lunaclaw = p_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pos[0], pos[1], pos[2], 12138);
+  Creature * lunaclaw = p_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pos[0], pos[1], pos[2], 12138);
   if(lunaclaw != NULL)
   {
 	if(!lunaclaw->isAlive())
@@ -50,12 +50,12 @@
   return true;
 }
 
-bool CenarionLunardust(uint32 i, SpellPointer pSpell) // Body And Heart (Horde)
+bool CenarionLunardust(uint32 i, Spell * pSpell) // Body And Heart (Horde)
 {
   const float pos[] = {-2449.117920f, -1627.319824f, 91.801430f, 0}; // x, y, z, o
-  PlayerPointer p_caster = pSpell->p_caster;
+  Player * p_caster = pSpell->p_caster;
 
-  CreaturePointer lunaclaw = p_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pos[0], pos[1], pos[2], 12138);
+  Creature * lunaclaw = p_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pos[0], pos[1], pos[2], 12138);
   if(lunaclaw != NULL)
   {
 	if(!lunaclaw->isAlive())
@@ -78,14 +78,14 @@
 public:
   ADD_CREATURE_FACTORY_FUNCTION(Lunaclaw);
 
-  Lunaclaw(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+  Lunaclaw(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-  void OnDied(UnitPointer mKiller)
+  void OnDied(Unit * mKiller)
   {
 	if(!mKiller->IsPlayer())
 	  return;
 
-	PlayerPointer plr = TO_PLAYER(mKiller);
+	Player * plr = TO_PLAYER(mKiller);
 
 			if(plr == NULL || plr->GetMapMgr() == NULL || plr->GetMapMgr()->GetInterface() == NULL)
 				return;
@@ -99,7 +99,7 @@
 class SCRIPT_DECL MoonkinGhost_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 4714, plr);
@@ -117,9 +117,9 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
-		CreaturePointer  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature *  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
 		
@@ -190,7 +190,7 @@
 class SCRIPT_DECL BearGhost_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
         GossipMenu *Menu;
         objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 4719, plr);
@@ -208,9 +208,9 @@
             Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
-		CreaturePointer  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature *  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
 		
@@ -310,23 +310,23 @@
 class MoongladeQuest : public QuestScript
 {	
 public:
-  void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+  void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
   {
 	if(!mTarget->HasSpell(19027))
 	  mTarget->CastSpell(mTarget, dbcSpell.LookupEntry(19027), true);
   }
 };
 
-bool CurativeAnimalSalve(uint32 i, SpellPointer pSpell) // Curing the Sick
+bool CurativeAnimalSalve(uint32 i, Spell * pSpell) // Curing the Sick
 {
-	PlayerPointer caster = pSpell->p_caster;
+	Player * caster = pSpell->p_caster;
 	if(caster == NULL)
 		return true;
 
 	if(!pSpell->GetUnitTarget()->IsCreature())
 		return true;
 
-	CreaturePointer target = TO_CREATURE(pSpell->GetUnitTarget());
+	Creature * target = TO_CREATURE(pSpell->GetUnitTarget());
 	uint32 entry = target->GetEntry();
 
 	if(entry == 12296 || entry == 12298)
@@ -360,12 +360,12 @@
 
 // Trial Of The Lake
 
-bool TrialOfTheLake(uint32 i, SpellPointer pSpell)
+bool TrialOfTheLake(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 28 );
 	if ( pQuest == NULL )
Index: Trunk/src/QuestScripts/Duskwood.cpp
===================================================================
--- Trunk/src/QuestScripts/Duskwood.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Duskwood.cpp	(working copy)
@@ -14,7 +14,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(ElizaAI, MoonScriptCreatureAI);
-	ElizaAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	ElizaAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		mElizaCombatTimer = INVALIDATE_TIMER;
 		SetCanEnterCombat(false);
@@ -49,15 +49,15 @@
 	
 	int32		mElizaCombatTimer;
 	SpellDesc*	mSummonGuard;
-	CreaturePointer	mElizaGuard;
+	Creature *	mElizaGuard;
 };
 
 class SummonElizaQuest : public QuestScript
 {	
 public:
-	void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry *qLogEntry)
+	void OnQuestComplete(Player * mTarget, QuestLogEntry *qLogEntry)
 	{
-		CreaturePointer Eliza = sEAS.SpawnCreature(mTarget, 314, -10271.127f, 53.784f, 42.711f, 1.72f);
+		Creature * Eliza = sEAS.SpawnCreature(mTarget, 314, -10271.127f, 53.784f, 42.711f, 1.72f);
 		if ( Eliza != NULL )
 			Eliza->Despawn( 300000, 0 );	// Should it be that much ?
 	};
Index: Trunk/src/QuestScripts/Dustwallow_Marsh.cpp
===================================================================
--- Trunk/src/QuestScripts/Dustwallow_Marsh.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Dustwallow_Marsh.cpp	(working copy)
@@ -25,12 +25,12 @@
 {
 public:
    ADD_CREATURE_FACTORY_FUNCTION(BalosJackenQAI);
-	BalosJackenQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  
+	BalosJackenQAI(Creature * pCreature) : CreatureAIScript(pCreature)  
    {
 	  friendlyTimer=BALOS_FRIENDLY_TIMER;
    }
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{ 
 	   // If Balos Jacken HP - fAmount < 20%
 	   if (_unit->GetUInt32Value(UNIT_FIELD_HEALTH)- fAmount<=_unit->GetUInt32Value(UNIT_FIELD_MAXHEALTH)*0.2)
@@ -78,7 +78,7 @@
 	  }
    }
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 	  RemoveAIUpdateEvent();
 	}
@@ -90,7 +90,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -98,14 +98,14 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 6546);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 6546);
 
 		if(creat == NULL)
 			return;
 		
 		creat->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Fine, if you ready to go!");
 		
-		CreaturePointer Demon = creat->GetMapMgr()->GetInterface()->SpawnCreature(6549, creat->GetPositionX(), creat->GetPositionY(), creat->GetPositionZ(), creat->GetOrientation(), true, false, 0, 0);
+		Creature * Demon = creat->GetMapMgr()->GetInterface()->SpawnCreature(6549, creat->GetPositionX(), creat->GetPositionY(), creat->GetPositionZ(), creat->GetOrientation(), true, false, 0, 0);
 		sEventMgr.AddEvent(TO_CREATURE(Demon), &Creature::AddToWorld, creat->GetMapMgr(), EVENT_UNK, 12000, 0, 1);
 		sEventMgr.AddEvent(TO_CREATURE(Demon), &Creature::Despawn, (uint32)120000, (uint32)0, EVENT_CREATURE_UPDATE, 12000, 0, 1);
 		
@@ -131,14 +131,14 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(OverlordMokMorokk);
-	OverlordMokMorokk(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	OverlordMokMorokk(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
 		_unit->SetStandState(STANDSTATE_STAND);
 	}
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		uint32 chance = RandomUInt(100);
 		if(chance < 25)
@@ -177,7 +177,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -185,7 +185,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer Overlord = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 4500);
+		Creature * Overlord = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 4500);
 
 		if(Overlord == NULL)
 			return;
@@ -204,7 +204,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(PrivateHendel);
-	PrivateHendel(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	PrivateHendel(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -212,7 +212,7 @@
 		_unit->SetStandState(STANDSTATE_STAND);
 	}
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if(_unit->GetUInt32Value(UNIT_FIELD_HEALTH)- fAmount<=_unit->GetUInt32Value(UNIT_FIELD_MAXHEALTH)*0.37)
 		{
@@ -247,7 +247,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -255,7 +255,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer Dashel = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 4966);
+		Creature * Dashel = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 4966);
 
 		if(Dashel == NULL)
 			return;
Index: Trunk/src/QuestScripts/Eastern_Plaguelands.cpp
===================================================================
--- Trunk/src/QuestScripts/Eastern_Plaguelands.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Eastern_Plaguelands.cpp	(working copy)
@@ -24,15 +24,15 @@
 class Flayer : public CreatureAIScript
 {
 public:
-   Flayer(CreaturePointer pCreature) : CreatureAIScript(pCreature) { }
-   static CreatureAIScript *Create(CreaturePointer c) { return new Flayer(c); }
+   Flayer(Creature * pCreature) : CreatureAIScript(pCreature) { }
+   static CreatureAIScript *Create(Creature * c) { return new Flayer(c); }
 
-   void OnDied(UnitPointer mKiller)
+   void OnDied(Unit * mKiller)
    {
       if(!mKiller->IsPlayer())
         return;
 
-      CreaturePointer creat = _unit->GetMapMgr()->GetInterface()->SpawnCreature(11064, _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
+      Creature * creat = _unit->GetMapMgr()->GetInterface()->SpawnCreature(11064, _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), _unit->GetOrientation(), true, false, 0, 0);
       if(creat)
 		  sEventMgr.AddEvent(creat, &Creature::SafeDelete, EVENT_CREATURE_REMOVE_CORPSE,60000, 1, 0);
    }
@@ -47,7 +47,7 @@
 {
 public:
 
-   void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+   void GossipHello(Object * pObject, Player * plr, bool AutoSend)
    {
       QuestLogEntry *en = plr->GetQuestLogForEntry(5211);
 
@@ -69,7 +69,7 @@
       if(!pObject || !pObject->IsCreature())
         return;
 
-      CreaturePointer Spirit = TO_CREATURE(pObject);
+      Creature * Spirit = TO_CREATURE(pObject);
 
       Spirit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
       sEventMgr.AddEvent(Spirit, &Creature::SafeDelete, EVENT_CREATURE_REMOVE_CORPSE,5000, 1, 0);
@@ -86,14 +86,14 @@
 {
 public:
   ADD_CREATURE_FACTORY_FUNCTION(ArajTheSummoner);
-  ArajTheSummoner(CreaturePointer pCreature) : CreatureAIScript(pCreature) { }
+  ArajTheSummoner(Creature * pCreature) : CreatureAIScript(pCreature) { }
 
-  void OnDied(UnitPointer mKiller)
+  void OnDied(Unit * mKiller)
   {
     if(!mKiller->IsPlayer())
       return;
 
-    GameObjectPointer go = sEAS.SpawnGameobject(TO_PLAYER(mKiller), 177241, _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), _unit->GetOrientation(), 1, 0, 0, 0, 0);
+    GameObject * go = sEAS.SpawnGameobject(TO_PLAYER(mKiller), 177241, _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), _unit->GetOrientation(), 1, 0, 0, 0, 0);
     sEAS.GameobjectDelete(go, 60000);
   }
 };
Index: Trunk/src/QuestScripts/EversongWoods.cpp
===================================================================
--- Trunk/src/QuestScripts/EversongWoods.cpp	(revision 896)
+++ Trunk/src/QuestScripts/EversongWoods.cpp	(working copy)
@@ -22,12 +22,12 @@
 #include "../Common/EasyFunctions.h"
 #include "../Common/Base.h"
 
-bool PoweringOurDefenses(uint32 i, SpellPointer pSpell)
+bool PoweringOurDefenses(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->u_caster->IsPlayer())
     return true;
 
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 	if( !plr )
 		return true;
 
Index: Trunk/src/QuestScripts/FirstAid.cpp
===================================================================
--- Trunk/src/QuestScripts/FirstAid.cpp	(revision 896)
+++ Trunk/src/QuestScripts/FirstAid.cpp	(working copy)
@@ -79,7 +79,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(InjuredSoldier);
-	InjuredSoldier(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	InjuredSoldier(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -109,7 +109,7 @@
 	}
 };
 
-bool Triage(uint32 i, SpellPointer pSpell)
+bool Triage(uint32 i, Spell * pSpell)
 {
 	// Unit* target = pSpell->GetUnitTarget();
 	// if(!pSpell->p_caster || !target || target->GetTypeId() != TYPEID_UNIT) return true;
@@ -124,7 +124,7 @@
 		en->SendUpdateAddKill(0);
 		en->UpdatePlayerFields();
 		}
-	// CreaturePointer c_target = (Creature*)target;
+	// Creature * c_target = (Creature*)target;
 	// if(!c_target) return true;
 
 	// uint32 creatureID = c_target->GetEntry();
Index: Trunk/src/QuestScripts/Ghostlands.cpp
===================================================================
--- Trunk/src/QuestScripts/Ghostlands.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Ghostlands.cpp	(working copy)
@@ -27,12 +27,12 @@
 class Prisoner12 : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		if(!plr)
 			return;
 		GossipMenu *Menu;
-		CreaturePointer Prisoner12 = TO_CREATURE(pObject);
+		Creature * Prisoner12 = TO_CREATURE(pObject);
 		if (Prisoner12 == NULL)
 			return;
 		
@@ -44,12 +44,12 @@
 			Menu->SendTo(plr);
 	}
  
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
 	{
 		if(!plr)
 			return;
 
-		CreaturePointer Prisoner12 = TO_CREATURE(pObject);
+		Creature * Prisoner12 = TO_CREATURE(pObject);
 		if (Prisoner12 == NULL)
 			return;
 
@@ -90,13 +90,13 @@
 class Prisoner22 : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		if(!plr)
 			return;
 
 		GossipMenu *Menu;
-		CreaturePointer Prisoner22 = TO_CREATURE(pObject);
+		Creature * Prisoner22 = TO_CREATURE(pObject);
 		if (Prisoner22 == NULL)
 			return;
 			
@@ -108,12 +108,12 @@
 			Menu->SendTo(plr);
 	}
  
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
 	{
 		if(!plr)
 			return;
 
-		CreaturePointer Prisoner22 = TO_CREATURE(pObject);
+		Creature * Prisoner22 = TO_CREATURE(pObject);
 		if (Prisoner22 == NULL)
 			return;
 
@@ -154,13 +154,13 @@
 class Prisoner32 : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		if(!plr)
 			return;
 
 		GossipMenu *Menu;
-		CreaturePointer Prisoner32 = TO_CREATURE(pObject);
+		Creature * Prisoner32 = TO_CREATURE(pObject);
 		if (Prisoner32 == NULL)
 			return;
 
@@ -172,12 +172,12 @@
 			Menu->SendTo(plr);
 	}
  
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
 	{
 		if(!plr)
 			return;
 
-		CreaturePointer Prisoner32 = TO_CREATURE(pObject);
+		Creature * Prisoner32 = TO_CREATURE(pObject);
 		if (Prisoner32 == NULL)
 			return;
 
@@ -218,7 +218,7 @@
 {
 public:
   ADD_CREATURE_FACTORY_FUNCTION(PrisonersatDeatholme);
-  PrisonersatDeatholme(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+  PrisonersatDeatholme(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
   void OnLoad()
   {
@@ -230,10 +230,10 @@
 class VanquishingAquantion : public GameObjectAIScript
 {
 public:
-	VanquishingAquantion(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new VanquishingAquantion(GO); }
+	VanquishingAquantion(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new VanquishingAquantion(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -242,7 +242,7 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer naga = sEAS.SpawnCreature(pPlayer, 16292, 7938, -7632, 114, 3.05, 0);
+		Creature * naga = sEAS.SpawnCreature(pPlayer, 16292, 7938, -7632, 114, 3.05, 0);
 		naga->Despawn(6*60*1000, 0);
 	}
 };
Index: Trunk/src/QuestScripts/Hellfire_Peninsula.cpp
===================================================================
--- Trunk/src/QuestScripts/Hellfire_Peninsula.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Hellfire_Peninsula.cpp	(working copy)
@@ -28,9 +28,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(FelOrcScavengersQAI);
-    FelOrcScavengersQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+    FelOrcScavengersQAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if ( mKiller->IsPlayer() )
 		{
@@ -52,9 +52,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(BurdenOfSoulsQAI);
-    BurdenOfSoulsQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+    BurdenOfSoulsQAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if ( !mKiller->IsPlayer() )
 			return;
@@ -74,17 +74,17 @@
 /*--------------------------------------------------------------------------------------------------------*/
 // Testing the Antidote
 
-bool TestingTheAntidote(uint32 i, SpellPointer pSpell)
+bool TestingTheAntidote(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->GetUnitTarget() || pSpell->GetUnitTarget()->GetTypeId() != TYPEID_UNIT)
 		return true;
 
-	CreaturePointer target = NULLCREATURE;
+	Creature * target = NULLCREATURE;
 	target = TO_CREATURE(pSpell->GetUnitTarget());
 	if(!target || target->GetEntry() != 16880) // Hulking Helboar
 		return true;
 
-	CreaturePointer spawned = NULLCREATURE;
+	Creature * spawned = NULLCREATURE;
 	spawned = target->GetMapMgr()->GetInterface()->SpawnCreature(16992, target->GetPositionX(), target->GetPositionY(), target->GetPositionZ(), target->GetOrientation(), true, false, 0, 0);
 	if(!spawned)
 		return true;
@@ -100,8 +100,8 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Dreadtusk);
-	Dreadtusk(CreaturePointer pCreature) : CreatureAIScript(pCreature) { }
-	void OnDied(UnitPointer mKiller)
+	Dreadtusk(Creature * pCreature) : CreatureAIScript(pCreature) { }
+	void OnDied(Unit * mKiller)
 	{
 		if ( !mKiller->IsPlayer() )
 			return;
@@ -122,10 +122,10 @@
 class ZethGorMustBurnAlliance : public GameObjectAIScript
 {
 public:
-	ZethGorMustBurnAlliance(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new ZethGorMustBurnAlliance(GO); }
+	ZethGorMustBurnAlliance(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new ZethGorMustBurnAlliance(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 10895 );
 		if ( pQuest != NULL )
@@ -135,7 +135,7 @@
 			float SSY = pPlayer->GetPositionY();
 			float SSZ = pPlayer->GetPositionZ();
 
-			GameObjectPointer pBeacon = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( SSX, SSY, SSZ, 184661 );
+			GameObject * pBeacon = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( SSX, SSY, SSZ, 184661 );
 			if ( pBeacon != NULL && pBeacon->GetUInt32Value( GAMEOBJECT_FLAGS ) > 0 )
 			{
 				pBeacon->SetUInt32Value( GAMEOBJECT_FLAGS, ( pBeacon->GetUInt32Value( GAMEOBJECT_FLAGS ) - 1 ) );
@@ -144,14 +144,14 @@
 			// Northern Zeth'Gor Tower
 			if ( pQuest->GetMobCount( 0 ) < pQuest->GetQuest()->required_mobcount[0] )
 			{
-				GameObjectPointer pNorthern = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -820.0f, 2029.0f, 55.0f, 300150 );
+				GameObject * pNorthern = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -820.0f, 2029.0f, 55.0f, 300150 );
 				if ( pNorthern != NULL && pPlayer->CalcDistance( pPlayer, pNorthern ) < 40 ) // if reduced the server will crash when out of range
 				{
       				pQuest->SetMobCount( 0, pQuest->GetMobCount( 0 ) + 1 );
 					pQuest->SendUpdateAddKill( 0 );
 					pQuest->UpdatePlayerFields();
 
-					GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -819.77f, 2029.09f, 55.6082f, 0, 4, 0, 0, 0, 0);
+					GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -819.77f, 2029.09f, 55.6082f, 0, 4, 0, 0, 0, 0);
      				if ( pGameobject != NULL )
 					{
 						sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -164,14 +164,14 @@
 			// Southern Zeth'Gor Tower
 			if ( pQuest->GetMobCount( 1 ) < pQuest->GetQuest()->required_mobcount[1] )
 			{
-				GameObjectPointer pSouthern = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -1150.0f, 2110.0f, 84.0f, 300150 );
+				GameObject * pSouthern = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -1150.0f, 2110.0f, 84.0f, 300150 );
                 if ( pSouthern != NULL && pPlayer->CalcDistance( pPlayer, pSouthern ) < 40 )
 				{
 					pQuest->SetMobCount( 1, pQuest->GetMobCount( 1 ) + 1 );
 					pQuest->SendUpdateAddKill( 1 );
 					pQuest->UpdatePlayerFields();
 	
-					GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -1150.53f, 2109.92f, 84.4204f, 0, 4, 0, 0, 0, 0 );
+					GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -1150.53f, 2109.92f, 84.4204f, 0, 4, 0, 0, 0, 0 );
 	     			if ( pGameobject != NULL )
 					{
 						sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -184,14 +184,14 @@
 			// Forge Zeth'Gor Tower
 			if ( pQuest->GetMobCount( 2 ) < pQuest->GetQuest()->required_mobcount[2] )
 			{
-				GameObjectPointer pForge = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -893.0f, 1919.0f, 82.0f, 300150 );
+				GameObject * pForge = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -893.0f, 1919.0f, 82.0f, 300150 );
 				if ( pForge != NULL && pPlayer->CalcDistance( pPlayer, pForge ) < 40 )
 				{
 					pQuest->SetMobCount( 2, pQuest->GetMobCount( 2 ) + 1 );
 					pQuest->SendUpdateAddKill( 2 );
 					pQuest->UpdatePlayerFields();
 	
-					GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -893.499f, 1919.27f, 81.6449f, 0, 4, 0, 0, 0, 0);
+					GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -893.499f, 1919.27f, 81.6449f, 0, 4, 0, 0, 0, 0);
 	     			if ( pGameobject != NULL )
 					{
 						sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -204,14 +204,14 @@
 			// Foothill Zeth'Gor Tower
 			if ( pQuest->GetMobCount( 3 ) < pQuest->GetQuest()->required_mobcount[3] )
 			{
-				GameObjectPointer pFoothill = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -978.0f, 1879.0f, 111.0f, 300150 );
+				GameObject * pFoothill = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -978.0f, 1879.0f, 111.0f, 300150 );
 				if ( pFoothill != NULL && pPlayer->CalcDistance( pPlayer, pFoothill ) < 40 )
 				{
 					pQuest->SetMobCount( 3, pQuest->GetMobCount( 3 ) + 1 );
 					pQuest->SendUpdateAddKill( 3 );
 					pQuest->UpdatePlayerFields();
 	
-					GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -977.713f, 1879.500f, 110.892f, 0, 4, 0, 0, 0, 0 );
+					GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -977.713f, 1879.500f, 110.892f, 0, 4, 0, 0, 0, 0 );
 	     			if ( pGameobject != NULL )
 					{
 						sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -236,9 +236,9 @@
 /*--------------------------------------------------------------------------------------------------------*/
 // Zeth'Gor Must Burn!
 
-bool ZethGorMustBurnHorde(uint32 i, SpellPointer pSpell)
+bool ZethGorMustBurnHorde(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = pSpell->p_caster;
+	Player * pPlayer = pSpell->p_caster;
 	if ( pPlayer == NULL )
 		return true;
 
@@ -248,14 +248,14 @@
 		// Barracks
 		if ( pQuest->GetMobCount( 0 ) < pQuest->GetQuest()->required_mobcount[0] )
         {
-			GameObjectPointer pBarracks = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -1137.0f, 1970.0f, 74.0f, 300151 );
+			GameObject * pBarracks = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -1137.0f, 1970.0f, 74.0f, 300151 );
             if ( pBarracks != NULL && pPlayer->CalcDistance( pPlayer, pBarracks ) < 30 )
             {
       			pQuest->SetMobCount( 0, pQuest->GetMobCount( 0 ) + 1 );
 				pQuest->SendUpdateAddKill( 0 );
 				pQuest->UpdatePlayerFields();
 	
-				GameObjectPointer pGameobject = NULLGOB;
+				GameObject * pGameobject = NULLGOB;
 				pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -1129.08f, 1921.77f, 94.0074f, 0, 4, 0, 0, 0, 0 );
 				if ( pGameobject != NULL )
 				{
@@ -299,14 +299,14 @@
 		// Eastern Hovel
 		if ( pQuest->GetMobCount( 1 ) < pQuest->GetQuest()->required_mobcount[1] )
         {
-			GameObjectPointer pEasternHovel = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -940.0f, 1920.0f, 69.0f, 300151 );
+			GameObject * pEasternHovel = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -940.0f, 1920.0f, 69.0f, 300151 );
             if ( pEasternHovel != NULL && pPlayer->CalcDistance( pPlayer, pEasternHovel ) < 30 )
             {
       			pQuest->SetMobCount( 1, pQuest->GetMobCount( 1 ) + 1 );
 				pQuest->SendUpdateAddKill( 1 );
 				pQuest->UpdatePlayerFields();
 	
-				GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -938.034f, 1924.153f, 73.590f, 0, 4, 0, 0, 0, 0 );
+				GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -938.034f, 1924.153f, 73.590f, 0, 4, 0, 0, 0, 0 );
 				if ( pGameobject != NULL )
 				{
 	     			sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -319,14 +319,14 @@
 		// Western Hovel
 		if ( pQuest->GetMobCount( 2 ) < pQuest->GetQuest()->required_mobcount[2] )
         {
-			GameObjectPointer pWesternHovel = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -1155.0f, 2061.0f, 68.0f, 300151 );
+			GameObject * pWesternHovel = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -1155.0f, 2061.0f, 68.0f, 300151 );
             if ( pWesternHovel != NULL && pPlayer->CalcDistance( pPlayer, pWesternHovel ) < 30 )
             {
       			pQuest->SetMobCount( 2, pQuest->GetMobCount( 2 ) + 1 );
 				pQuest->SendUpdateAddKill( 2 );
 				pQuest->UpdatePlayerFields();
 	
-				GameObjectPointer  pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -1152.10f, 2066.20f, 72.959f, 0, 4, 0, 0, 0, 0 );
+				GameObject *  pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -1152.10f, 2066.20f, 72.959f, 0, 4, 0, 0, 0, 0 );
 				if ( pGameobject != NULL )
 				{
 	     			sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -339,14 +339,14 @@
 		// Stable
 		if ( pQuest->GetMobCount( 3 ) < pQuest->GetQuest()->required_mobcount[3] )
         {
-			GameObjectPointer pStable = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -1052.0f, 2007.0f, 66.0f, 300151 );
+			GameObject * pStable = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -1052.0f, 2007.0f, 66.0f, 300151 );
             if ( pStable != NULL && pPlayer->CalcDistance( pPlayer, pStable ) < 30 )
             {
 	      		pQuest->SetMobCount( 3, pQuest->GetMobCount( 3 ) + 1 );
 				pQuest->SendUpdateAddKill( 3 );
 				pQuest->UpdatePlayerFields();
 	
-				GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -1058.85f, 2010.95f, 68.776f, 0, 4, 0, 0, 0, 0 );
+				GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -1058.85f, 2010.95f, 68.776f, 0, 4, 0, 0, 0, 0 );
 				if ( pGameobject != NULL )
 				{
 	     			sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -367,9 +367,9 @@
 /*--------------------------------------------------------------------------------------------------------*/
 // Laying Waste to the Unwanted
 
-bool LayingWasteToTheUnwantedAlliance(uint32 i, SpellPointer pSpell)
+bool LayingWasteToTheUnwantedAlliance(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = pSpell->p_caster;
+	Player * pPlayer = pSpell->p_caster;
 	if ( pPlayer == NULL )
 		return true;
 
@@ -379,14 +379,14 @@
 		// Eastern Thrower
 		if ( pQuest->GetMobCount( 0 ) < pQuest->GetQuest()->required_mobcount[0] )
 		{
-			GameObjectPointer pEasternTower = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-155.0f, 2517.0f, 43.0f, 300152);
+			GameObject * pEasternTower = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-155.0f, 2517.0f, 43.0f, 300152);
 			if ( pEasternTower != NULL && pPlayer->CalcDistance( pPlayer, pEasternTower ) < 30 )
             {
       			pQuest->SetMobCount( 0, pQuest->GetMobCount( 0 ) + 1 );
 				pQuest->SendUpdateAddKill( 0 );
 				pQuest->UpdatePlayerFields();
 	
-				GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -157.916f, 2517.71f, 58.5508f, 0, 4, 0, 0, 0, 0 );
+				GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -157.916f, 2517.71f, 58.5508f, 0, 4, 0, 0, 0, 0 );
 				if ( pGameobject != NULL )
 				{
 	     			sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -399,14 +399,14 @@
 		// Central Eastern Thrower
 		if ( pQuest->GetMobCount( 1 ) < pQuest->GetQuest()->required_mobcount[1] )
 		{
-			GameObjectPointer pCentralEasternTower = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -152.0f, 2661.0f, 44.0f, 300152 );
+			GameObject * pCentralEasternTower = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -152.0f, 2661.0f, 44.0f, 300152 );
 			if ( pCentralEasternTower != NULL && pPlayer->CalcDistance( pPlayer, pCentralEasternTower ) < 30 )
 			{
       			pQuest->SetMobCount( 1, pQuest->GetMobCount( 1 ) + 1 );
 				pQuest->SendUpdateAddKill( 1 );
 				pQuest->UpdatePlayerFields();
 	
-				GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -152.527f, 2661.99f, 60.8123f, 0, 4, 0, 0, 0, 0 );
+				GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -152.527f, 2661.99f, 60.8123f, 0, 4, 0, 0, 0, 0 );
 				if ( pGameobject != NULL )
 				{
 	     			sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -419,14 +419,14 @@
 		// Central Western Thrower
 		if ( pQuest->GetMobCount( 2 ) < pQuest->GetQuest()->required_mobcount[2] )
 		{
-			GameObjectPointer pCentralWesternTower = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -174.0f, 2772.0f, 32.0f, 300152 );
+			GameObject * pCentralWesternTower = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -174.0f, 2772.0f, 32.0f, 300152 );
 			if ( pCentralWesternTower != NULL && pPlayer->CalcDistance( pPlayer, pCentralWesternTower ) < 30 )
 			{
       			pQuest->SetMobCount( 2, pQuest->GetMobCount( 2 ) + 1 );
 				pQuest->SendUpdateAddKill( 2 );
 				pQuest->UpdatePlayerFields();
 	
-				GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -177.916f, 2773.75f, 48.636f, 0, 4, 0, 0, 0, 0 );
+				GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -177.916f, 2773.75f, 48.636f, 0, 4, 0, 0, 0, 0 );
 				if ( pGameobject != NULL )
 				{
 	     			sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -439,14 +439,14 @@
 		// Western Thrower
 		if ( pQuest->GetMobCount( 3 ) < pQuest->GetQuest()->required_mobcount[3] )
 		{
-			GameObjectPointer pWesternTower = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -166.0f, 2818.0f, 29.0f, 300152 );
+			GameObject * pWesternTower = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -166.0f, 2818.0f, 29.0f, 300152 );
 			if ( pWesternTower != NULL && pPlayer->CalcDistance( pPlayer, pWesternTower ) < 30 )
 			{
       			pQuest->SetMobCount( 3, pQuest->GetMobCount( 3 ) + 1 );
 				pQuest->SendUpdateAddKill( 3 );
 				pQuest->UpdatePlayerFields();
 	
-				GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -166.0f, 2818.0f, 29.0f, 0, 4, 0, 0, 0, 0 );
+				GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -166.0f, 2818.0f, 29.0f, 0, 4, 0, 0, 0, 0 );
 	     		if ( pGameobject != NULL )
 				{
 	     			sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -468,12 +468,12 @@
 /*--------------------------------------------------------------------------------------------------------*/
 // Burn It Up... For the Horde!
 
-bool BurnItUp(uint32 i, SpellPointer pSpell)
+bool BurnItUp(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 10087 );
 	if ( pQuest == NULL )
@@ -481,7 +481,7 @@
 
 	if ( pQuest->GetMobCount( 0 ) < pQuest->GetQuest()->required_mobcount[0] )
 	{
-		GameObjectPointer pEastern = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -300.0f, 2407.0f, 50.0f, 183122 );
+		GameObject * pEastern = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -300.0f, 2407.0f, 50.0f, 183122 );
 		if( pEastern == NULL )
 			pEastern = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -300.0f, 2407.0f, 50.0f, 185122 );
 
@@ -491,7 +491,7 @@
 			pQuest->SendUpdateAddKill( 0 );
 			pQuest->UpdatePlayerFields();
 			
-			GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -300.0f, 2407.0f, 50.0f, 0, 4, 0, 0, 0, 0 );
+			GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, -300.0f, 2407.0f, 50.0f, 0, 4, 0, 0, 0, 0 );
 			if ( pGameobject != NULL )
 			{
      			sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -503,7 +503,7 @@
 
 	if ( pQuest->GetMobCount( 1 ) < pQuest->GetQuest()->required_mobcount[1] )
 	{
-		GameObjectPointer pWestern = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -350.0f, 2708.0f, 35.0f, 183122 );
+		GameObject * pWestern = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -350.0f, 2708.0f, 35.0f, 183122 );
 		if( pWestern == NULL )
 			pWestern = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -300.0f, 2407.0f, 50.0f, 185122 );
 
@@ -513,7 +513,7 @@
 			pQuest->SendUpdateAddKill( 1 );
 			pQuest->UpdatePlayerFields();
 			
-			GameObjectPointer pGameobject = sEAS.SpawnGameobject(pPlayer, 183816, -350.0f, 2708.0f, 35.0f, 0, 4, 0, 0, 0, 0);
+			GameObject * pGameobject = sEAS.SpawnGameobject(pPlayer, 183816, -350.0f, 2708.0f, 35.0f, 0, 4, 0, 0, 0, 0);
 			if ( pGameobject != NULL )
 			{
      			sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -536,7 +536,7 @@
 class PrisonerGossip : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer pPlayer, bool AutoSend)
+	void GossipHello(Object * pObject, Player * pPlayer, bool AutoSend)
 	{
 		if ( pPlayer == NULL )			// useless, but who knows
 			return;
@@ -545,7 +545,7 @@
 			return;
 
 		int32 i = -1;
-		CreaturePointer pPrisoner = TO_CREATURE( pObject );
+		Creature * pPrisoner = TO_CREATURE( pObject );
 		switch ( pPrisoner->GetEntry() )
 		{
 		case 20677:
@@ -576,7 +576,7 @@
 		}
    	}
  
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer pPlayer, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * pPlayer, uint32 Id, uint32 IntId, const char * EnteredCode)
     {
 		if ( pPlayer == NULL )
 			return;
@@ -592,7 +592,7 @@
 		case 1:
 		{
 			int32 i = -1;
-			CreaturePointer pPrisoner = TO_CREATURE( pObject );
+			Creature * pPrisoner = TO_CREATURE( pObject );
 			switch ( pPrisoner->GetEntry() )
 			{
 			case 20677:
@@ -635,7 +635,7 @@
 {
 public:
   	ADD_CREATURE_FACTORY_FUNCTION(PrisonersDreghoodElders);
-  	PrisonersDreghoodElders(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+  	PrisonersDreghoodElders(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
   	void OnLoad()
   	{
@@ -649,17 +649,17 @@
 /*--------------------------------------------------------------------------------------------------------*/
 // The Seer's Relic
 
-bool TheSeersRelic(uint32 i, SpellPointer pSpell)
+bool TheSeersRelic(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 	QuestLogEntry * qle = pPlayer->GetQuestLogForEntry( 9545 );
 	if ( qle == NULL || qle->GetMobCount( 0 ) >= qle->GetQuest()->required_mobcount[0] )
 		return true;
 
-	CreaturePointer  pTarget = pPlayer->GetMapMgr()->GetCreature( GET_LOWGUID_PART( pPlayer->GetSelection() ) );
+	Creature *  pTarget = pPlayer->GetMapMgr()->GetCreature( GET_LOWGUID_PART( pPlayer->GetSelection() ) );
 	if ( pTarget == NULL )
 		return true;
 
@@ -681,12 +681,12 @@
 /*--------------------------------------------------------------------------------------------------------*/
 // Disrupt Their Reinforcements
 
-bool DisruptTheirReinforcements(uint32 i, SpellPointer pSpell)
+bool DisruptTheirReinforcements(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 	QuestLogEntry *pQuestA = pPlayer->GetQuestLogForEntry( 10144 );
 	QuestLogEntry *pQuestH = pPlayer->GetQuestLogForEntry( 10208 );
 
@@ -695,7 +695,7 @@
 		bool SendMsg = false;
 		if ( pQuestA->GetMobCount( 0 ) < pQuestA->GetQuest()->required_mobcount[0] )
 		{
-			GameObjectPointer pGrimh = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -419.0f, 1847.0f, 80.0f, 184414 );
+			GameObject * pGrimh = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -419.0f, 1847.0f, 80.0f, 184414 );
 			if ( pGrimh != NULL && pPlayer->CalcDistance( pPlayer, pGrimh ) < 10 )
 			{
 				pQuestA->SetMobCount( 0, pQuestA->GetMobCount( 0 ) + 1 );
@@ -710,7 +710,7 @@
 		}
 		if ( pQuestA->GetMobCount( 1 ) < pQuestA->GetQuest()->required_mobcount[1] )
 		{
-			GameObjectPointer pKaalez = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -548.0f, 1782.0f, 58.0f, 184415 );
+			GameObject * pKaalez = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -548.0f, 1782.0f, 58.0f, 184415 );
 			if ( pKaalez != NULL && pPlayer->CalcDistance( pPlayer, pKaalez ) < 10 )
 			{
 				pQuestA->SetMobCount( 1, pQuestA->GetMobCount( 1 ) + 1 );
@@ -734,7 +734,7 @@
 		bool SendMsg = false;
 		if ( pQuestH->GetMobCount( 0 ) < pQuestH->GetQuest()->required_mobcount[0] )
 		{
-			GameObjectPointer pXilus = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -85.0f, 1880.0f, 74.0f, 184290 );
+			GameObject * pXilus = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( -85.0f, 1880.0f, 74.0f, 184290 );
 			if ( pXilus != NULL && pPlayer->CalcDistance( pPlayer, pXilus ) < 10 )
 			{
 				pQuestH->SetMobCount( 0, pQuestH->GetMobCount( 0 ) + 1 );
@@ -749,7 +749,7 @@
 		}
 		if ( pQuestH->GetMobCount( 1 ) < pQuestH->GetQuest()->required_mobcount[1] )
 		{
-			GameObjectPointer pKruul = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 147.0f, 1717.0f, 38.0f, 184289 );
+			GameObject * pKruul = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 147.0f, 1717.0f, 38.0f, 184289 );
 			if ( pKruul != NULL && pPlayer->CalcDistance( pPlayer, pKruul ) < 10 )
 			{
 				pQuestH->SetMobCount( 1, pQuestH->GetMobCount( 1 ) + 1 );
@@ -780,14 +780,14 @@
 /*--------------------------------------------------------------------------------------------------------*/
 //Arzeth's Demise
 
-bool FuryOfTheDreghoodElders(uint32 i, SpellPointer pSpell)
+bool FuryOfTheDreghoodElders(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 
-	UnitPointer pUnit = pSpell->GetUnitTarget();
+	Unit * pUnit = pSpell->GetUnitTarget();
 	if ( pUnit == NULLUNIT || !pUnit->IsCreature() || pUnit->GetEntry() != 19354 )
 		return true;
 
@@ -802,18 +802,18 @@
 /*--------------------------------------------------------------------------------------------------------*/
 // A Spirit Guide
 
-bool ASpiritGuide(uint32 i, SpellPointer pSpell)
+bool ASpiritGuide(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 
   	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 9410 );
   	if ( pQuest == NULL )
     	return true;
 
-  	CreaturePointer pSpiritWolf = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(17077, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), true, false, NULL, NULL);
+  	Creature * pSpiritWolf = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature(17077, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), true, false, NULL, NULL);
 	if ( pSpiritWolf == NULL )
 		return true;
 	
@@ -830,7 +830,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(HellfireDeadNPC);
-	HellfireDeadNPC(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	HellfireDeadNPC(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -840,17 +840,17 @@
 	}
 };
 
-bool AnAmbitiousPlan(uint32 i, SpellPointer pSpell)
+bool AnAmbitiousPlan(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 9383 );
 	if ( pQuest == NULL )
 		return true;
 
-	CreaturePointer pTarget = pPlayer->GetMapMgr()->GetCreature( GET_LOWGUID_PART( pPlayer->GetSelection() ) );
+	Creature * pTarget = pPlayer->GetMapMgr()->GetCreature( GET_LOWGUID_PART( pPlayer->GetSelection() ) );
 	if ( pTarget == NULL || pTarget->GetEntry() != 16975 )
 		return true;
 
@@ -863,7 +863,7 @@
 	pTarget->GetAIInterface()->SetAIState( STATE_IDLE );
 	pTarget->Despawn( 0, 0 );
 
-	GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, SSx, SSy, SSz, 0, 1, 0, 0, 0, 0 );
+	GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, 183816, SSx, SSy, SSz, 0, 1, 0, 0, 0, 0 );
 	if ( pGameobject != NULL )
 	{
 		sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -876,12 +876,12 @@
 class DarkTidingsAlliance : public QuestScript 
 { 
 public:
-	void OnQuestComplete(PlayerPointer pPlayer, QuestLogEntry *qLogEntry)
+	void OnQuestComplete(Player * pPlayer, QuestLogEntry *qLogEntry)
 	{
 		if ( pPlayer == NULL )
 			return;
 
-		CreaturePointer pCreature = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17479 );
+		Creature * pCreature = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17479 );
 		if ( pCreature == NULL )
 			return;
 
@@ -894,12 +894,12 @@
 class DarkTidingsHorde : public QuestScript 
 { 
 public:
-	void OnQuestComplete(PlayerPointer pPlayer, QuestLogEntry *qLogEntry)
+	void OnQuestComplete(Player * pPlayer, QuestLogEntry *qLogEntry)
 	{
 		if ( pPlayer == NULL )
 			return;
 
-		CreaturePointer pCreature = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17558 );
+		Creature * pCreature = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17558 );
 		if ( pCreature == NULL )
 			return;
 
Index: Trunk/src/QuestScripts/HillsbradFoothills.cpp
===================================================================
--- Trunk/src/QuestScripts/HillsbradFoothills.cpp	(revision 896)
+++ Trunk/src/QuestScripts/HillsbradFoothills.cpp	(working copy)
@@ -27,7 +27,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -50,9 +50,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Baron_Vardus);
-	Baron_Vardus(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Baron_Vardus(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
-	void OnDied(UnitPointer mKiller) 
+	void OnDied(Unit * mKiller) 
 	{
 		BaronVardusAllowSpawn = true;
 	}
Index: Trunk/src/QuestScripts/Howling_Fjord.cpp
===================================================================
--- Trunk/src/QuestScripts/Howling_Fjord.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Howling_Fjord.cpp	(working copy)
@@ -21,16 +21,16 @@
 #include "../Common/EasyFunctions.h"
 
 // War is Hell
-bool WarIsHell(uint32 i, SpellPointer pSpell)
+bool WarIsHell(uint32 i, Spell * pSpell)
 {
 	if( !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 	if( plr == NULL )
 		return true;
 
-	CreaturePointer target = TO_CREATURE(plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( plr->GetPositionX(), plr->GetPositionY() , plr->GetPositionZ(), 24008 ));
+	Creature * target = TO_CREATURE(plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( plr->GetPositionX(), plr->GetPositionY() , plr->GetPositionZ(), 24008 ));
 	if( target == NULL )
 		return true;
 
@@ -39,7 +39,7 @@
 	if( qle == NULL )
 		return true;
  
-	GameObjectPointer obj = NULLGOB;
+	GameObject * obj = NULLGOB;
  
 	if( qle && qle->GetMobCount(0) < qle->GetQuest()->required_mobcount[0] )
 	{
@@ -56,12 +56,12 @@
 }
 
 // A Lesson in Fear
-bool PlantForsakenBanner(uint32 i, SpellPointer pSpell)
+bool PlantForsakenBanner(uint32 i, Spell * pSpell)
 {
 	if(pSpell->u_caster->IsPlayer() == false)
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if( pPlayer == NULL )
 		return true;
 
@@ -69,7 +69,7 @@
 	if( pQuest == NULL )
 		return true;
 	
-	CreaturePointer target = TO_CREATURE(pSpell->GetUnitTarget());
+	Creature * target = TO_CREATURE(pSpell->GetUnitTarget());
 	if (target == NULL)
 		return true;
 
Index: Trunk/src/QuestScripts/Isle_of_QuelDanas.cpp
===================================================================
--- Trunk/src/QuestScripts/Isle_of_QuelDanas.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Isle_of_QuelDanas.cpp	(working copy)
@@ -29,10 +29,10 @@
 class ScryingOrb : public GameObjectAIScript
 {
 public:
-	ScryingOrb(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new ScryingOrb(GO); }
+	ScryingOrb(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new ScryingOrb(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		QuestLogEntry *qle = pPlayer->GetQuestLogForEntry(11490);
   		if(qle)
@@ -41,7 +41,7 @@
 			float SSY = pPlayer->GetPositionY();
 			float SSZ = pPlayer->GetPositionZ();
 			
-			GameObjectPointer Orb = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( SSX, SSY, SSZ, 187578);
+			GameObject * Orb = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( SSX, SSY, SSZ, 187578);
 			if (Orb)
 			{
 				Orb->SetState(0);
@@ -63,13 +63,13 @@
 /*--------------------------------------------------------------------------------------------------------*/
 // Erratic Behavior
 
-bool ConvertingSentry(uint32 i, SpellPointer pSpell)
+bool ConvertingSentry(uint32 i, Spell * pSpell)
 {
-  PlayerPointer caster = pSpell->p_caster;
+  Player * caster = pSpell->p_caster;
   if(caster == NULL)
     return true;
 
-  CreaturePointer target = TO_CREATURE(pSpell->GetUnitTarget());
+  Creature * target = TO_CREATURE(pSpell->GetUnitTarget());
   if(target == NULL)
     return true;
 
@@ -103,19 +103,19 @@
   return true;
 }
 
-bool OrbOfMurlocControl(uint32 i, SpellPointer pSpell)
+bool OrbOfMurlocControl(uint32 i, Spell * pSpell)
 {
 	if(pSpell->m_caster->IsPlayer() == false)
 		return true;
 
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 
 	QuestLogEntry *pQuest = plr->GetQuestLogForEntry(11541);
 	if(pQuest == NULL)
 		return true;
 
-	UnitPointer mTarget;
-	CreaturePointer cTarget;
+	Unit * mTarget;
+	Creature * cTarget;
 
 	for(ObjectSet::iterator itr = pSpell->m_caster->GetInRangeSetBegin(); itr != pSpell->m_caster->GetInRangeSetEnd(); ++itr)
 	{
@@ -135,7 +135,7 @@
 		  {
 			pQuest->SetMobCount(0, pQuest->GetMobCount(0) + 1);
 			pQuest->SendUpdateAddKill(0);		
-			CreaturePointer FreedGreengill = sEAS.SpawnCreature(plr, 25085, cTarget->GetPositionX(), cTarget->GetPositionY(), cTarget->GetPositionZ(), cTarget->GetOrientation(), 0);
+			Creature * FreedGreengill = sEAS.SpawnCreature(plr, 25085, cTarget->GetPositionX(), cTarget->GetPositionY(), cTarget->GetPositionZ(), cTarget->GetOrientation(), 0);
 			FreedGreengill->Despawn(6*60*1000, 0);
 			cTarget->Despawn(0, 6*60*1000);
 			pQuest->UpdatePlayerFields();
@@ -171,9 +171,9 @@
 	{13273.0f, -7151.21f, 15.9774f, 1.39723f}
 };
 
-bool ShipBombing(uint32 i, SpellPointer pSpell)
+bool ShipBombing(uint32 i, Spell * pSpell)
 {
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 	if(!plr)
 		return true;
 
@@ -191,11 +191,11 @@
 		}
 	}
 	
-	GameObjectPointer Sinloren = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(13200.232422, -7049.176270, 3.838517, 550000);
-	GameObjectPointer Bloodoath = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(13319.419922, -6988.779785, 4.002993, 550000);
-	GameObjectPointer Dawnchaser = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(13274.51625, -7145.434570, 4.770292, 550000);
+	GameObject * Sinloren = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(13200.232422, -7049.176270, 3.838517, 550000);
+	GameObject * Bloodoath = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(13319.419922, -6988.779785, 4.002993, 550000);
+	GameObject * Dawnchaser = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(13274.51625, -7145.434570, 4.770292, 550000);
 	
-	GameObjectPointer obj = NULLGOB;
+	GameObject * obj = NULLGOB;
 
 	if(Sinloren != NULL)
 	{
@@ -260,7 +260,7 @@
 class SCRIPT_DECL AyrenCloudbreaker_Gossip : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 12252, plr);
@@ -271,7 +271,7 @@
 		Menu->SendTo(plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
 	{
 		switch(IntId)
 		{
@@ -303,7 +303,7 @@
 class SCRIPT_DECL UnrestrainedDragonhawk_Gossip : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 12371, plr);
@@ -312,7 +312,7 @@
 		Menu->SendTo(plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
 	{
 		switch(IntId)
 		{
@@ -336,9 +336,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(TheBattleForTheSunReachArmory);
-    TheBattleForTheSunReachArmory(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+    TheBattleForTheSunReachArmory(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if (mKiller->IsPlayer())
 		{
@@ -362,12 +362,12 @@
 	}
 };
 
-bool ImpaleEmissary(uint32 i, SpellPointer pSpell)
+bool ImpaleEmissary(uint32 i, Spell * pSpell)
 {
 	if(pSpell->u_caster->IsPlayer() == false)
 	return true;
 
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if( pPlayer == NULL )
 		return true;
 
@@ -379,7 +379,7 @@
 			return true;
 	}
 	
-	CreaturePointer mEmissary = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 25003);
+	Creature * mEmissary = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 25003);
 	if( mEmissary == NULL )
 		return true;
 		
Index: Trunk/src/QuestScripts/LochModan.cpp
===================================================================
--- Trunk/src/QuestScripts/LochModan.cpp	(revision 896)
+++ Trunk/src/QuestScripts/LochModan.cpp	(working copy)
@@ -24,7 +24,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -33,7 +33,7 @@
 		float SSZ = mTarget->GetPositionZ();
 
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 1379);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 1379);
 		if(creat == NULL)
 			return;
 		creat->m_escorter = mTarget;   
@@ -59,7 +59,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Miran);
-	Miran(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Miran(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
@@ -70,7 +70,7 @@
 			sEAS.DeleteWaypoints(_unit);
 			if(_unit->m_escorter == NULL)
 				return;
-			PlayerPointer plr = _unit->m_escorter;
+			Player * plr = _unit->m_escorter;
 			_unit->m_escorter = NULLPLR;
 			plr->GetQuestLogForEntry(309)->SendQuestComplete();
 		}
Index: Trunk/src/QuestScripts/Mage.cpp
===================================================================
--- Trunk/src/QuestScripts/Mage.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Mage.cpp	(working copy)
@@ -29,13 +29,13 @@
   uint32 current_aura;
 public:
   ADD_CREATURE_FACTORY_FUNCTION(FragmentedMagic);
-  FragmentedMagic(CreaturePointer pCreature) : CreatureAIScript(pCreature) 
+  FragmentedMagic(Creature * pCreature) : CreatureAIScript(pCreature) 
   {
     RegisterAIUpdateEvent(5000);
     current_aura = 0;
   }
 
-  void SetWander(CreaturePointer m_target, PlayerPointer p_caster)
+  void SetWander(Creature * m_target, Player * p_caster)
   {
     m_target->m_special_state |= UNIT_STATE_CONFUSE;
     m_target->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_CONFUSED);
@@ -64,7 +64,7 @@
       return;
 
     bool casterOk = false;
-    PlayerPointer p_caster;
+    Player * p_caster;
 
     for(int i = 0; i<MAX_AURAS+MAX_PASSIVE_AURAS; i++)
     {
@@ -99,7 +99,7 @@
     uint8 num = RandomUInt(5);
     for(int i=0; i<num; i++)
     {
-      CreaturePointer cr = sEAS.SpawnCreature(p_caster, 16479, _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 0, 1*60*1000);
+      Creature * cr = sEAS.SpawnCreature(p_caster, 16479, _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 0, 1*60*1000);
       SetWander(cr, p_caster);
     }
   }
Index: Trunk/src/QuestScripts/Mulgore.cpp
===================================================================
--- Trunk/src/QuestScripts/Mulgore.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Mulgore.cpp	(working copy)
@@ -20,13 +20,13 @@
 #include "Setup.h"
 #include "../Common/EasyFunctions.h"
 
-bool InducingVision(uint32 i, SpellPointer pSpell)
+bool InducingVision(uint32 i, Spell * pSpell)
 {
 		if(!pSpell->p_caster) return true;
-		PlayerPointer mTarget = pSpell->p_caster;
+		Player * mTarget = pSpell->p_caster;
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return true;
-		  CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->SpawnCreature(2983, -2238.994873f, -408.009552f, -9.424423f, 5.753043f, true, false, 0, 0);
+		  Creature * creat = mTarget->GetMapMgr()->GetInterface()->SpawnCreature(2983, -2238.994873f, -408.009552f, -9.424423f, 5.753043f, true, false, 0, 0);
 		  creat->GetAIInterface()->setMoveType(11);
 
 		  sEAS.CreateCustomWaypointMap(creat);
@@ -63,7 +63,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(The_Plains_Vision);
-	The_Plains_Vision(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	The_Plains_Vision(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
Index: Trunk/src/QuestScripts/Nagrand.cpp
===================================================================
--- Trunk/src/QuestScripts/Nagrand.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Nagrand.cpp	(working copy)
@@ -30,9 +30,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(GiseldaTheCroneQAI);
-    GiseldaTheCroneQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+    GiseldaTheCroneQAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if (mKiller->IsPlayer())
 		{
@@ -72,17 +72,17 @@
 class Quest_The_Ring_of_Blood_The_Final_Challenge : public QuestScript
 {
 public:
-		void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+		void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 		{
 			if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 				return;
 
-			CreaturePointer pMogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
+			Creature * pMogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
 
 			if( pMogor != NULL )
 			{
 				pMogor->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Prepare yourselves!");
-				UnitPointer Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
+				Unit * Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
 
 				if( Qgiver != NULL )
 				{
@@ -104,12 +104,12 @@
 			}
 		}
 
-		void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+		void OnQuestComplete(Player * mTarget, QuestLogEntry * qLogEntry)
 		{
 			if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 				return;
 
-			CreaturePointer mogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
+			Creature * mogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
 
 			if( mogor != NULL )
 				mogor->Despawn(1000,0);
@@ -121,12 +121,12 @@
 class Quest_The_Ring_of_Blood_The_Warmaul_Champion : public QuestScript
 {
 public:
-		void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+		void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 		{
 			if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 				return;
 
-			UnitPointer pQgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
+			Unit * pQgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
 
 			if( pQgiver != NULL)
 			{
@@ -141,12 +141,12 @@
 			};
 		};
 
-		void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+		void OnQuestComplete(Player * mTarget, QuestLogEntry * qLogEntry)
 		{
 			if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 				return;
 
-			UnitPointer pMogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
+			Unit * pMogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
 
 			if( pMogor != NULL )
 			{
@@ -155,7 +155,7 @@
 				pMogor->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, msg);
 			};
 
-			CreaturePointer pWarmaulChamp = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18402);
+			Creature * pWarmaulChamp = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18402);
 			
 			if( pWarmaulChamp != NULL )
 				pWarmaulChamp->Despawn(1000,0);
@@ -166,12 +166,12 @@
 class Quest_The_Ring_of_Blood_Skragath : public QuestScript
 {
 public:
-		void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+		void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 		{
 			if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 				return;
 
-			UnitPointer Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
+			Unit * Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
 
 			if( Qgiver != NULL )
 			{
@@ -188,12 +188,12 @@
 			};
 		};
 
-		void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+		void OnQuestComplete(Player * mTarget, QuestLogEntry * qLogEntry)
 		{
 			if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 				return;
 
-			UnitPointer mogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
+			Unit * mogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
 
 			if( mogor != NULL )
 			{
@@ -202,7 +202,7 @@
 				mogor->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, msg);
 				};
 
-			CreaturePointer pSkragath = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18401);
+			Creature * pSkragath = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18401);
 
 			if( pSkragath != NULL )
 				pSkragath->Despawn(1000,0);
@@ -212,12 +212,12 @@
 class Quest_The_Ring_of_Blood_Rokdar_the_Sundered_Lord : public QuestScript
 {
 public:
-	void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
 
-		UnitPointer Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
+		Unit * Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
 
 		if( Qgiver != NULL )
 		{
@@ -233,17 +233,17 @@
 		};
 	};
 
-	void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestComplete(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
 
-		UnitPointer mogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
+		Unit * mogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
 
 		if( mogor != NULL )
 			mogor->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "WUT!? UNPOSSIBLE!!");
 
-		CreaturePointer  pRokdar = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18400);
+		Creature *  pRokdar = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18400);
 		
 		if( pRokdar != NULL )
 			pRokdar->Despawn(1000,0);
@@ -253,17 +253,17 @@
 class Quest_The_Ring_of_Blood_The_Blue_Brothers : public QuestScript
 {
 public:
-	void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
 
-		CreaturePointer pBrokentoe = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18398);
+		Creature * pBrokentoe = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18398);
 
 		if( pBrokentoe != NULL )
 			pBrokentoe->Despawn(1000,0);
 
-		UnitPointer Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
+		Unit * Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
 
 		if( Qgiver != NULL )
 		{
@@ -278,12 +278,12 @@
 		};
 	};
 
-	void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestComplete(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
 		
-		UnitPointer mogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
+		Unit * mogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
 
 		if( mogor != NULL )
 		{
@@ -292,11 +292,11 @@
 			mogor->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, msg);
 		};
 
-		CreaturePointer pBrother1 = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18399);
+		Creature * pBrother1 = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18399);
 		if( pBrother1 != NULL )
 			   pBrother1->Despawn(1000,0);
 
-		CreaturePointer pBrother2 = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18399);
+		Creature * pBrother2 = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18399);
 		if( pBrother2 != NULL )
 			pBrother2->Despawn(1000,0);
 	};
@@ -305,12 +305,12 @@
 class Quest_The_Ring_of_Blood_Brokentoe : public QuestScript
 {
 public:
-	void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
 
-		UnitPointer Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
+		Unit * Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
 
 		if( Qgiver != NULL )
 		{
@@ -321,12 +321,12 @@
 		};
 	};
 
-	void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestComplete(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
 
-		UnitPointer Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
+		Unit * Qgiver = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18471);
 
 		if( Qgiver != NULL )
 		{
@@ -335,7 +335,7 @@
 			Qgiver->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, msg);
 		};
 
-		UnitPointer mogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
+		Unit * mogor = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(mTarget->GetPositionX(), mTarget->GetPositionY(), 0, 18069);
 
 		if( mogor != NULL )
 		{
@@ -350,7 +350,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(mogorQAI);
-	mogorQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	mogorQAI(Creature * pCreature) : CreatureAIScript(pCreature)
 	{
 			_unit->SetUInt64Value(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_9);
 			_unit->GetAIInterface()->SetAllowedToEnterCombat(false);
@@ -366,7 +366,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(NotOnMyWatch);
-	NotOnMyWatch(CreaturePointer pCreature) : CreatureAIScript(pCreature) {};
+	NotOnMyWatch(Creature * pCreature) : CreatureAIScript(pCreature) {};
 
 	void OnCombatStart(Unit* mTarget)
 	{
@@ -379,7 +379,7 @@
 		RemoveAIUpdateEvent();
 	};
 
-	void OnDied(UnitPointer mTarget)
+	void OnDied(Unit * mTarget)
 	{
 		RemoveAIUpdateEvent();
 	};
@@ -394,7 +394,7 @@
 	{
 		if(_unit->GetHealthPct() < 30)
 		{
-			UnitPointer pUnit = _unit->GetAIInterface()->GetMostHated();
+			Unit * pUnit = _unit->GetAIInterface()->GetMostHated();
 			if ( pUnit != NULL && pUnit->IsPlayer() )
 				TO_PLAYER( pUnit )->EventAttackStop();
 
@@ -420,7 +420,7 @@
 class LumpGossipScript : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 1, plr);
@@ -428,9 +428,9 @@
 		Menu->SendTo(plr);
 	};
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
     {
-		CreaturePointer Lump = TO_CREATURE(pObject);
+		Creature * Lump = TO_CREATURE(pObject);
 		if (Lump == NULL)
 			return;
 
@@ -463,16 +463,16 @@
 
 
 // Stopping the Spread
-bool StoppingTheSpread(uint32 i, SpellPointer pSpell)
+bool StoppingTheSpread(uint32 i, Spell * pSpell)
 {
 	if( !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 	if( plr == NULL )
 		return true;
 
-	CreaturePointer target = TO_CREATURE(plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( plr->GetPositionX(), plr->GetPositionY() , plr->GetPositionZ(), 18240 ));
+	Creature * target = TO_CREATURE(plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( plr->GetPositionX(), plr->GetPositionY() , plr->GetPositionZ(), 18240 ));
 	if( target == NULL )
 		return true;
 
@@ -486,7 +486,7 @@
 		qle->SetMobCount( 0, qle->GetMobCount( 0 ) + 1 );
 		qle->SendUpdateAddKill( 0 );
 		
-		GameObjectPointer obj = sEAS.SpawnGameobject(plr, 183816, target->GetPositionX(), target->GetPositionY(), target->GetPositionZ(), target->GetOrientation(), 1, 0, 0, 0, 0);
+		GameObject * obj = sEAS.SpawnGameobject(plr, 183816, target->GetPositionX(), target->GetPositionY(), target->GetPositionZ(), target->GetOrientation(), 1, 0, 0, 0, 0);
 		sEAS.GameobjectDelete(obj, 1*30*1000);
 	};
 
@@ -497,16 +497,16 @@
 }
 
 //Ruthless Cunning
-bool RuthlessCunning(uint32 i, SpellPointer pSpell)
+bool RuthlessCunning(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->u_caster->IsPlayer())
 		return true;
 	
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 	if( plr == NULL )
 		return true;
 
-	CreaturePointer kilsorrow = plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(plr->GetPositionX(), plr->GetPositionY() , plr->GetPositionZ());
+	Creature * kilsorrow = plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(plr->GetPositionX(), plr->GetPositionY() , plr->GetPositionZ());
 	if( kilsorrow == NULL || kilsorrow->isAlive() )
 		return true;
 
Index: Trunk/src/QuestScripts/Netherstorm.cpp
===================================================================
--- Trunk/src/QuestScripts/Netherstorm.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Netherstorm.cpp	(working copy)
@@ -23,7 +23,7 @@
 class Veronia : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		if(plr->GetQuestLogForEntry(10652))
@@ -34,9 +34,9 @@
 		}
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
 	{
-		CreaturePointer creat = TO_CREATURE(pObject);
+		Creature * creat = TO_CREATURE(pObject);
 		switch(IntId)
 		{
 		case 1:
@@ -51,12 +51,12 @@
 	};
 }; 
 
-bool FindingTheKeymaster(uint32 i, SpellPointer pSpell)
+bool FindingTheKeymaster(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->u_caster->IsPlayer())
 		return true;
 
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 
 	QuestLogEntry *qle = plr->GetQuestLogForEntry(10256);
 	if(!qle)
@@ -68,13 +68,13 @@
 	return true;
 }
 
-bool TheFleshLies(uint32 i, SpellPointer pSpell)
+bool TheFleshLies(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->u_caster->IsPlayer())
 	return true;
 
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
-	CreaturePointer target = plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(plr->GetPositionX(), plr->GetPositionY() , plr->GetPositionZ(), 20561);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
+	Creature * target = plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(plr->GetPositionX(), plr->GetPositionY() , plr->GetPositionZ(), 20561);
 
 	if(target == NULL)
 		return true;
@@ -84,7 +84,7 @@
 	if(qle == NULL)
 		return true;
 
-	GameObjectPointer obj = NULLGOB;
+	GameObject * obj = NULLGOB;
 
 	if(qle && qle->GetMobCount(0) < qle->GetQuest()->required_mobcount[0])
 	{
@@ -100,12 +100,12 @@
 	return true;
 }
 
-bool SurveyingtheRuins(uint32 i, SpellPointer pSpell)
+bool SurveyingtheRuins(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 10335 );
 	if ( pQuest == NULL )
@@ -113,7 +113,7 @@
 
 	if ( pQuest->GetMobCount( 0 ) < pQuest->GetQuest()->required_mobcount[0] )
 	{
-		GameObjectPointer mark1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 4695.2f, 2603.39f, 209.878f, 184612 );
+		GameObject * mark1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 4695.2f, 2603.39f, 209.878f, 184612 );
 		if( mark1 == NULL )  	
 			mark1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 4695.28f, 2602.73f, 209.84f, 300095 );
 
@@ -124,7 +124,7 @@
 			pQuest->UpdatePlayerFields();
 			
 			//if you know a GO which can/should be spawned after marking the point... uncomment and add GO ID pls :)
-			//GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, <INSERT GO ID HERE>, 4695.28f, 2602.73f, 209.84f, 0, 4, 0, 0, 0, 0 );
+			//GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, <INSERT GO ID HERE>, 4695.28f, 2602.73f, 209.84f, 0, 4, 0, 0, 0, 0 );
 			//if ( pGameobject != NULL )
 			//{
      	//		sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -136,7 +136,7 @@
 	
 	if ( pQuest->GetMobCount( 1 ) < pQuest->GetQuest()->required_mobcount[1] )
 	{
-		GameObjectPointer mark2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 4608.08f, 2442.02f, 195.71f, 184612 );
+		GameObject * mark2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 4608.08f, 2442.02f, 195.71f, 184612 );
 		if( mark2 == NULL )  	
 			mark2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 4607.71f, 2440.72f, 195.65f, 300095 );
 
@@ -147,7 +147,7 @@
 			pQuest->UpdatePlayerFields();
 			
 			//if you know a GO which can/should be spawned after marking the point... uncomment and add GO ID pls :)
-			//GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, <INSERT GO ID HERE>, 4607.71f, 2440.72f, 195.65f, 0, 4, 0, 0, 0, 0 );
+			//GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, <INSERT GO ID HERE>, 4607.71f, 2440.72f, 195.65f, 0, 4, 0, 0, 0, 0 );
 			//if ( pGameobject != NULL )
 			//{
      	//		sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
@@ -159,7 +159,7 @@
 	
 	if ( pQuest->GetMobCount( 2 ) < pQuest->GetQuest()->required_mobcount[2] )
 	{
-		GameObjectPointer mark3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 4716.37f, 2371.59f, 198.168f, 184612 );
+		GameObject * mark3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 4716.37f, 2371.59f, 198.168f, 184612 );
 		if( mark3 == NULL )  	
 			mark3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 4716.77f, 2371.6f, 198.19f, 300095 );
 
@@ -170,7 +170,7 @@
 			pQuest->UpdatePlayerFields();
 			
 			//if you know a GO which can/should be spawned after marking the point... uncomment and add GO ID pls :)
-			//GameObjectPointer pGameobject = sEAS.SpawnGameobject( pPlayer, <INSERT GO ID HERE>,  4716.77f, 2371.6f, 198.19f, 0, 4 );
+			//GameObject * pGameobject = sEAS.SpawnGameobject( pPlayer, <INSERT GO ID HERE>,  4716.77f, 2371.6f, 198.19f, 0, 4 );
 			//if ( pGameobject != NULL )
 			//{
      	//		sEAS.GameobjectDelete( pGameobject, 1 * 60 * 1000 );
Index: Trunk/src/QuestScripts/Old_Hillsbrad.cpp
===================================================================
--- Trunk/src/QuestScripts/Old_Hillsbrad.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Old_Hillsbrad.cpp	(working copy)
@@ -41,12 +41,12 @@
 class LodgesAblaze : public GameObjectAIScript
 {
 public:
-	LodgesAblaze(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) {
+	LodgesAblaze(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) {
 		return new LodgesAblaze(GO);
 	}
 
-	void OnActivate(PlayerPointer pPlayer)	
+	void OnActivate(Player * pPlayer)	
 	{
 	  QuestLogEntry *qle = pPlayer->GetQuestLogForEntry(10283);
   	  if (++numBarrel == 5)
@@ -57,7 +57,7 @@
 			qle->SendUpdateAddKill(0);
 			qle->UpdatePlayerFields();
 		}
-		GameObjectPointer obj = NULLGOB;
+		GameObject * obj = NULLGOB;
 		for(uint8 i = 0; i < 21; i++)
 		{
 			obj = sEAS.SpawnGameobject(pPlayer, GO_FIRE, Fires[i].x, Fires[i].y, Fires[i].z, Fires[i].o, 1, 0, 0, 0, 0);
Index: Trunk/src/QuestScripts/Paladin.cpp
===================================================================
--- Trunk/src/QuestScripts/Paladin.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Paladin.cpp	(working copy)
@@ -20,13 +20,13 @@
 #include "StdAfx.h"
 #include "Setup.h"
 
-bool SymbolOfLife(uint32 i, SpellPointer pSpell) // Alliance ress. quests
+bool SymbolOfLife(uint32 i, Spell * pSpell) // Alliance ress. quests
 {
   if(!pSpell->u_caster->IsPlayer())
     return true;
 
-  PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
-  CreaturePointer target = plr->GetMapMgr()->GetCreature(GET_LOWGUID_PART(plr->GetSelection()));
+  Player * plr = TO_PLAYER(pSpell->u_caster);
+  Creature * target = plr->GetMapMgr()->GetCreature(GET_LOWGUID_PART(plr->GetSelection()));
   
   if(target == NULL)
     return true;
@@ -77,14 +77,14 @@
   return true;
 }
 
-bool FilledShimmeringVessel(uint32 i, SpellPointer pSpell) // Blood Elf ress. quest
+bool FilledShimmeringVessel(uint32 i, Spell * pSpell) // Blood Elf ress. quest
 {
   if(!pSpell->u_caster->IsPlayer())
     return true;
 
-  PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+  Player * plr = TO_PLAYER(pSpell->u_caster);
   
-  CreaturePointer target = plr->GetMapMgr()->GetCreature(GET_LOWGUID_PART(plr->GetSelection()));
+  Creature * target = plr->GetMapMgr()->GetCreature(GET_LOWGUID_PART(plr->GetSelection()));
   if(target == NULL)
     return true;
 
@@ -111,7 +111,7 @@
 {
 public:
   ADD_CREATURE_FACTORY_FUNCTION(PaladinDeadNPC);
-  PaladinDeadNPC(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+  PaladinDeadNPC(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
   void OnLoad()
   {
@@ -126,10 +126,10 @@
 class GildedBrazier : public GameObjectAIScript
 {
 public:
-	GildedBrazier(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new GildedBrazier(GO); }
+	GildedBrazier(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new GildedBrazier(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)	
+	void OnActivate(Player * pPlayer)	
 	{
 		if(pPlayer->GetQuestLogForEntry(9678))
 		{
@@ -138,7 +138,7 @@
 			float SSZ = pPlayer->GetPositionZ();
 			float SSO = pPlayer->GetOrientation();
 			
-			GameObjectPointer Brazier = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( SSX, SSY, SSZ, 181956);
+			GameObject * Brazier = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( SSX, SSY, SSZ, 181956);
 			if (Brazier)
 			{
 				Brazier->SetState(0);
@@ -156,19 +156,19 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(stillbladeQAI);
-    	stillbladeQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  
+    	stillbladeQAI(Creature * pCreature) : CreatureAIScript(pCreature)  
     	{
     	
 	}
 	
-	void OnDied(UnitPointer mKiller) 
+	void OnDied(Unit * mKiller) 
 	{
 		float SSX = mKiller->GetPositionX();
 		float SSY = mKiller->GetPositionY();
 		float SSZ = mKiller->GetPositionZ();
 		float SSO = mKiller->GetOrientation();
 			
-		GameObjectPointer Brazier = mKiller->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( SSX, SSY, SSZ, 181956);
+		GameObject * Brazier = mKiller->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( SSX, SSY, SSZ, 181956);
 		if (Brazier)
 		{
 			Brazier->SetState(1);
@@ -176,17 +176,17 @@
 	}
 };
 
-bool DouseEternalFlame(uint32 i, SpellPointer pSpell)
+bool DouseEternalFlame(uint32 i, Spell * pSpell)
 {
 	if (pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer())
 		return true;
 
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 	QuestLogEntry *qle = plr->GetQuestLogForEntry(9737);
 	if(qle == NULL)
 		return true;
 
-	GameObjectPointer Flame = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3678, -3640, 139, 182068);
+	GameObject * Flame = plr->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3678, -3640, 139, 182068);
 	if(Flame != NULL)
 	{
 		if(plr->CalcDistance(plr, Flame) < 30)
Index: Trunk/src/QuestScripts/QuestGossip.cpp
===================================================================
--- Trunk/src/QuestScripts/QuestGossip.cpp	(revision 896)
+++ Trunk/src/QuestScripts/QuestGossip.cpp	(working copy)
@@ -23,7 +23,7 @@
 class Lady_Jaina : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		if(plr->GetQuestLogForEntry(558))
@@ -34,9 +34,9 @@
 		}
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
 	{
-		CreaturePointer  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature *  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pObject==NULL)
 			return;
 
@@ -64,7 +64,7 @@
 class Cairne : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		if(plr->GetQuestLogForEntry(925))
@@ -75,10 +75,10 @@
 		}
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
 	{
 		GossipMenu *Menu;
-		CreaturePointer  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
+		Creature *  pCreature = (pObject->GetTypeId()==TYPEID_UNIT)?(TO_CREATURE(pObject)):NULLCREATURE;
 		if(pObject==NULL)
 			return;
 
Index: Trunk/src/QuestScripts/QuestHooks.cpp
===================================================================
--- Trunk/src/QuestScripts/QuestHooks.cpp	(revision 896)
+++ Trunk/src/QuestScripts/QuestHooks.cpp	(working copy)
@@ -31,7 +31,7 @@
 **************************************************************************************/
 
 
-void Hanazua(PlayerPointer pPlayer, ObjectPointer pObject)
+void Hanazua(Player * pPlayer, Object * pObject)
 {
 	string say;
 	say = "Go swiftly, ";
@@ -40,45 +40,45 @@
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, say.c_str());
 }
 
-void AHumbleTask(PlayerPointer pPlayer, ObjectPointer pObject)
+void AHumbleTask(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Greatmother Hawkwind gestures to the pitcher of water sitting on the edge of the well.");
 }
 
-void Yorus_Barleybrew(PlayerPointer pPlayer, ObjectPointer pObject)
+void Yorus_Barleybrew(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->Emote(EMOTE_ONESHOT_POINT);
 	pPlayer->CastSpell(pPlayer, dbcSpell.LookupEntry(8554), true);
 }
 
-void Menara_Voidrender(PlayerPointer pPlayer, ObjectPointer pObject)
+void Menara_Voidrender(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->EventAddEmote(EMOTE_STATE_USESTANDING, 3000);
 }
 
-void Hanazua_III(PlayerPointer pPlayer, ObjectPointer pObject)
+void Hanazua_III(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Killed  Sarkoth !!");
 }
 
-void TheFamilyAndTheFishingPole(PlayerPointer pPlayer, ObjectPointer pObject)
+void TheFamilyAndTheFishingPole(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "I got some extras with me; if you pay me back what i paid for them, you can have one. I got some bait too.");
 }
 
-void MillysHarvest(PlayerPointer pPlayer, ObjectPointer pObject)
+void MillysHarvest(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "I hope for you!");
 	(TO_CREATURE(pObject))->EventAddEmote(EMOTE_ONESHOT_CRY, 2000);
 }
 
-void Rest_n_Relaxation(PlayerPointer pPlayer, ObjectPointer pObject)
+void Rest_n_Relaxation(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Think of small pumpkins, my friend!!");
 	(TO_CREATURE(pObject))->Emote(EMOTE_ONESHOT_CHEER	);
 }
 
-void OntoGoldshireComplete(PlayerPointer pPlayer, ObjectPointer pObject)
+void OntoGoldshireComplete(Player * pPlayer, Object * pObject)
 {
 	char msg[256];
 	snprintf((char*)msg, 256, "You are dismissed %s . ", pPlayer->GetName());
@@ -86,9 +86,9 @@
 	(TO_CREATURE(pObject))->Emote(EMOTE_ONESHOT_BOW);
 }
 
-void ZuluhedtheWhacked(PlayerPointer pPlayer, ObjectPointer pObject)
+void ZuluhedtheWhacked(Player * pPlayer, Object * pObject)
 {
-	CreaturePointer Zuluhed = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-4206.199219f, 313.5462f, 122.907f, 11980);
+	Creature * Zuluhed = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-4206.199219f, 313.5462f, 122.907f, 11980);
 	if (Zuluhed == NULL)
 	{
 		sEAS.SpawnCreature(pPlayer, 11980, -4206.199219f, 313.5462f, 122.907f, 1.2589f);
@@ -96,7 +96,7 @@
 }
 //=================================================================================================
 
-void OnQuestAccept(PlayerPointer pPlayer, Quest * pQuest, ObjectPointer pObject)
+void OnQuestAccept(Player * pPlayer, Quest * pQuest, Object * pObject)
 {
 	if ( pPlayer == NULL || pQuest == NULL || pObject == NULL || !pObject->IsInWorld() || !pPlayer->IsInWorld() || !pObject->IsCreature() )
 		return;
@@ -148,19 +148,19 @@
 **************************************************************************************/
 
 
-void Hanazua_II(PlayerPointer pPlayer, ObjectPointer pObject)
+void Hanazua_II(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->SetStandState(STANDSTATE_KNEEL);
 }
 
-void Wishock(PlayerPointer pPlayer, ObjectPointer pObject)
+void Wishock(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->SetStandState(STANDSTATE_DEAD);
 	pPlayer->Emote(EMOTE_STATE_LAUGH);
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Arrgh...");
 }
 
-void CapturedMountaineer(PlayerPointer pPlayer, ObjectPointer pObject)
+void CapturedMountaineer(Player * pPlayer, Object * pObject)
 {
 	string say = "I raise my brew and hope to be rid of the likes of you!  Cheers, you no good scoundrel, ";
 	say+=pPlayer->GetName();
@@ -168,17 +168,17 @@
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, say.c_str());
 }
 
-void PlaguedLands(PlayerPointer pPlayer, ObjectPointer pObject)
+void PlaguedLands(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Be cleansed!");
 }
 
-void DeeprunRatRoundup(PlayerPointer pPlayer, ObjectPointer pObject)
+void DeeprunRatRoundup(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "Into the box me pretties! Thas it. One by one ye go.");
 }
 
-void MaybellComplete(PlayerPointer pPlayer, ObjectPointer pObject)
+void MaybellComplete(Player * pPlayer, Object * pObject)
 {
 	(TO_CREATURE(pObject))->SendChatMessage(CHAT_MSG_MONSTER_YELL, LANG_UNIVERSAL, "Here goes nothing...");
 	(TO_CREATURE(pObject))->Emote(EMOTE_ONESHOT_CRY);
@@ -187,7 +187,7 @@
 
 //========================================================================================
 
-void OnQuestFinished(PlayerPointer pPlayer, Quest * pQuest, ObjectPointer pObject)
+void OnQuestFinished(Player * pPlayer, Quest * pQuest, Object * pObject)
 {
 	if ( pPlayer == NULL || pQuest == NULL || pObject == NULL || !pObject->IsCreature() )
 		return;
@@ -222,9 +222,9 @@
 **************************************************************************************
 **************************************************************************************/
 
-void ZuluhedtheWhackedCancel(PlayerPointer pPlayer)
+void ZuluhedtheWhackedCancel(Player * pPlayer)
 {
-	CreaturePointer Zuluhed = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-4206.199219f, 313.5462f, 122.907f, 11980);
+	Creature * Zuluhed = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-4206.199219f, 313.5462f, 122.907f, 11980);
 	if (Zuluhed != NULL)
 	{
 		Zuluhed->Despawn(0,0);
@@ -233,7 +233,7 @@
 
 //========================================================================================
 
-void OnQuestCancelled(PlayerPointer pPlayer, Quest * pQuest)
+void OnQuestCancelled(Player * pPlayer, Quest * pQuest)
 {
 	if ( pPlayer == NULL || pQuest == NULL )
 		return;
@@ -254,7 +254,7 @@
 **************************************************************************************/
 
 
-void InnkeeperFlex(PlayerPointer pPlayer, UnitPointer pUnit)
+void InnkeeperFlex(Player * pPlayer, Unit * pUnit)
 {
 	if(pUnit->GetEntry() == 6740)
 	{
@@ -278,7 +278,7 @@
 	}
 }
 
-void InnkeeperDance(PlayerPointer pPlayer, UnitPointer pUnit)
+void InnkeeperDance(Player * pPlayer, Unit * pUnit)
 {
 	if(pUnit->GetEntry() == 6735)
 	{
@@ -302,7 +302,7 @@
 	}
 }
 
-void InnkeeperTrain(PlayerPointer pPlayer, UnitPointer pUnit)
+void InnkeeperTrain(Player * pPlayer, Unit * pUnit)
 {
 	if(pUnit->GetEntry() == 6826)
 	{
@@ -326,7 +326,7 @@
 	}
 }
 
-void InnkeeperChicken(PlayerPointer pPlayer, UnitPointer pUnit)
+void InnkeeperChicken(Player * pPlayer, Unit * pUnit)
 {
 	if(pUnit->GetEntry() == 5111)
 	{
@@ -351,7 +351,7 @@
 }
 //=========================================================================================
 
-void OnEmote(PlayerPointer pPlayer, uint32 Emote, UnitPointer pUnit)
+void OnEmote(Player * pPlayer, uint32 Emote, Unit * pUnit)
 {
 	pUnit = pPlayer->GetMapMgr()->GetUnit(pPlayer->GetSelection());
 	if (!pUnit || !pUnit->isAlive() || pUnit->GetAIInterface()->GetNextTarget())
@@ -386,7 +386,7 @@
 **************************************************************************************/
 
 
-void InvasionPointCataclysm(PlayerPointer pPlayer, uint32 AreaTrigger)
+void InvasionPointCataclysm(Player * pPlayer, uint32 AreaTrigger)
 {
 	QuestLogEntry *en = pPlayer->GetQuestLogForEntry(10766);
 	if(en == NULL)
@@ -394,13 +394,13 @@
 	pPlayer->SafeTeleport(530, 0, -2723.674561f, 1952.664673f, 146.939743f, 3.185559f);
 }
 
-void Scratches(PlayerPointer pPlayer, uint32 AreaTrigger)
+void Scratches(Player * pPlayer, uint32 AreaTrigger)
 {
 	QuestLogEntry *qle = pPlayer->GetQuestLogForEntry(10556);
 	if(qle == NULL)
 		return;
 
-	CreaturePointer  Kaliri = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 21468);
+	Creature *  Kaliri = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 21468);
 	if(Kaliri == NULL)
 		return;
 
@@ -412,7 +412,7 @@
 
 //=========================================================================================
 
-void OnAreaTrigger(PlayerPointer pPlayer, uint32 AreaTrigger)
+void OnAreaTrigger(Player * pPlayer, uint32 AreaTrigger)
 {
 	switch(AreaTrigger)
 	{
Index: Trunk/src/QuestScripts/RedridgeMountains.cpp
===================================================================
--- Trunk/src/QuestScripts/RedridgeMountains.cpp	(revision 896)
+++ Trunk/src/QuestScripts/RedridgeMountains.cpp	(working copy)
@@ -24,7 +24,7 @@
 {
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -33,7 +33,7 @@
 		float SSZ = mTarget->GetPositionZ();
 
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 349);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 349);
 				if(creat == NULL)
 			return;
 		creat->m_escorter = mTarget;
@@ -68,7 +68,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Corporal_Keeshan);
-	Corporal_Keeshan(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Corporal_Keeshan(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
@@ -79,7 +79,7 @@
 			sEAS.DeleteWaypoints(_unit);
 			if(_unit->m_escorter == NULL)
 				return;
-			PlayerPointer plr = _unit->m_escorter;
+			Player * plr = _unit->m_escorter;
 			_unit->m_escorter = NULLPLR;
 			plr->GetQuestLogForEntry(219)->SendQuestComplete();
 		}
Index: Trunk/src/QuestScripts/Shadowmoon.cpp
===================================================================
--- Trunk/src/QuestScripts/Shadowmoon.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Shadowmoon.cpp	(working copy)
@@ -22,12 +22,12 @@
 #include "../Common/EasyFunctions.h"
 #include "../Common/Base.h"
 
-bool CrystalOfDeepShadows(uint32 i, SpellPointer pSpell) // Becoming a Shadoweave Tailor
+bool CrystalOfDeepShadows(uint32 i, Spell * pSpell) // Becoming a Shadoweave Tailor
 {
   if(!pSpell->u_caster->IsPlayer())
     return true;
 
-  PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+  Player * plr = TO_PLAYER(pSpell->u_caster);
   QuestLogEntry *qle = plr->GetQuestLogForEntry(10833);
   
   if(qle == NULL)
@@ -44,9 +44,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(InfiltratingDragonmawFortressQAI);
-    InfiltratingDragonmawFortressQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+    InfiltratingDragonmawFortressQAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if (mKiller->IsPlayer()) 
 		{
@@ -67,9 +67,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(KneepadsQAI);
-    KneepadsQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+    KneepadsQAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if(!mKiller)
 			return;
@@ -99,14 +99,14 @@
 	}
 };
 
-bool ToLegionHold(uint32 i, AuraPointer pAura, bool apply)
+bool ToLegionHold(uint32 i, Aura * pAura, bool apply)
 {
 	if ( pAura == NULL || pAura->GetUnitCaster() == NULL || !pAura->GetUnitCaster()->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pAura->GetUnitCaster() );
+	Player * pPlayer = TO_PLAYER( pAura->GetUnitCaster() );
 
-	CreaturePointer pJovaanCheck = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-3310.743896f, 2951.929199f, 171.132538f, 21633);
+	Creature * pJovaanCheck = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(-3310.743896f, 2951.929199f, 171.132538f, 21633);
 	if ( pJovaanCheck != NULL )
 		return true;
 
@@ -123,7 +123,7 @@
 
 		pPlayer->SetUInt32Value( UNIT_FIELD_DISPLAYID, 20366 );
 		pPlayer->Root();
-		CreaturePointer pJovaan = sEAS.SpawnCreature( pPlayer, 21633, -3310.743896f, 2951.929199f, 171.132538f, 5.054039f, 0 );	// Spawn Jovaan
+		Creature * pJovaan = sEAS.SpawnCreature( pPlayer, 21633, -3310.743896f, 2951.929199f, 171.132538f, 5.054039f, 0 );	// Spawn Jovaan
 		if ( pJovaan != NULL )
 		{
 			pJovaan->SetUInt64Value( UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_ATTACKABLE_2 );
@@ -132,7 +132,7 @@
 				pJovaan->GetAIInterface()->SetAllowedToEnterCombat( false );
 			}
 		}
-		GameObjectPointer pGameObject = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 184834);
+		GameObject * pGameObject = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 184834);
 		if ( pGameObject != NULL )
 		{
 			pGameObject->Despawn(60000);
@@ -177,7 +177,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(DeathbringerJovaanAI, MoonScriptCreatureAI);
-	DeathbringerJovaanAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	DeathbringerJovaanAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		mJovaanTimer = INVALIDATE_TIMER;
 		mJovaanPhase = -1;
@@ -286,7 +286,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(WarbringerRazuunAI, MoonScriptCreatureAI);
-	WarbringerRazuunAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	WarbringerRazuunAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		RegisterAIUpdateEvent(1000);
 		mRazuunTimer = AddTimer(800);
@@ -348,15 +348,15 @@
 };
 
 
-bool Carcass(uint32 i, SpellPointer pSpell) // Becoming a Shadoweave Tailor
+bool Carcass(uint32 i, Spell * pSpell) // Becoming a Shadoweave Tailor
 {
 	if(!pSpell->u_caster->IsPlayer())
 		return true;
 
-	PlayerPointer	pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player *	pPlayer = TO_PLAYER(pSpell->u_caster);
 	QuestLogEntry	*pQuest = pPlayer->GetQuestLogForEntry( 10804 );
-	CreaturePointer	NetherDrake = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 21648);
-	GameObjectPointer FlayerCarcass = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 185155);
+	Creature *	NetherDrake = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 21648);
+	GameObject * FlayerCarcass = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 185155);
 
 	if ( FlayerCarcass == NULLGOB )
 	{
@@ -381,11 +381,11 @@
 	return true;
 }
 
-bool EatenRecently(uint32 i, AuraPointer pAura, bool apply)
+bool EatenRecently(uint32 i, Aura * pAura, bool apply)
 {
 	if ( pAura == NULL || pAura->GetUnitCaster() == NULL || pAura->GetUnitCaster()->IsPlayer() )
 		return true;
-	CreaturePointer NetherDrake = TO_CREATURE( pAura->GetUnitCaster() );
+	Creature * NetherDrake = TO_CREATURE( pAura->GetUnitCaster() );
 	
 	if (NetherDrake == NULL)
 		return true;
@@ -407,7 +407,7 @@
 class NeltharakusTale_Gossip : public GossipScript
 {
 public:
-    void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+    void GossipHello(Object * pObject, Player * plr, bool AutoSend)
     {
 		if (plr->GetQuestLogForEntry(10814))
 		{
@@ -418,7 +418,7 @@
 		}
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if(pObject->GetTypeId()!=TYPEID_UNIT)
 			return;
@@ -473,7 +473,7 @@
 {
 public:
 	MOONSCRIPT_FACTORY_FUNCTION(EnslavedNetherwingDrakeAI, MoonScriptCreatureAI);
-	EnslavedNetherwingDrakeAI(CreaturePointer pCreature) : MoonScriptCreatureAI(pCreature)
+	EnslavedNetherwingDrakeAI(Creature * pCreature) : MoonScriptCreatureAI(pCreature)
 	{
 		Coords WayPoint = { _unit->GetPositionX(), _unit->GetPositionY()+30, _unit->GetPositionZ()+100, _unit->GetOrientation(), Flag_Fly };
 		SetCanMove(false);
@@ -490,13 +490,13 @@
 	}
 };
 
-bool ForceofNeltharakuSpell(uint32 i, SpellPointer pSpell) // Becoming a Shadoweave Tailor
+bool ForceofNeltharakuSpell(uint32 i, Spell * pSpell) // Becoming a Shadoweave Tailor
 {
 	if(pSpell->u_caster->IsPlayer() == false)
 		return true;
 
-	PlayerPointer	pPlayer= TO_PLAYER(pSpell->u_caster);
-	UnitPointer		pUnit	= TO_UNIT(pPlayer->GetMapMgr()->GetCreature(GET_LOWGUID_PART(pPlayer->GetSelection())));
+	Player *	pPlayer= TO_PLAYER(pSpell->u_caster);
+	Unit *		pUnit	= TO_UNIT(pPlayer->GetMapMgr()->GetCreature(GET_LOWGUID_PART(pPlayer->GetSelection())));
 
 	if(pUnit == NULLUNIT)
 		return true;
@@ -504,7 +504,7 @@
 	if(!pUnit->IsCreature())
 		return true;
 
-	CreaturePointer		 pTarget	= TO_CREATURE(pUnit);
+	Creature *		 pTarget	= TO_CREATURE(pUnit);
 	QuestLogEntry	 *pQuest	= pPlayer->GetQuestLogForEntry(10854);
 	if(pQuest == NULL)
 		return true;
@@ -528,12 +528,12 @@
 	return true;
 }
 
-bool UnlockKarynakuChains(uint32 i, SpellPointer pSpell) // Becoming a Shadoweave Tailor
+bool UnlockKarynakuChains(uint32 i, Spell * pSpell) // Becoming a Shadoweave Tailor
 {
 	if(pSpell->u_caster->IsPlayer() == false)
 		return true;
 
-	PlayerPointer	pPlayer= TO_PLAYER(pSpell->u_caster);
+	Player *	pPlayer= TO_PLAYER(pSpell->u_caster);
 	QuestLogEntry	 *pQuest	= pPlayer->GetQuestLogForEntry(10872);
 	if(pQuest == NULL)
 		return true;
@@ -550,10 +550,10 @@
 class KarynakuChains : public GameObjectAIScript
 {
 public:
-	KarynakuChains(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new KarynakuChains(GO); }
+	KarynakuChains(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new KarynakuChains(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry(10872);
 		
Index: Trunk/src/QuestScripts/SholazarBasin.cpp
===================================================================
--- Trunk/src/QuestScripts/SholazarBasin.cpp	(revision 896)
+++ Trunk/src/QuestScripts/SholazarBasin.cpp	(working copy)
@@ -26,12 +26,12 @@
 // Quest 12532 - Flown the Coop!
 // Quest 12702 - Chicken Party! (by bartus
 
-bool ChickenNet( uint32 i, SpellPointer pSpell )
+bool ChickenNet( uint32 i, Spell * pSpell )
 {
 	if( !pSpell->u_caster->IsPlayer() )
         return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 
 	QuestLogEntry *qle = pPlayer->GetQuestLogForEntry( 12532 );
 	if( qle == NULL )
@@ -45,7 +45,7 @@
 	if( !pSpell->GetUnitTarget()->IsCreature() )
 		return true;
 
-	CreaturePointer Chicken = TO_CREATURE( pSpell->GetUnitTarget() );
+	Creature * Chicken = TO_CREATURE( pSpell->GetUnitTarget() );
 
 	if( Chicken != NULL && Chicken->GetEntry() == 28161 )
 	{
Index: Trunk/src/QuestScripts/SilvermoonCity.cpp
===================================================================
--- Trunk/src/QuestScripts/SilvermoonCity.cpp	(revision 896)
+++ Trunk/src/QuestScripts/SilvermoonCity.cpp	(working copy)
@@ -23,10 +23,10 @@
 class ThePathoftheAdept : public GameObjectAIScript
 {
 public:
-	ThePathoftheAdept(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new ThePathoftheAdept(GO); }
+	ThePathoftheAdept(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new ThePathoftheAdept(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(!pPlayer)
 			return;
@@ -35,7 +35,7 @@
 		if(qle == NULL)
 			return;
 
-		CreaturePointer zelemar = sEAS.SpawnCreature(pPlayer, 17830, pPlayer->GetPositionX()+5, pPlayer->GetPositionY()+5, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+		Creature * zelemar = sEAS.SpawnCreature(pPlayer, 17830, pPlayer->GetPositionX()+5, pPlayer->GetPositionY()+5, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
 		zelemar->Despawn(6*60*1000, 0);
 	}
 };
@@ -44,13 +44,13 @@
 class PathoftheAdept : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		if(!plr)
 			return;
 
 		GossipMenu *Menu;
-		CreaturePointer lord = TO_CREATURE(pObject);
+		Creature * lord = TO_CREATURE(pObject);
 		if (lord == NULL)
 			return;
 
@@ -62,12 +62,12 @@
 			Menu->SendTo(plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
 	{
 		if(!plr)
 			return;
 
-		CreaturePointer lord = TO_CREATURE(pObject);
+		Creature * lord = TO_CREATURE(pObject);
 		if (lord == NULL)
 			return;
 
@@ -96,7 +96,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(LordDawnstar);
-	LordDawnstar(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	LordDawnstar(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
Index: Trunk/src/QuestScripts/Silverpine_Forest.cpp
===================================================================
--- Trunk/src/QuestScripts/Silverpine_Forest.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Silverpine_Forest.cpp	(working copy)
@@ -26,9 +26,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ProveYourWorthQAI);
-	ProveYourWorthQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+	ProveYourWorthQAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if (mKiller->IsPlayer())
 		{
@@ -49,7 +49,7 @@
 {
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -57,7 +57,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 3465);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 3465);
 		if(creat == NULL)
 			return;
 		creat->m_escorter = mTarget;
@@ -84,7 +84,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Deathstalker_Erland);
-	Deathstalker_Erland(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Deathstalker_Erland(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
@@ -95,7 +95,7 @@
 			sEAS.DeleteWaypoints(_unit);
 			if(_unit->m_escorter == NULL)
 				return;
-			PlayerPointer plr = _unit->m_escorter;
+			Player * plr = _unit->m_escorter;
 			_unit->m_escorter = NULLPLR;
 			plr->GetQuestLogForEntry(435)->SendQuestComplete();
 		}
Index: Trunk/src/QuestScripts/Stormwind.cpp
===================================================================
--- Trunk/src/QuestScripts/Stormwind.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Stormwind.cpp	(working copy)
@@ -25,7 +25,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(DashelStonefist);
-	DashelStonefist(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	DashelStonefist(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -33,7 +33,7 @@
 		_unit->SetStandState(STANDSTATE_STAND);
 	}
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if(_unit->GetUInt32Value(UNIT_FIELD_HEALTH)- fAmount<=_unit->GetUInt32Value(UNIT_FIELD_MAXHEALTH)*0.2)
 		{
@@ -69,7 +69,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -77,7 +77,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer Dashel = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 4961);
+		Creature * Dashel = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 4961);
 
 		if(Dashel == NULL)
 			return;
@@ -94,8 +94,8 @@
 			say+="!";
 			Dashel->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, say.c_str());
 		}
-		CreaturePointer Thug1 = sEAS.SpawnCreature(mTarget, 4969, -8686.803711, 445.267792, 99.789223, 5.461184, 300000);
-		CreaturePointer Thug2 = sEAS.SpawnCreature(mTarget, 4969, -8675.571289, 444.162262, 99.644737, 3.834103, 300000);
+		Creature * Thug1 = sEAS.SpawnCreature(mTarget, 4969, -8686.803711, 445.267792, 99.789223, 5.461184, 300000);
+		Creature * Thug2 = sEAS.SpawnCreature(mTarget, 4969, -8675.571289, 444.162262, 99.644737, 3.834103, 300000);
 	}
 };
 
Index: Trunk/src/QuestScripts/StranglethornVale.cpp
===================================================================
--- Trunk/src/QuestScripts/StranglethornVale.cpp	(revision 896)
+++ Trunk/src/QuestScripts/StranglethornVale.cpp	(working copy)
@@ -27,13 +27,13 @@
 class StrFever : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		if(!plr)
 			return;
 
 		GossipMenu *Menu;
-		CreaturePointer doctor = TO_CREATURE(pObject);
+		Creature * doctor = TO_CREATURE(pObject);
 		if (doctor == NULL)
 			return;
 
@@ -45,12 +45,12 @@
 			Menu->SendTo(plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
 	{
 		if(!plr)
 			return;
 
-		CreaturePointer doctor = TO_CREATURE(pObject);
+		Creature * doctor = TO_CREATURE(pObject);
 		if (doctor == NULL)
 			return;
 
@@ -66,7 +66,7 @@
 				doctor->CastSpell(doctor, dbcSpell.LookupEntry(12380), true);
 				if( !plr || !plr->GetMapMgr() || !plr->GetMapMgr()->GetInterface() )
 					return;
-				CreaturePointer firstenemy = sEAS.SpawnCreature(plr, 1511, -13770.5, -6.79, 42.8, 5.7 , 0);
+				Creature * firstenemy = sEAS.SpawnCreature(plr, 1511, -13770.5, -6.79, 42.8, 5.7 , 0);
 				firstenemy->GetAIInterface()->MoveTo(-13727.8, -26.2, 46.15, 4.07);
 				firstenemy->Despawn(10*60*1000, 0);
 			}break;
@@ -83,27 +83,27 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Beka);
-	Beka(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+	Beka(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if(mKiller->IsPlayer())
 		{
-			PlayerPointer mPlayer = TO_PLAYER(mKiller);
+			Player * mPlayer = TO_PLAYER(mKiller);
 			if(mPlayer == NULL || mPlayer->GetMapMgr() == NULL || mPlayer->GetMapMgr()->GetInterface() == NULL)
 				return;
-			CreaturePointer  beka1 = sEAS.SpawnCreature(mPlayer, 1516, -13770.5, -6.79, 42.8, 5.7 , 0);
+			Creature *  beka1 = sEAS.SpawnCreature(mPlayer, 1516, -13770.5, -6.79, 42.8, 5.7 , 0);
 			beka1->GetAIInterface()->MoveTo(-13727.8, -26.2, 46.15, 4.07);
 			beka1->Despawn(10*60*1000, 0);
 		}
 		else
 		{
-			PlayerPointer mPlayer = _unit->GetMapMgr()->GetInterface()->GetPlayerNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ());
+			Player * mPlayer = _unit->GetMapMgr()->GetInterface()->GetPlayerNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ());
 			if(mPlayer)
 			{
 				if(mPlayer == NULL || mPlayer->GetMapMgr() == NULL || mPlayer->GetMapMgr()->GetInterface() == NULL)
 					return;
-				CreaturePointer  beka1 = sEAS.SpawnCreature(mPlayer, 1516, -13770.5, -6.79, 42.8, 5.7 , 0);
+				Creature *  beka1 = sEAS.SpawnCreature(mPlayer, 1516, -13770.5, -6.79, 42.8, 5.7 , 0);
 				beka1->GetAIInterface()->MoveTo(-13727.8, -26.2, 46.15, 4.07);
 				beka1->Despawn(10*60*1000, 0);
 			}
@@ -115,27 +115,27 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Beka1);
-	Beka1(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+	Beka1(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if(mKiller->IsPlayer())
 		{
-			PlayerPointer mPlayer = TO_PLAYER(mKiller);
+			Player * mPlayer = TO_PLAYER(mKiller);
 			if(mPlayer == NULL || mPlayer->GetMapMgr() == NULL || mPlayer->GetMapMgr()->GetInterface() == NULL)
 				return;
-			CreaturePointer beka1 = sEAS.SpawnCreature(mPlayer, 1514, -13770.5, -6.79, 42.8, 5.7, 0);
+			Creature * beka1 = sEAS.SpawnCreature(mPlayer, 1514, -13770.5, -6.79, 42.8, 5.7, 0);
 			beka1->GetAIInterface()->MoveTo(-13727.8, -26.2, 46.15, 4.07);
 			beka1->Despawn(10*60*1000, 0);
 		}
 		else
 		{
-			PlayerPointer mPlayer = _unit->GetMapMgr()->GetInterface()->GetPlayerNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ());
+			Player * mPlayer = _unit->GetMapMgr()->GetInterface()->GetPlayerNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ());
 			if(mPlayer)
 			{
 				if(mPlayer == NULL || mPlayer->GetMapMgr() == NULL || mPlayer->GetMapMgr()->GetInterface() == NULL)
 					return;
-				CreaturePointer beka1 = sEAS.SpawnCreature(mPlayer, 1514, -13770.5, -6.79, 42.8, 5.7, 0);
+				Creature * beka1 = sEAS.SpawnCreature(mPlayer, 1514, -13770.5, -6.79, 42.8, 5.7, 0);
 				beka1->GetAIInterface()->MoveTo(-13727.8, -26.2, 46.15, 4.07);
 				beka1->Despawn(10*60*1000, 0);
 			}
@@ -147,9 +147,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Beka2);
-	Beka2(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+	Beka2(Creature * pCreature) : CreatureAIScript(pCreature)  {}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if( mKiller == NULL || mKiller->GetMapMgr() == NULL || mKiller->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -158,7 +158,7 @@
 		float SSY = mKiller->GetPositionY();
 		float SSZ = mKiller->GetPositionZ();
 
-		CreaturePointer doctor = mKiller->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 1449);
+		Creature * doctor = mKiller->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 1449);
 		if(doctor)
 			doctor->Emote(EMOTE_ONESHOT_CHEER);
 	}
@@ -168,7 +168,7 @@
 { 
 public:
 
-	void OnQuestComplete( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestComplete( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -176,11 +176,11 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		GameObjectPointer skull1 = mTarget->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(SSX, SSY, SSZ, 2551);
+		GameObject * skull1 = mTarget->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(SSX, SSY, SSZ, 2551);
 		if(skull1)
 			return;
 
-		CreaturePointer Kin_weelay = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 2519);
+		Creature * Kin_weelay = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 2519);
 		if(Kin_weelay == NULL)
 			return;
 
@@ -190,7 +190,7 @@
 		Kin_weelay->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, msg1.c_str());
 		Kin_weelay->CastSpell(Kin_weelay, dbcSpell.LookupEntry(3644), false);
 		skull1->Despawn(5000);
-		GameObjectPointer skull2 = mTarget->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(SSX, SSY, SSZ, 2551);
+		GameObject * skull2 = mTarget->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(SSX, SSY, SSZ, 2551);
 		if(skull2)
 			skull2->Despawn(5000);
 
@@ -208,7 +208,7 @@
 { 
 public:
 
-	void OnQuestComplete( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestComplete( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -216,7 +216,7 @@
 		float Y = mTarget->GetPositionY();
 		float Z = mTarget->GetPositionZ();
 
-		CreaturePointer Crank = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(X, Y, Z, 2498);
+		Creature * Crank = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(X, Y, Z, 2498);
 		if(Crank)
 		{
 			string say = "Hm... if you're looking to adle wits. ";
@@ -231,7 +231,7 @@
 { 
 public:
 
-	void OnQuestComplete( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestComplete( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -239,7 +239,7 @@
 		float Y = mTarget->GetPositionY();
 		float Z = mTarget->GetPositionZ();
 
-		CreaturePointer MacKinley = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(X, Y, Z, 2501);
+		Creature * MacKinley = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(X, Y, Z, 2501);
 		if(MacKinley)
 		{
 			string say = "Bah! ";
@@ -291,12 +291,12 @@
 
 class FacingNegolash : public QuestScript
 {
-	void OnQuestComplete(PlayerPointer pPlayer, QuestLogEntry *qLogEntry)
+	void OnQuestComplete(Player * pPlayer, QuestLogEntry *qLogEntry)
 	{
 		if (!pPlayer)
 			return;
 		
-		GameObjectPointer obj = NULLGOB;
+		GameObject * obj = NULLGOB;
 
 		for(uint8 i = 0; i < 9; i++)
 		{
@@ -314,7 +314,7 @@
 			sEAS.GameobjectDelete(obj, 2*60*1000);
 		}	
      	
-		CreaturePointer Negolash = sEAS.SpawnCreature(pPlayer, 1494, -14657.400391, 155.115997, 4.081050, 0.353429);
+		Creature * Negolash = sEAS.SpawnCreature(pPlayer, 1494, -14657.400391, 155.115997, 4.081050, 0.353429);
 		Negolash->GetAIInterface()->MoveTo(-14647.526367, 143.710052, 1.164550, 1.909);
 	}
 };
@@ -324,10 +324,10 @@
 public:
     ADD_CREATURE_FACTORY_FUNCTION(NegolashAI);
 	
-	NegolashAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)
+	NegolashAI(Creature * pCreature) : CreatureAIScript(pCreature)
     {
 	}
-    void OnDied(UnitPointer mKiller)
+    void OnDied(Unit * mKiller)
     {
       _unit->Despawn(180000, 0);
        RemoveAIUpdateEvent();
Index: Trunk/src/QuestScripts/Tanaris.cpp
===================================================================
--- Trunk/src/QuestScripts/Tanaris.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Tanaris.cpp	(working copy)
@@ -27,13 +27,13 @@
 class SpiritScreeches : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		if(!plr)
 			return;
 
 		GossipMenu *Menu;
-		CreaturePointer spirit = TO_CREATURE(pObject);
+		Creature * spirit = TO_CREATURE(pObject);
 		if (spirit == NULL)
 			return;
 
@@ -50,12 +50,12 @@
 
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
 	{
 		if(!plr)
 			return;
 
-		CreaturePointer spirit = TO_CREATURE(pObject);
+		Creature * spirit = TO_CREATURE(pObject);
 		if (spirit == NULL)
 			return;
 
@@ -95,7 +95,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ScreecherSpirit);
 
-	ScreecherSpirit(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	ScreecherSpirit(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -103,7 +103,7 @@
 			return
 
 		_unit->Despawn(60*1000, 0);
-		CreaturePointer cialo = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 5307);
+		Creature * cialo = _unit->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 5307);
 		if(!cialo)
 			return;
 
@@ -115,7 +115,7 @@
 class StewardOfTime : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		if(plr->GetQuestLogForEntry(10279) || plr->HasFinishedQuest(10279))
@@ -126,9 +126,9 @@
 		}
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
 	{
-		CreaturePointer creat = TO_CREATURE(pObject);
+		Creature * creat = TO_CREATURE(pObject);
 		switch(IntId)
 		{
 		case 1:
Index: Trunk/src/QuestScripts/Teldrassil.cpp
===================================================================
--- Trunk/src/QuestScripts/Teldrassil.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Teldrassil.cpp	(working copy)
@@ -5,12 +5,12 @@
 { 
 public:
 
-  void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry *qLogEntry)
+  void OnQuestComplete(Player * mTarget, QuestLogEntry *qLogEntry)
   {
     if(!mTarget)
 		return;
 
-    CreaturePointer creat = mTarget->GetMapMgr()->GetSqlIdCreature(43727);
+    Creature * creat = mTarget->GetMapMgr()->GetSqlIdCreature(43727);
     if(creat == NULL)
       return;
 
Index: Trunk/src/QuestScripts/Terrokar_Forest.cpp
===================================================================
--- Trunk/src/QuestScripts/Terrokar_Forest.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Terrokar_Forest.cpp	(working copy)
@@ -29,9 +29,9 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(ThreatFromAboveQAI);
-		ThreatFromAboveQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)	{}
+		ThreatFromAboveQAI(Creature * pCreature) : CreatureAIScript(pCreature)	{}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if (mKiller->IsPlayer()) 
 		{
@@ -54,14 +54,14 @@
 public:
 
   ADD_CREATURE_FACTORY_FUNCTION(TheInfestedProtectorsQAI);
-  TheInfestedProtectorsQAI(CreaturePointer pCreature) : CreatureAIScript(pCreature)  {}
+  TheInfestedProtectorsQAI(Creature * pCreature) : CreatureAIScript(pCreature)  {}
       
-  void OnDied(UnitPointer mKiller)
+  void OnDied(Unit * mKiller)
   {
   	if(!mKiller->IsPlayer())
 	  return;
 	  
-  	PlayerPointer plr = TO_PLAYER(mKiller);
+  	Player * plr = TO_PLAYER(mKiller);
 	
 	if(!plr->GetQuestLogForEntry(10896))
 	  return;
@@ -80,7 +80,7 @@
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(TakenInTheNight);
 
-	TakenInTheNight(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	TakenInTheNight(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -88,12 +88,12 @@
 		_unit->GetAIInterface()->disable_combat = true;
 	}
 	
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
 	{
 		if(!mKiller->IsPlayer())
 		return;
 
-		PlayerPointer plr = TO_PLAYER(mKiller);
+		Player * plr = TO_PLAYER(mKiller);
 		uint8 chance = (uint8)RandomUInt(5);
 		uint32 spawn = 0;
 		
@@ -121,7 +121,7 @@
 			break;
 		}
 
-		CreaturePointer creat = sEAS.SpawnCreature(plr, spawn, _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 1*60*1000);
+		Creature * creat = sEAS.SpawnCreature(plr, spawn, _unit->GetPositionX(), _unit->GetPositionY(), _unit->GetPositionZ(), 1*60*1000);
 
 		if(spawn != 22459)
 			return;
@@ -148,7 +148,7 @@
 public:
   ADD_CREATURE_FACTORY_FUNCTION(AnImproperBurial);
 
-  AnImproperBurial(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+  AnImproperBurial(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
   void OnLoad()
   {
@@ -158,13 +158,13 @@
   }
 };
 
-bool ShatariTorch(uint32 i, SpellPointer pSpell)
+bool ShatariTorch(uint32 i, Spell * pSpell)
 {
   if(pSpell->u_caster->IsPlayer() == false)
     return true;
 
-  PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
-  UnitPointer unit_target = TO_UNIT(plr->GetMapMgr()->GetCreature(GET_LOWGUID_PART(plr->GetSelection())));
+  Player * plr = TO_PLAYER(pSpell->u_caster);
+  Unit * unit_target = TO_UNIT(plr->GetMapMgr()->GetCreature(GET_LOWGUID_PART(plr->GetSelection())));
   
   if(unit_target == NULL)
     return true;
@@ -175,13 +175,13 @@
   if(!unit_target->IsCreature())
     return true;
 
-  CreaturePointer target = TO_CREATURE(unit_target);
+  Creature * target = TO_CREATURE(unit_target);
 
   QuestLogEntry *qle = plr->GetQuestLogForEntry(10913);
   if(qle == NULL)
     return true;
   
-  GameObjectPointer obj = NULLGOB;
+  GameObject * obj = NULLGOB;
 
   if(target->GetEntry() == 21859)
   {
@@ -218,13 +218,13 @@
 class TheMomentofTruth : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		if(!plr)
 			return;
 
 		GossipMenu *Menu;
-		CreaturePointer doctor = TO_CREATURE(pObject);
+		Creature * doctor = TO_CREATURE(pObject);
 		if (doctor == NULL)
 			return;
 
@@ -236,12 +236,12 @@
 			Menu->SendTo(plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
 	{
 		if(!plr)
 			return;
 
-		CreaturePointer doctor = TO_CREATURE(pObject);
+		Creature * doctor = TO_CREATURE(pObject);
 		if (doctor == NULLCREATURE)
 			return;
 
Index: Trunk/src/QuestScripts/The_Barrens.cpp
===================================================================
--- Trunk/src/QuestScripts/The_Barrens.cpp	(revision 896)
+++ Trunk/src/QuestScripts/The_Barrens.cpp	(working copy)
@@ -27,7 +27,7 @@
 class BeatenCorpse : public GossipScript
 {
 public:
-  void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+  void GossipHello(Object * pObject, Player * plr, bool AutoSend)
   {
     GossipMenu *Menu;
     objmgr.CreateGossipMenuForPlayer(&Menu, pObject->GetGUID(), 3557, plr);
@@ -39,7 +39,7 @@
       Menu->SendTo(plr);
   }
 
-  void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+  void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
   {      
     GossipMenu *Menu;
 
@@ -73,7 +73,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -82,7 +82,7 @@
 		float SSZ = mTarget->GetPositionZ();
 
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 3439);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 3439);
 		if(creat == NULL)
 			return;
 		creat->m_escorter = mTarget;   
@@ -299,7 +299,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Wizzlecranks_Shredder);
-	Wizzlecranks_Shredder(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Wizzlecranks_Shredder(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
@@ -310,7 +310,7 @@
 			sEAS.DeleteWaypoints(_unit);
 			if(_unit->m_escorter == NULL)
 				return;
-			PlayerPointer plr = _unit->m_escorter;
+			Player * plr = _unit->m_escorter;
 			_unit->m_escorter = NULLPLR;
 			plr->GetQuestLogForEntry(863)->SendQuestComplete();
 		}
@@ -321,7 +321,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 				if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -330,7 +330,7 @@
 		float SSZ = mTarget->GetPositionZ();
 
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 3465);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 3465);
 		if(creat == NULL)
 			return;		
 		creat->m_escorter = mTarget;   
@@ -449,7 +449,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Gilthares_Firebough);
-	Gilthares_Firebough(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Gilthares_Firebough(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
@@ -460,7 +460,7 @@
 			sEAS.DeleteWaypoints(_unit);
 			if(_unit->m_escorter == NULL)
 				return;
-			PlayerPointer plr = _unit->m_escorter;
+			Player * plr = _unit->m_escorter;
 			_unit->m_escorter = NULLPLR;
 			plr->GetQuestLogForEntry(898)->SendQuestComplete();
 		}
@@ -475,13 +475,13 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(VerogtheDervish);
-	VerogtheDervish(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
-	void OnDied(UnitPointer mKiller)
+	VerogtheDervish(Creature * pCreature) : CreatureAIScript(pCreature) {}
+	void OnDied(Unit * mKiller)
 	{
 		kolkarskilled++;
 		if(mKiller->IsPlayer())
 		{
- 			PlayerPointer mPlayer = TO_PLAYER(mKiller);
+ 			Player * mPlayer = TO_PLAYER(mKiller);
 
 			if(kolkarskilled > 8 && mPlayer->GetQuestLogForEntry(851))
 			{
@@ -494,9 +494,9 @@
 
 };
 
-bool Echeyakee(uint32 i, SpellPointer pSpell)
+bool Echeyakee(uint32 i, Spell * pSpell)
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
     return true;
   if(!pSpell->u_caster->IsPlayer())
@@ -504,10 +504,10 @@
   QuestLogEntry *en = pPlayer->GetQuestLogForEntry( 881 );
   if(en == NULL)
     return true;
-  CreaturePointer Echeyakee = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( 459.78, -3034.95, 91.68,3475 );
+  Creature * Echeyakee = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( 459.78, -3034.95, 91.68,3475 );
     if (Echeyakee==NULL)
     {
-    CreaturePointer EcheyakeeSpawn = sEAS.SpawnCreature( pPlayer, 3475, 459.78, -3034.95, 91.68, 3.87,120000 );
+    Creature * EcheyakeeSpawn = sEAS.SpawnCreature( pPlayer, 3475, 459.78, -3034.95, 91.68, 3.87,120000 );
     EcheyakeeSpawn->GetAIInterface()->MoveTo(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation());
     }
     return true;
Index: Trunk/src/QuestScripts/ThousandNeedles.cpp
===================================================================
--- Trunk/src/QuestScripts/ThousandNeedles.cpp	(revision 896)
+++ Trunk/src/QuestScripts/ThousandNeedles.cpp	(working copy)
@@ -24,7 +24,7 @@
 {
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -32,7 +32,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 10427);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 10427);
 		if(creat == NULL)
 			return;
 		creat->m_escorter = mTarget;
@@ -123,7 +123,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Paoka_Swiftmountain);
-	Paoka_Swiftmountain(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Paoka_Swiftmountain(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
@@ -134,7 +134,7 @@
 			sEAS.DeleteWaypoints(_unit);
 			if(_unit->m_escorter == NULLPLR)
 				return;
-			PlayerPointer plr = _unit->m_escorter;
+			Player * plr = _unit->m_escorter;
 			_unit->m_escorter = NULLPLR;
 			if( plr->GetQuestLogForEntry(4770) )
 				plr->GetQuestLogForEntry(4770)->SendQuestComplete();
@@ -146,7 +146,7 @@
 {
 public:
 
-	void OnQuestComplete( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestComplete( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -154,7 +154,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 4452);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 4452);
 		if(creat == NULL)
 			return;
 
Index: Trunk/src/QuestScripts/TirisfalGlades.cpp
===================================================================
--- Trunk/src/QuestScripts/TirisfalGlades.cpp	(revision 896)
+++ Trunk/src/QuestScripts/TirisfalGlades.cpp	(working copy)
@@ -23,11 +23,11 @@
 class TheDormantShade : public QuestScript
 {
 public:
-	void OnQuestComplete( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestComplete( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->SpawnCreature(1946, 2467.314f, 14.8471f, 23.5950f, 0, true, false, 0, 0);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->SpawnCreature(1946, 2467.314f, 14.8471f, 23.5950f, 0, true, false, 0, 0);
 		creat->Despawn(60000,0);
 		creat->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "You have disturbed my rest. Now face my wrath!");
 	}
@@ -37,7 +37,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(CalvinMontague);
-	CalvinMontague(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	CalvinMontague(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -45,7 +45,7 @@
 		_unit->SetStandState(STANDSTATE_STAND);
 	}
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if(_unit->GetHealthPct() < 10)
 		{
@@ -82,7 +82,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -90,7 +90,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer Dashel = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 6784);
+		Creature * Dashel = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 6784);
 
 		if(Dashel == NULL)
 			return;
@@ -105,7 +105,7 @@
 { 
 public:
 
-	void OnQuestComplete( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestComplete( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -113,7 +113,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer Zealot = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 1931);
+		Creature * Zealot = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 1931);
 
 		if(Zealot == NULL)
 			return;
@@ -140,7 +140,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Zealot);
-	Zealot(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Zealot(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
Index: Trunk/src/QuestScripts/Undercity.cpp
===================================================================
--- Trunk/src/QuestScripts/Undercity.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Undercity.cpp	(working copy)
@@ -6,9 +6,9 @@
 { 
 public:
 
-  void OnQuestComplete(PlayerPointer mTarget, QuestLogEntry *qLogEntry)
+  void OnQuestComplete(Player * mTarget, QuestLogEntry *qLogEntry)
   {
-    CreaturePointer creat = mTarget->GetMapMgr()->GetSqlIdCreature(19175); //Lady Sylvanas Windrunner - NCDB guid
+    Creature * creat = mTarget->GetMapMgr()->GetSqlIdCreature(19175); //Lady Sylvanas Windrunner - NCDB guid
 	if(creat == NULL) // we still check for equality with == NULL. if we are assigning, we use = NULLCREATURE/OBJECT/ETC
       return;
 
Index: Trunk/src/QuestScripts/UnGoro.cpp
===================================================================
--- Trunk/src/QuestScripts/UnGoro.cpp	(revision 896)
+++ Trunk/src/QuestScripts/UnGoro.cpp	(working copy)
@@ -26,14 +26,14 @@
 /*--------------------------------------------------------------------------------------------------------*/
 // Lost!
 
-bool SpragglesCanteen(uint32 i, SpellPointer pSpell)
+bool SpragglesCanteen(uint32 i, Spell * pSpell)
 {
   if(!pSpell->u_caster->IsPlayer())
     return true;
 
-  PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+  Player * plr = TO_PLAYER(pSpell->u_caster);
   
-  CreaturePointer target = plr->GetMapMgr()->GetCreature(GET_LOWGUID_PART(plr->GetSelection()));
+  Creature * target = plr->GetMapMgr()->GetCreature(GET_LOWGUID_PART(plr->GetSelection()));
   if(target == NULL)
     return true;
 
@@ -60,7 +60,7 @@
 {
 public:
   ADD_CREATURE_FACTORY_FUNCTION(RingoDeadNPC);
-  RingoDeadNPC(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+  RingoDeadNPC(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
   void OnLoad()
   {
@@ -78,10 +78,10 @@
 class NorthernPylon : public GameObjectAIScript
 {
 public:
-	NorthernPylon(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new NorthernPylon(GO); }
+	NorthernPylon(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new NorthernPylon(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->HasFinishedQuest(4284))
 		{
@@ -110,10 +110,10 @@
 class EasternPylon : public GameObjectAIScript
 {
 public:
-	EasternPylon(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new EasternPylon(GO); }
+	EasternPylon(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new EasternPylon(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->HasFinishedQuest(4284))
 		{
@@ -142,10 +142,10 @@
 class WesternPylon : public GameObjectAIScript
 {
 public:
-	WesternPylon(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer GO) { return new WesternPylon(GO); }
+	WesternPylon(GameObject * goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject * GO) { return new WesternPylon(GO); }
 
-	void OnActivate(PlayerPointer pPlayer)
+	void OnActivate(Player * pPlayer)
 	{
 		if(pPlayer->HasFinishedQuest(4284))
 		{
@@ -169,9 +169,9 @@
 /*--------------------------------------------------------------------------------------------------------*/
 //Finding the Source
 
-bool FindingTheSource(uint32 i, SpellPointer pSpell)
+bool FindingTheSource(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER (pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER (pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -182,11 +182,11 @@
 	if(qle == NULL)
 		return true;
 
-	GameObjectPointer place1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-7163, -1149, -264, 148503);
-	GameObjectPointer place2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-7281, -1244, -248, 148503);
-	GameObjectPointer place3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-7140, -1465, -242, 148503);
-	GameObjectPointer place4 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-7328, -1461, -242, 148503);
-	GameObjectPointer place5 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-7092, -1305, -187, 148503);
+	GameObject * place1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-7163, -1149, -264, 148503);
+	GameObject * place2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-7281, -1244, -248, 148503);
+	GameObject * place3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-7140, -1465, -242, 148503);
+	GameObject * place4 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-7328, -1461, -242, 148503);
+	GameObject * place5 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-7092, -1305, -187, 148503);
 
 	if(place1 != NULL)
 	{
@@ -227,7 +227,7 @@
 {
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -235,7 +235,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 9623);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 9623);
 		if(creat == NULL)
 			return;
 		creat->m_escorter = mTarget;
@@ -283,7 +283,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(A_Me01);
-	A_Me01(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	A_Me01(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
@@ -294,7 +294,7 @@
 			sEAS.DeleteWaypoints(_unit);
 			if(_unit->m_escorter == NULL)
 				return;
-			PlayerPointer plr = _unit->m_escorter;
+			Player * plr = _unit->m_escorter;
 			_unit->m_escorter = NULLPLR;
 			plr->GetQuestLogForEntry(4245)->SendQuestComplete();
 		}
Index: Trunk/src/QuestScripts/Unsorted.cpp
===================================================================
--- Trunk/src/QuestScripts/Unsorted.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Unsorted.cpp	(working copy)
@@ -24,7 +24,7 @@
 class Quest_Grimoire_Business : public QuestScript
 {
 public:
-	void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -36,7 +36,7 @@
 class Quest_Maggocs_Treasure_Chest : public QuestScript
 {
 public:
-	void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -48,7 +48,7 @@
 class Quest_Grulloc_Has_Two_Skulls : public QuestScript
 {
 public:
-	void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -60,7 +60,7 @@
 class Quest_Zuluhed_the_Whacked : public QuestScript
 {
 public:
-	void OnQuestStart(PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart(Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -76,7 +76,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Chicken);
-	Chicken(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Chicken(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -96,7 +96,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Kaliri);
-	Kaliri(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Kaliri(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
Index: Trunk/src/QuestScripts/Warrior.cpp
===================================================================
--- Trunk/src/QuestScripts/Warrior.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Warrior.cpp	(working copy)
@@ -28,13 +28,13 @@
 class TheSummoning : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		if(!plr)
 			return;
 
 		GossipMenu *Menu;
-		CreaturePointer windwatcher = TO_CREATURE(pObject);
+		Creature * windwatcher = TO_CREATURE(pObject);
 		if (windwatcher == NULL)
 			return;
 
@@ -46,12 +46,12 @@
 			Menu->SendTo(plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * EnteredCode)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * EnteredCode)
 	{
 		if(!plr)
 			return;
 
-		CreaturePointer windwatcher = TO_CREATURE(pObject);
+		Creature * windwatcher = TO_CREATURE(pObject);
 		if (windwatcher == NULL)
 			return;
 
@@ -65,7 +65,7 @@
 			{
 			if(plr == NULL || plr->GetMapMgr() == NULL || plr->GetMapMgr()->GetInterface() == NULL)
 				return;
-				CreaturePointer whirlwind = plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(), 6239);
+				Creature * whirlwind = plr->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(), 6239);
 				if(whirlwind != NULL)
 				{
 					if(!whirlwind->isAlive())
@@ -92,7 +92,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(Bartleby);
-	Bartleby(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	Bartleby(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnLoad()
 	{
@@ -100,7 +100,7 @@
 		_unit->setEmoteState(7);
 	}
 
-	void OnDamageTaken(UnitPointer mAttacker, float fAmount)
+	void OnDamageTaken(Unit * mAttacker, float fAmount)
 	{
 		if(_unit->GetUInt32Value(UNIT_FIELD_HEALTH)- fAmount<=_unit->GetUInt32Value(UNIT_FIELD_MAXHEALTH)*0.37)
 		{
@@ -129,7 +129,7 @@
 		_unit->SetUInt32Value(UNIT_FIELD_FLAGS, 0);
 	}
 
-	void OnDied(UnitPointer mKiller)
+	void OnDied(Unit * mKiller)
     {
       RemoveAIUpdateEvent();
     }
@@ -140,7 +140,7 @@
 { 
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -148,7 +148,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer Bartleby = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 6090);
+		Creature * Bartleby = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 6090);
 
 		if(Bartleby == NULL)
 			return;
Index: Trunk/src/QuestScripts/Westfall.cpp
===================================================================
--- Trunk/src/QuestScripts/Westfall.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Westfall.cpp	(working copy)
@@ -24,7 +24,7 @@
 {
 public:
 
-	void OnQuestStart( PlayerPointer mTarget, QuestLogEntry * qLogEntry)
+	void OnQuestStart( Player * mTarget, QuestLogEntry * qLogEntry)
 	{
 		if( mTarget == NULL || mTarget->GetMapMgr() == NULL || mTarget->GetMapMgr()->GetInterface() == NULL )
 			return;
@@ -32,7 +32,7 @@
 		float SSY = mTarget->GetPositionY();
 		float SSZ = mTarget->GetPositionZ();
 
-		CreaturePointer creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 467);
+		Creature * creat = mTarget->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(SSX, SSY, SSZ, 467);
 
 				if(creat == NULL)
 			return;
@@ -71,7 +71,7 @@
 {
 public:
 	ADD_CREATURE_FACTORY_FUNCTION(The_Defias_Traitor);
-	The_Defias_Traitor(CreaturePointer pCreature) : CreatureAIScript(pCreature) {}
+	The_Defias_Traitor(Creature * pCreature) : CreatureAIScript(pCreature) {}
 
 	void OnReachWP(uint32 iWaypointId, bool bForwards)
 	{
@@ -82,7 +82,7 @@
 			sEAS.DeleteWaypoints(_unit);
 			if(_unit->m_escorter == NULL)
 				return;
-			PlayerPointer plr = _unit->m_escorter;
+			Player * plr = _unit->m_escorter;
 			_unit->m_escorter = NULLPLR;
 			plr->GetQuestLogForEntry(155)->SendQuestComplete();
 		}
Index: Trunk/src/QuestScripts/Zangarmarsh.cpp
===================================================================
--- Trunk/src/QuestScripts/Zangarmarsh.cpp	(revision 896)
+++ Trunk/src/QuestScripts/Zangarmarsh.cpp	(working copy)
@@ -27,7 +27,7 @@
 class AncientMarks : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		uint32 entry = pObject->GetEntry();
@@ -54,12 +54,12 @@
 			Menu->SendTo(plr);
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
 	{
 		if(IntId == 1)
 		{
 			QuestLogEntry *en = plr->GetQuestLogForEntry(9785);
-			CreaturePointer casta = (TO_CREATURE(pObject));
+			Creature * casta = (TO_CREATURE(pObject));
 			switch (pObject->GetEntry())
 			{
 			case 17900:
@@ -90,7 +90,7 @@
 						en->UpdatePlayerFields();
 					}
 
-					CreaturePointer casta = (TO_CREATURE(pObject));
+					Creature * casta = (TO_CREATURE(pObject));
 					if(plr->GetStandingRank(942) == 4)
 						casta->CastSpell(plr, 31807, true);
 					else if(plr->GetStandingRank(942) == 5)
@@ -114,7 +114,7 @@
 class ElderKuruti : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer plr, bool AutoSend)
+	void GossipHello(Object * pObject, Player * plr, bool AutoSend)
 	{
 		GossipMenu *Menu;
 		if(!plr->GetItemInterface()->GetItemCount(24573, true))
@@ -125,7 +125,7 @@
 		}
 	}
 
-	void GossipSelectOption(ObjectPointer pObject, PlayerPointer plr, uint32 Id, uint32 IntId, const char * Code)
+	void GossipSelectOption(Object * pObject, Player * plr, uint32 Id, uint32 IntId, const char * Code)
 	{
 		GossipMenu *Menu;
 		switch(IntId)
Index: Trunk/src/ServerStatusPlugin/ServerStatusPlugin.cpp
===================================================================
--- Trunk/src/ServerStatusPlugin/ServerStatusPlugin.cpp	(revision 896)
+++ Trunk/src/ServerStatusPlugin/ServerStatusPlugin.cpp	(working copy)
@@ -310,7 +310,7 @@
 	uint32 classes[DRUID+1];
 	memset(&races[0], 0, sizeof(uint32)*(RACE_DRAENEI+1));
 	memset(&classes[0], 0, sizeof(uint32)*(RACE_DRAENEI+1));
-    std::deque<PlayerPointer> gms;
+    std::deque<Player *> gms;
     {
         // Dump server information.
 #ifdef WIN32
@@ -331,7 +331,7 @@
         // lock players reader
         objmgr._playerslock.AcquireReadLock();
 
-        HM_NAMESPACE::hash_map<uint32, PlayerPointer>::const_iterator itr;
+        HM_NAMESPACE::hash_map<uint32, Player *>::const_iterator itr;
         for (itr = objmgr._players.begin(); itr != objmgr._players.end(); itr++)
         {
             if(itr->second->GetSession() && itr->second->IsInWorld())
@@ -416,7 +416,7 @@
 	}
 	fprintf(f, "  </statsummary>\n");
 
-    PlayerPointer plr;
+    Player * plr;
     uint32 t = (uint32)time(NULL);
     char otime[100];
     {
@@ -464,7 +464,7 @@
     fprintf(f, "  <sessions>\n");
         // Dump Player Information
         objmgr._playerslock.AcquireReadLock();
-        HM_NAMESPACE::hash_map<uint32, PlayerPointer>::const_iterator itr;
+        HM_NAMESPACE::hash_map<uint32, Player *>::const_iterator itr;
 
         for (itr = objmgr._players.begin(); itr != objmgr._players.end(); itr++)
         {
Index: Trunk/src/SpellHandlers/DruidSpells.cpp
===================================================================
--- Trunk/src/SpellHandlers/DruidSpells.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/DruidSpells.cpp	(working copy)
@@ -25,7 +25,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Prowl);
-	Prowl(SpellPointer pSpell) : SpellScript(pSpell) {}
+	Prowl(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
 		if (_spell->u_caster == NULL || _spell->u_caster->CombatStatus.IsInCombat())
@@ -42,7 +42,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(LifeBloom);
-	LifeBloom(SpellPointer pSpell) : SpellScript(pSpell) {}
+	LifeBloom(Spell * pSpell) : SpellScript(pSpell) {}
 
 	void OnDispel(Aura* pDispelledAura, Spell* pDispellingSpell)
 	{
@@ -51,8 +51,8 @@
 
 	void OnExpire(Aura* pExpiredAura)
 	{
-		UnitPointer  u_caster = pExpiredAura->GetUnitCaster();
-		UnitPointer  u_target = pExpiredAura->GetTarget();
+		Unit *  u_caster = pExpiredAura->GetUnitCaster();
+		Unit *  u_target = pExpiredAura->GetTarget();
 
 		if (u_caster == NULL || u_target == NULL)
 			return;
@@ -69,8 +69,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Rake);
-	Rake(SpellPointer pSpell) : SpellScript(pSpell) {}
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	Rake(Spell * pSpell) : SpellScript(pSpell) {}
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		//Rake the target for ${$AP/100+$m1} bleed damage and an additional ${$m2*3+$AP*0.06} damage over $d.
 		if( _spell->u_caster != NULL ) 
@@ -88,8 +88,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Rip);
-	Rip(SpellPointer pSpell) : SpellScript(pSpell) {}
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	Rip(Spell * pSpell) : SpellScript(pSpell) {}
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		if( _spell->u_caster != NULL ) 
 			*value += (uint32)(_spell->u_caster->GetAP()*0.04f);
@@ -100,8 +100,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Swipe);
-	Swipe(SpellPointer pSpell) : SpellScript(pSpell) {}
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	Swipe(Spell * pSpell) : SpellScript(pSpell) {}
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		if( _spell->u_caster != NULL )
 			*value += float2int32(_spell->u_caster->GetAP()*0.06f);
Index: Trunk/src/SpellHandlers/HunterSpells.cpp
===================================================================
--- Trunk/src/SpellHandlers/HunterSpells.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/HunterSpells.cpp	(working copy)
@@ -18,9 +18,9 @@
 #include "StdAfx.h"
 #include "Setup.h"
 
-bool Refocus(uint32 i, SpellPointer pSpell)
+bool Refocus(uint32 i, Spell * pSpell)
 {
-    PlayerPointer playerTarget = pSpell->GetPlayerTarget();
+    Player * playerTarget = pSpell->GetPlayerTarget();
     if(playerTarget == 0) return true;
 
     SpellSet::const_iterator itr = playerTarget->mSpells.begin();
@@ -38,7 +38,7 @@
     return true;
 }
 
-bool Readiness(uint32 i, SpellPointer pSpell)
+bool Readiness(uint32 i, Spell * pSpell)
 {
     if(!pSpell->p_caster)
 		return true;
@@ -54,7 +54,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(RevivePet);
-	RevivePet(SpellPointer pSpell) : SpellScript(pSpell) {}
+	RevivePet(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
 		if (_spell->p_caster == NULL || _spell->p_caster->GetSummon() == NULL)
@@ -71,8 +71,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(SteadyShot);
-	SteadyShot(SpellPointer pSpell) : SpellScript(pSpell) {}
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	SteadyShot(Spell * pSpell) : SpellScript(pSpell) {}
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		if(EffectIndex == 0 && _spell->u_caster != NULL)
 		{
@@ -100,8 +100,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(MongooseBite);
-	MongooseBite(SpellPointer pSpell) : SpellScript(pSpell) {}
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	MongooseBite(Spell * pSpell) : SpellScript(pSpell) {}
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		if( _spell->u_caster != NULL )
 			*value += _spell->u_caster->GetAP()/5;
Index: Trunk/src/SpellHandlers/ItemSpells_1.cpp
===================================================================
--- Trunk/src/SpellHandlers/ItemSpells_1.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/ItemSpells_1.cpp	(working copy)
@@ -33,7 +33,7 @@
 
 // *****************************************************************************
 
-bool GnomishTransporter(uint32 i, SpellPointer pSpell)
+bool GnomishTransporter(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
@@ -44,7 +44,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool NoggenFoggerElixr(uint32 i, SpellPointer pSpell)
+bool NoggenFoggerElixr(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
@@ -67,7 +67,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool HallowsEndCandy(uint32 i, SpellPointer pSpell)
+bool HallowsEndCandy(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
@@ -82,7 +82,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool DeviateFish(uint32 i, SpellPointer pSpell)
+bool DeviateFish(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
@@ -97,7 +97,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool CookedDeviateFish(uint32 i, SpellPointer pSpell)
+bool CookedDeviateFish(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
@@ -128,11 +128,11 @@
 
 // -----------------------------------------------------------------------------
 
-bool HolidayCheer(uint32 i, SpellPointer pSpell)
+bool HolidayCheer(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->m_caster) return true;
 
-	UnitPointer target;
+	Unit * target;
 	float dist = pSpell->GetRadius(i);
 
 	for(ObjectSet::iterator itr = pSpell->m_caster->GetInRangeSetBegin(); itr != pSpell->m_caster->GetInRangeSetEnd(); ++itr)
@@ -152,9 +152,9 @@
 
 // -----------------------------------------------------------------------------
 
-bool NetOMatic(uint32 i, SpellPointer pSpell)
+bool NetOMatic(uint32 i, Spell * pSpell)
 {
-	UnitPointer target = pSpell->GetUnitTarget();
+	Unit * target = pSpell->GetUnitTarget();
 	if(!pSpell->p_caster || !target) return true;
 
 	SpellEntry *spInfo = dbcSpell.LookupEntry(13099);
@@ -178,9 +178,9 @@
 
 // -----------------------------------------------------------------------------
 
-bool BanishExile(uint32 i, SpellPointer pSpell)
+bool BanishExile(uint32 i, Spell * pSpell)
 {
-	UnitPointer  target = pSpell->GetUnitTarget();
+	Unit *  target = pSpell->GetUnitTarget();
 	if(!pSpell->p_caster || !target) return true;
 
 	pSpell->p_caster->SpellNonMeleeDamageLog(target, pSpell->m_spellInfo->Id, target->GetUInt32Value(UNIT_FIELD_HEALTH), true);
@@ -189,14 +189,14 @@
 
 // -----------------------------------------------------------------------------
 
-bool ForemansBlackjack(uint32 i, SpellPointer pSpell)
+bool ForemansBlackjack(uint32 i, Spell * pSpell)
 {
-	UnitPointer  target = pSpell->GetUnitTarget();
+	Unit *  target = pSpell->GetUnitTarget();
 	if(!pSpell->p_caster || !target || target->GetTypeId() != TYPEID_UNIT) 
 		return true;
 	
 	// check to see that we have the correct creature
-	CreaturePointer c_target = TO_CREATURE(target);
+	Creature * c_target = TO_CREATURE(target);
 	if(!c_target || c_target->GetEntry() != 10556 || !c_target->HasAura(18795)) 
 		return true;
 
@@ -224,7 +224,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool NetherWraithBeacon(uint32 i, SpellPointer pSpell)
+bool NetherWraithBeacon(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
@@ -239,13 +239,13 @@
 
 // -----------------------------------------------------------------------------
 
-bool SymbolOfLife(uint32 i, SpellPointer pSpell)
+bool SymbolOfLife(uint32 i, Spell * pSpell)
 {
 	/*  // commented out until the SpellTargetDummy (38) targeting is fixed
-	UnitPointer  target = pSpell->GetUnitTarget();
+	Unit *  target = pSpell->GetUnitTarget();
 	if(!pSpell->p_caster || !target || target->GetTypeId() != TYPEID_UNIT) return true;
 
-	CreaturePointerc_target = (Creature*)target;
+	Creature *c_target = (Creature*)target;
 	if(!c_target) return true;
 
 	uint32 creatureID = c_target->GetEntry();
@@ -259,7 +259,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool NighInvulnBelt(uint32 i, SpellPointer pSpell)
+bool NighInvulnBelt(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
@@ -275,7 +275,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool ReindeerTransformation(uint32 i, SpellPointer pSpell)
+bool ReindeerTransformation(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
@@ -291,7 +291,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool SummonCritterDummy(uint32 i, SpellPointer pSpell)
+bool SummonCritterDummy(uint32 i, Spell * pSpell)
 {
 	// the reason these spells have to be scripted is because they require a
 	// reagent to summon the critter pet, but don't require one to dismiss it
@@ -350,9 +350,9 @@
 
 // -----------------------------------------------------------------------------
 
-bool WinterWondervolt(uint32 i, SpellPointer pSpell)
+bool WinterWondervolt(uint32 i, Spell * pSpell)
 {
-	UnitPointer  target = pSpell->GetUnitTarget();
+	Unit *  target = pSpell->GetUnitTarget();
 
 	if(!target || target->GetTypeId() != TYPEID_PLAYER) return true;
 
@@ -363,9 +363,9 @@
 
 // -----------------------------------------------------------------------------
 
-bool WinterWondervoltAura(uint32 i, AuraPointer pAura, bool apply)
+bool WinterWondervoltAura(uint32 i, Aura * pAura, bool apply)
 {
-	UnitPointer u_caster = pAura->GetUnitCaster();
+	Unit * u_caster = pAura->GetUnitCaster();
 
 	if(!u_caster || !u_caster->IsPlayer()) return true;
 
@@ -388,7 +388,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool ScryingCrystal(uint32 i, SpellPointer pSpell)
+bool ScryingCrystal(uint32 i, Spell * pSpell)
 {
 	QuestLogEntry *en = pSpell->p_caster->GetQuestLogForEntry(9824);
 	if(pSpell->p_caster->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(pSpell->p_caster->GetPositionX(), 
@@ -417,9 +417,9 @@
 	return true;
 }
 
-bool MinionsOfGurok(uint32 i, SpellPointer pSpell)
+bool MinionsOfGurok(uint32 i, Spell * pSpell)
 {
-	UnitPointer  target = pSpell->GetUnitTarget();
+	Unit *  target = pSpell->GetUnitTarget();
 	if(!pSpell->p_caster || !target || target->GetTypeId() != TYPEID_UNIT || target->GetEntry() != 17157) return true;
 
 	TO_CREATURE(target)->Despawn(500, 360000);
@@ -436,7 +436,7 @@
 	return true;
 }
 
-bool PurifyBoarMeat(uint32 i, SpellPointer pSpell)
+bool PurifyBoarMeat(uint32 i, Spell * pSpell)
 {
 	uint32 bormeat = RandomUInt(2);
 	switch(bormeat)
@@ -454,7 +454,7 @@
 	return true;
 }
 
-bool WarpRiftGenerator(uint32 i, SpellPointer pSpell)
+bool WarpRiftGenerator(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
Index: Trunk/src/SpellHandlers/MageSpells.cpp
===================================================================
--- Trunk/src/SpellHandlers/MageSpells.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/MageSpells.cpp	(working copy)
@@ -18,7 +18,7 @@
 #include "StdAfx.h"
 #include "Setup.h"
 
-bool ColdSnap(uint32 i, SpellPointer pSpell)
+bool ColdSnap(uint32 i, Spell * pSpell)
 {
     if(!pSpell->p_caster) return true;
     pSpell->p_caster->ClearCooldownsOnLine(6, pSpell->m_spellInfo->Id);
@@ -31,7 +31,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(IceBlock);
-	IceBlock(SpellPointer pSpell) : SpellScript(pSpell) {}
+	IceBlock(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
 		if (_spell->u_caster == NULL || _spell->u_caster->HasAura(41425))
Index: Trunk/src/SpellHandlers/OldSpellCPPStuff.cpp
===================================================================
--- Trunk/src/SpellHandlers/OldSpellCPPStuff.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/OldSpellCPPStuff.cpp	(working copy)
@@ -26,11 +26,11 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(SummonScreecherSpirit);
-	SummonScreecherSpirit(SpellPointer pSpell) : SpellScript(pSpell) {}
+	SummonScreecherSpirit(Spell * pSpell) : SpellScript(pSpell) {}
 
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  target=_spell->GetUnitTarget();
+		Unit *  target=_spell->GetUnitTarget();
 
 		if(target == NULL || target->GetEntry() != 5307 || target->isAlive())
 			return SPELL_FAILED_BAD_TARGETS;
@@ -43,10 +43,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(TagMurloc);
-	TagMurloc(SpellPointer pSpell) : SpellScript(pSpell) {}
+	TagMurloc(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  target=_spell->GetUnitTarget();
+		Unit *  target=_spell->GetUnitTarget();
 
 		if(target == NULL || target->GetEntry() != 17326)
 			return SPELL_FAILED_BAD_TARGETS;
@@ -59,10 +59,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(AdministerAntidote);
-	AdministerAntidote(SpellPointer pSpell) : SpellScript(pSpell) {}
+	AdministerAntidote(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  target=_spell->GetUnitTarget();
+		Unit *  target=_spell->GetUnitTarget();
 
 		if(target == NULL || target->GetEntry() != 16880)
 			return SPELL_FAILED_BAD_TARGETS;
@@ -75,10 +75,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(YennikusRelease);
-	YennikusRelease(SpellPointer pSpell) : SpellScript(pSpell) {}
+	YennikusRelease(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  target=_spell->GetUnitTarget();
+		Unit *  target=_spell->GetUnitTarget();
 
 		if(target == NULL || target->GetEntry() != 2530)
 			return SPELL_FAILED_BAD_TARGETS;
@@ -91,10 +91,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(RinasDiminutionPowder);
-	RinasDiminutionPowder(SpellPointer pSpell) : SpellScript(pSpell) {}
+	RinasDiminutionPowder(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  target=_spell->GetUnitTarget();
+		Unit *  target=_spell->GetUnitTarget();
 
 		if(target == NULL || target->GetEntry() != 20058)
 			return SPELL_FAILED_BAD_TARGETS;
@@ -107,10 +107,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(LiquidFire);
-	LiquidFire(SpellPointer pSpell) : SpellScript(pSpell) {}
+	LiquidFire(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		CreaturePointer corpse = _spell->m_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_spell->m_caster->GetPositionX(), _spell->m_caster->GetPositionY(), _spell->m_caster->GetPositionZ(), 18240);
+		Creature * corpse = _spell->m_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_spell->m_caster->GetPositionX(), _spell->m_caster->GetPositionY(), _spell->m_caster->GetPositionZ(), 18240);
 		if(corpse != NULL)
 			if (_spell->m_caster->CalcDistance(corpse) > 5)
 				return SPELL_FAILED_NOT_HERE;
@@ -123,10 +123,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Fumping);
-	Fumping(SpellPointer pSpell) : SpellScript(pSpell) {}
+	Fumping(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		CreaturePointer cleft = _spell->m_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_spell->m_caster->GetPositionX(), _spell->m_caster->GetPositionY(), _spell->m_caster->GetPositionZ(), 22105);
+		Creature * cleft = _spell->m_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_spell->m_caster->GetPositionX(), _spell->m_caster->GetPositionY(), _spell->m_caster->GetPositionZ(), 22105);
 		if(cleft == NULL || cleft->isAlive())
 			return SPELL_FAILED_NOT_HERE;
 
@@ -138,10 +138,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(PlaceDraeneiBanner);
-	PlaceDraeneiBanner(SpellPointer pSpell) : SpellScript(pSpell) {}
+	PlaceDraeneiBanner(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		CreaturePointer corpse = _spell->m_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_spell->m_caster->GetPositionX(), _spell->m_caster->GetPositionY(), _spell->m_caster->GetPositionZ(), 17701);
+		Creature * corpse = _spell->m_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_spell->m_caster->GetPositionX(), _spell->m_caster->GetPositionY(), _spell->m_caster->GetPositionZ(), 17701);
 		if(corpse != NULL)
 			if (_spell->m_caster->CalcDistance(corpse) > 5  || corpse->isAlive())
 				return SPELL_FAILED_NOT_HERE;
@@ -154,10 +154,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(DemonBroiledSurprise);
-	DemonBroiledSurprise(SpellPointer pSpell) : SpellScript(pSpell) {}
+	DemonBroiledSurprise(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		CreaturePointer abysal = _spell->m_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_spell->m_caster->GetPositionX(), _spell->p_caster->GetPositionY(), _spell->m_caster->GetPositionZ(), 19973);
+		Creature * abysal = _spell->m_caster->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(_spell->m_caster->GetPositionX(), _spell->p_caster->GetPositionY(), _spell->m_caster->GetPositionZ(), 19973);
 		if(_spell->p_caster == NULL || abysal == NULL || abysal->isAlive())
 			return SPELL_FAILED_NOT_HERE;
 
@@ -172,7 +172,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(ReindeerTransformation);
-	ReindeerTransformation(SpellPointer pSpell) : SpellScript(pSpell) {}
+	ReindeerTransformation(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
 		if (_spell->p_caster == NULL || !_spell->p_caster->IsMounted())
@@ -186,10 +186,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(SmiteDemon);
-	SmiteDemon(SpellPointer pSpell) : SpellScript(pSpell) {}
+	SmiteDemon(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  u_target=_spell->GetUnitTarget();
+		Unit *  u_target=_spell->GetUnitTarget();
 
 		if (u_target == NULL || u_target->IsPlayer() || u_target->getClass() != TARGET_TYPE_DEMON)
 			return SPELL_FAILED_SPELL_UNAVAILABLE;
@@ -202,7 +202,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(AbsorbEyeofGrillok);
-	AbsorbEyeofGrillok(SpellPointer pSpell) : SpellScript(pSpell) {}
+	AbsorbEyeofGrillok(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
 		//this is currently disabled
@@ -214,10 +214,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(TheSeersPresence);
-	TheSeersPresence(SpellPointer pSpell) : SpellScript(pSpell) {}
+	TheSeersPresence(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  u_target=_spell->GetUnitTarget();
+		Unit *  u_target=_spell->GetUnitTarget();
 
 		if (u_target == NULL || !u_target->IsCreature() || u_target->GetEntry() != 20132)
 			return SPELL_FAILED_BAD_TARGETS;
@@ -230,10 +230,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(BlackwhelpNet);
-	BlackwhelpNet(SpellPointer pSpell) : SpellScript(pSpell) {}
+	BlackwhelpNet(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  u_target=_spell->GetUnitTarget();
+		Unit *  u_target=_spell->GetUnitTarget();
 
 		if (u_target == NULL || !u_target->IsCreature() || u_target->GetEntry() != 21387)
 			return SPELL_FAILED_BAD_TARGETS;
@@ -246,10 +246,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(ConvertingSentry);
-	ConvertingSentry(SpellPointer pSpell) : SpellScript(pSpell) {}
+	ConvertingSentry(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  u_target=_spell->GetUnitTarget();
+		Unit *  u_target=_spell->GetUnitTarget();
 
 		if (u_target == NULL || !u_target->IsCreature() || u_target->GetEntry() != 24972)
 			return SPELL_FAILED_BAD_TARGETS;
@@ -265,10 +265,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(CarindasRetribution);
-	CarindasRetribution(SpellPointer pSpell) : SpellScript(pSpell) {}
+	CarindasRetribution(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  u_target=_spell->GetUnitTarget();
+		Unit *  u_target=_spell->GetUnitTarget();
 
 		if (u_target == NULL || !u_target->IsCreature() || u_target->GetEntry() != 24972)
 			return SPELL_FAILED_BAD_TARGETS;
Index: Trunk/src/SpellHandlers/PaladinSpells.cpp
===================================================================
--- Trunk/src/SpellHandlers/PaladinSpells.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/PaladinSpells.cpp	(working copy)
@@ -33,12 +33,12 @@
 
 // *****************************************************************************
 
-bool SealOfRighteousness(uint32 i, AuraPointer pAura, bool apply)
+bool SealOfRighteousness(uint32 i, Aura * pAura, bool apply)
 {
 	if(i != 0) return false;
 
 	uint32 applyId = 20187;
-	UnitPointer u_caster = pAura->GetUnitCaster();
+	Unit * u_caster = pAura->GetUnitCaster();
 
 	if(u_caster == 0 || !u_caster->IsPlayer()) return false;
 
@@ -47,7 +47,7 @@
 	if(apply == true)
 	{
 		float MWS = 1.0f;
-		ItemPointer mainHand = TO_PLAYER(u_caster)->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_MAINHAND);
+		Item * mainHand = TO_PLAYER(u_caster)->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_MAINHAND);
 		if(mainHand && mainHand->GetProto())
 			MWS = mainHand->GetProto()->Delay / 1000.0f;
 
@@ -67,9 +67,9 @@
 
 // -----------------------------------------------------------------------------
 
-bool HolyShock(uint32 i, SpellPointer pSpell)
+bool HolyShock(uint32 i, Spell * pSpell)
 {
-	UnitPointer target = pSpell->GetUnitTarget();
+	Unit * target = pSpell->GetUnitTarget();
 	if(!pSpell->p_caster || !target) return true;
 
 	uint32 newspell = 0;
Index: Trunk/src/SpellHandlers/PriestSpells.cpp
===================================================================
--- Trunk/src/SpellHandlers/PriestSpells.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/PriestSpells.cpp	(working copy)
@@ -24,10 +24,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(MindControl);
-	MindControl(SpellPointer pSpell) : SpellScript(pSpell) {}
+	MindControl(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  u_target=_spell->GetUnitTarget();
+		Unit *  u_target=_spell->GetUnitTarget();
 		if (!_spell->u_caster == NULL || u_target == NULL || u_target->getLevel() > _spell->m_spellInfo->EffectBasePoints[0]+1 + int32(_spell->u_caster->getLevel() - _spell->m_spellInfo->spellLevel))
 			return SPELL_FAILED_HIGHLEVEL;
 
@@ -42,11 +42,11 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(PowerWordShield);
-	UnitPointer  u_target;
-	PowerWordShield(SpellPointer pSpell) : SpellScript(pSpell) { u_target = NULL; }
+	Unit *  u_target;
+	PowerWordShield(Spell * pSpell) : SpellScript(pSpell) { u_target = NULL; }
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  u_target=_spell->GetUnitTarget();
+		Unit *  u_target=_spell->GetUnitTarget();
 		if (u_target == NULL || u_target->HasAura(6788))
 			return SPELL_FAILED_DAMAGE_IMMUNE;
 
@@ -64,7 +64,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(PrayerOfMending);
-	PrayerOfMending(SpellPointer pSpell) : SpellScript(pSpell) {}
+	PrayerOfMending(Spell * pSpell) : SpellScript(pSpell) {}
 };
 
 #endif
Index: Trunk/src/SpellHandlers/QIspells.cpp
===================================================================
--- Trunk/src/SpellHandlers/QIspells.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/QIspells.cpp	(working copy)
@@ -8,29 +8,29 @@
 #include "Setup.h"
 #include "../Common/EasyFunctions.h"
 
-bool NixxsPledgeOfSecrecy(uint32 i, SpellPointer pSpell)
+bool NixxsPledgeOfSecrecy(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
     
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
     sEAS.AddItem( 11270, pPlayer );
 
 	return true;
 }
 
-bool CleansingVial(uint32 i, SpellPointer pSpell)
+bool CleansingVial(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
     
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 9427 );
 	if ( pQuest == NULL )
 		return true;
 
-	CreaturePointer pAggonar = sEAS.SpawnCreature( pPlayer, 17000, 428.15f, 3461.73f, 63.40f, 0, 0 );
+	Creature * pAggonar = sEAS.SpawnCreature( pPlayer, 17000, 428.15f, 3461.73f, 63.40f, 0, 0 );
 	if ( pAggonar != NULL )
 	{
 		pAggonar->Despawn( 6 * 60 * 1000, 0 );
@@ -39,13 +39,13 @@
 	return true;
 }
 
-bool DouseEternalFlame(uint32 i, SpellPointer pSpell)
+bool DouseEternalFlame(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
     
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
-	CreaturePointer pCreature = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 10917 );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
+	Creature * pCreature = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords( pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 10917 );
     if ( pCreature != NULL )
 	{
 		pCreature->SetUInt32Value( UNIT_FIELD_FACTIONTEMPLATE, 11 );
@@ -54,13 +54,13 @@
 	return true;
 }
 
-bool SummonCyclonian(uint32 i, SpellPointer pSpell)
+bool SummonCyclonian(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL )
 		return true;
     
-	UnitPointer pUnit = pSpell->u_caster;
-	CreaturePointer pCreature = pUnit->GetMapMgr()->GetInterface()->SpawnCreature( 6239, pUnit->GetPositionX(), pUnit->GetPositionY(), pUnit->GetPositionZ(), pUnit->GetOrientation(), true, false, 0, 0 );
+	Unit * pUnit = pSpell->u_caster;
+	Creature * pCreature = pUnit->GetMapMgr()->GetInterface()->SpawnCreature( 6239, pUnit->GetPositionX(), pUnit->GetPositionY(), pUnit->GetPositionZ(), pUnit->GetOrientation(), true, false, 0, 0 );
 	if ( pCreature != NULL )
 	{
 		pCreature->Despawn( 600000, 0 );
@@ -69,17 +69,17 @@
 	return true;
 }
 
-bool AwakenPeon(uint32 i, SpellPointer pSpell)
+bool AwakenPeon(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->p_caster == NULL )
 		return true;
 
-	PlayerPointer pPlayer = pSpell->p_caster;
-	UnitPointer pUnit = pSpell->GetUnitTarget();
+	Player * pPlayer = pSpell->p_caster;
+	Unit * pUnit = pSpell->GetUnitTarget();
 	if ( pUnit == NULL || !pUnit->IsCreature() )
 		return true;
 
-	CreaturePointer pTarget = TO_CREATURE( pUnit );
+	Creature * pTarget = TO_CREATURE( pUnit );
 	if ( !pTarget->HasAura( 17743 ) )
 		return true;
 
@@ -101,17 +101,17 @@
 	return true;
 }
 
-bool ElementalPowerExtractor(uint32 i, SpellPointer pSpell)
+bool ElementalPowerExtractor(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
     
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
-	UnitPointer pUnit = pSpell->GetUnitTarget();
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
+	Unit * pUnit = pSpell->GetUnitTarget();
 	if ( pUnit == NULL || !pUnit->IsCreature() )
 		return true;
 
-    CreaturePointer pTarget = TO_CREATURE( pUnit );
+    Creature * pTarget = TO_CREATURE( pUnit );
 	if ( ( pTarget->GetEntry() == 18881 || pTarget->GetEntry() == 18865 ) && pTarget->isAlive() )
 	{
 		sEAS.AddItem( 28548, pPlayer );
@@ -120,12 +120,12 @@
 	return true;
 }
 
-bool SummonEkkorash(uint32 i, SpellPointer pSpell)
+bool SummonEkkorash(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->p_caster == NULL )
 		return true;
 	
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 	if( plr == NULL )
 		return true;
 
@@ -133,12 +133,12 @@
 	return true;
 }
 
-bool OpeningTyraliusPrison(uint32 i, SpellPointer pSpell)
+bool OpeningTyraliusPrison(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
     
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 10442 );
 	if ( pQuest != NULL )
 	{
@@ -149,12 +149,12 @@
 	return true;
 }
 
-bool CallRexxar(uint32 i, SpellPointer pSpell)
+bool CallRexxar(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
     
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 10742 );
 	if ( pQuest != NULL )
 	{
@@ -165,17 +165,17 @@
 	return true;
 }
 
-bool LayWreath(uint32 i, SpellPointer pSpell) //Peace at Last quest
+bool LayWreath(uint32 i, Spell * pSpell) //Peace at Last quest
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
     
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 11152 );
 	if ( pQuest == NULL || pQuest->GetMobCount(0) < pQuest->GetQuest()->required_mobcount[0] )
 		return true;
 
-	GameObjectPointer pWreath = sEAS.SpawnGameobject( pPlayer, 501541, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 1, 0, 0, 0, 0 );
+	GameObject * pWreath = sEAS.SpawnGameobject( pPlayer, 501541, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 1, 0, 0, 0, 0 );
 	if ( pWreath != NULL )
 	{
 		sEAS.GameobjectDelete( pWreath, 2 * 60 * 1000 );
@@ -187,13 +187,13 @@
 	return true;
 }
 
-bool ScrapReaver(uint32 i, SpellPointer pSpell)
+bool ScrapReaver(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->p_caster == NULL )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->p_caster );
-	CreaturePointer pCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature( 19851, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), true, false, 0, 0 );
+	Player * pPlayer = TO_PLAYER( pSpell->p_caster );
+	Creature * pCreature = pPlayer->GetMapMgr()->GetInterface()->SpawnCreature( 19851, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), true, false, 0, 0 );
 	if ( pCreature != NULL )
 	{
 		pCreature->Despawn( 600000, 0 );
@@ -202,7 +202,7 @@
 	return true;
 }
 
-bool IncendiaPowder(uint32 i, SpellPointer pSpell)
+bool IncendiaPowder(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
@@ -225,7 +225,7 @@
 	return true;
 }
 
-bool GemOfTheSerpent(uint32 i, SpellPointer pSpell)
+bool GemOfTheSerpent(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
@@ -234,7 +234,7 @@
 	return true;
 }
 
-bool RuuanokClaw(uint32 i, SpellPointer pSpell)
+bool RuuanokClaw(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster)
 		return true;
@@ -243,11 +243,11 @@
 	return true;
 }
 
-bool KarangsBanner(uint32 i, SpellPointer pSpell)
+bool KarangsBanner(uint32 i, Spell * pSpell)
 {
 	if(!pSpell->p_caster) return true;
 
-	PlayerPointer pPlayer = pSpell->p_caster;
+	Player * pPlayer = pSpell->p_caster;
 
 	// Banner Aura
 	pPlayer->CastSpell(pPlayer, dbcSpell.LookupEntry(20746), true);
@@ -260,9 +260,9 @@
 	return true;
 }
 
-bool BlackwhelpNet(uint32 i, SpellPointer pSpell)
+bool BlackwhelpNet(uint32 i, Spell * pSpell)
 {
-    PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+    Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -273,7 +273,7 @@
     if(qle == NULL)
         return true;
 
-    CreaturePointer whelp = TO_CREATURE(pSpell->GetUnitTarget());
+    Creature * whelp = TO_CREATURE(pSpell->GetUnitTarget());
 	if(!whelp)
 		return true;
 
@@ -283,14 +283,14 @@
 	return true;
 }
 
-bool SpragglesCanteen(uint32 i, SpellPointer pSpell) // Quest: Lost!
+bool SpragglesCanteen(uint32 i, Spell * pSpell) // Quest: Lost!
 {
   if(!pSpell->u_caster->IsPlayer())
     return true;
 
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   
-  CreaturePointer target = pPlayer->GetMapMgr()->GetCreature( GET_LOWGUID_PART( pPlayer->GetSelection() ) );
+  Creature * target = pPlayer->GetMapMgr()->GetCreature( GET_LOWGUID_PART( pPlayer->GetSelection() ) );
   if(target == NULL)
     return true;
 
@@ -313,9 +313,9 @@
   return true;
 }
 
-bool ADireSituation(uint32 i, SpellPointer pSpell)
+bool ADireSituation(uint32 i, Spell * pSpell)
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
 	  return true;
 
@@ -336,9 +336,9 @@
   return true;
 }
 
-bool AllAlongtheWatchtowers(uint32 i, SpellPointer pSpell)
+bool AllAlongtheWatchtowers(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -353,10 +353,10 @@
 			return true;
 	}
 
-    GameObjectPointer tower1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(1304, -1318, 64, 300030);
-	GameObjectPointer tower2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(1311, -1589, 61, 300030);
-	GameObjectPointer tower3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(1481, -1414, 67, 300030);
-	GameObjectPointer tower4 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(1557, -1470, 68, 300030);
+    GameObject * tower1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(1304, -1318, 64, 300030);
+	GameObject * tower2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(1311, -1589, 61, 300030);
+	GameObject * tower3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(1481, -1414, 67, 300030);
+	GameObject * tower4 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(1557, -1470, 68, 300030);
 
 	if(tower1 != NULL)
 	{
@@ -401,9 +401,9 @@
 	return true;
 }
 
-bool FuryoftheDreghoodElders(uint32 i, SpellPointer pSpell)
+bool FuryoftheDreghoodElders(uint32 i, Spell * pSpell)
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
 	  return true;
 
@@ -416,21 +416,21 @@
   if(qle == NULL)
     return true;
 
-  CreaturePointer arzethpower = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 19354);
+  Creature * arzethpower = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 19354);
 
   if(arzethpower == NULL)
 	  return true;
 
-  CreaturePointer arzethless = sEAS.SpawnCreature(pPlayer, 20680, arzethpower->GetPositionX(), arzethpower->GetPositionY(), arzethpower->GetPositionZ(), arzethpower->GetOrientation(), 0);
+  Creature * arzethless = sEAS.SpawnCreature(pPlayer, 20680, arzethpower->GetPositionX(), arzethpower->GetPositionY(), arzethpower->GetPositionZ(), arzethpower->GetOrientation(), 0);
   arzethpower->Despawn(1, 6*60*1000);
   arzethless->Despawn(5*60*1000, 0);
   return true;
 
 }
 
-bool ASpiritAlly(uint32 i, SpellPointer pSpell) 
+bool ASpiritAlly(uint32 i, Spell * pSpell) 
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
 	  return true;
 
@@ -441,14 +441,14 @@
   if(qle == NULL)
     return true;
 
-  CreaturePointer allyspirit = sEAS.SpawnCreature(pPlayer, 18185, -353, 7255, 49.36, 6.28, 0);
+  Creature * allyspirit = sEAS.SpawnCreature(pPlayer, 18185, -353, 7255, 49.36, 6.28, 0);
   allyspirit->Despawn(6*60*1000, 0);
   return true;
 }
 
-bool BalanceMustBePreserved(uint32 i, SpellPointer pSpell)
+bool BalanceMustBePreserved(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -459,10 +459,10 @@
 	if(qle == NULL)
 		return true;
 
-    GameObjectPointer lake1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-756, 5926, 19, 300076);
-	GameObjectPointer lake2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-213, 6302, 21, 300076);
-	GameObjectPointer lake3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(498, 8197, 21, 300076);
-	GameObjectPointer lake4 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(566, 6358, 23, 300076);
+    GameObject * lake1 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-756, 5926, 19, 300076);
+	GameObject * lake2 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-213, 6302, 21, 300076);
+	GameObject * lake3 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(498, 8197, 21, 300076);
+	GameObject * lake4 = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(566, 6358, 23, 300076);
 
 	if(lake1 != NULL)
 	{
@@ -503,9 +503,9 @@
 	return true;
 }
 
-bool BlessingofIncineratus(uint32 i, SpellPointer pSpell)
+bool BlessingofIncineratus(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -516,10 +516,10 @@
 	if(qle == NULL)
 		return true;
 
-	GameObjectPointer big = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-1972, 6276, 56, 300077);
-	GameObjectPointer east = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-1841, 6387, 52, 400050);
-	GameObjectPointer west = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-1920, 6361, 56, 400051);
-	GameObjectPointer south = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-1808, 6293, 59, 400052);
+	GameObject * big = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-1972, 6276, 56, 300077);
+	GameObject * east = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-1841, 6387, 52, 400050);
+	GameObject * west = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-1920, 6361, 56, 400051);
+	GameObject * south = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-1808, 6293, 59, 400052);
 
 	if(big != NULL)
 	{
@@ -564,9 +564,9 @@
 	return true;
 }
 
-bool CatchandRelease(uint32 i, SpellPointer pSpell)
+bool CatchandRelease(uint32 i, Spell * pSpell)
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
 	  return true;
   if(!pSpell->u_caster->IsPlayer())
@@ -576,11 +576,11 @@
   if(qle == NULL)
 	return true;
 
-  CreaturePointer murloc = TO_CREATURE(pSpell->GetUnitTarget());
+  Creature * murloc = TO_CREATURE(pSpell->GetUnitTarget());
   if(!murloc)
 	  return true;
 
-  CreaturePointer tagged = sEAS.SpawnCreature(pPlayer, 17654, murloc->GetPositionX(), murloc->GetPositionY(), murloc->GetPositionZ(), 0);
+  Creature * tagged = sEAS.SpawnCreature(pPlayer, 17654, murloc->GetPositionX(), murloc->GetPositionY(), murloc->GetPositionZ(), 0);
   murloc->Despawn(1, 6*60*1000);
   tagged->Despawn(5*60*1000, 0);
 
@@ -593,9 +593,9 @@
   return true;
 }
 
-bool CookingPot(uint32 i, SpellPointer pSpell)
+bool CookingPot(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
     if(!pPlayer)
 	  return true;
 
@@ -612,9 +612,9 @@
 	return true;
 }
 
-bool EvilDrawsNear(uint32 i, SpellPointer pSpell) 
+bool EvilDrawsNear(uint32 i, Spell * pSpell) 
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -625,25 +625,25 @@
 	if(qle == NULL)
 		return true;
 
-	CreaturePointer dragon = sEAS.SpawnCreature(pPlayer, 22441, pPlayer->GetPositionX()+15, pPlayer->GetPositionY()+15, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+	Creature * dragon = sEAS.SpawnCreature(pPlayer, 22441, pPlayer->GetPositionX()+15, pPlayer->GetPositionY()+15, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
 	dragon->Despawn(6*60*1000, 0);
 	return true;
 }
 
-bool UnyieldingBattleHorn(uint32 i, SpellPointer pSpell)
+bool UnyieldingBattleHorn(uint32 i, Spell * pSpell)
 {
   if(pSpell->p_caster == NULL) 
     return true;
 
-  CreaturePointer creat = pSpell->p_caster->GetMapMgr()->GetInterface()->SpawnCreature(19862, -1190.856079f, 2261.246582f, 46.625797f, 1.705882f, true, false, 0, 0);
+  Creature * creat = pSpell->p_caster->GetMapMgr()->GetInterface()->SpawnCreature(19862, -1190.856079f, 2261.246582f, 46.625797f, 1.705882f, true, false, 0, 0);
   creat->Despawn(300000, 0); // 5 mins delay
 
   return true;
 }
 
-bool MeasuringWarpEnergies(uint32 i, SpellPointer pSpell)
+bool MeasuringWarpEnergies(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -654,10 +654,10 @@
 	if(qle == NULL)
 		return true;
 
-	GameObjectPointer north = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3216, 4045, 145, 300094);
-	GameObjectPointer east = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2766, 3865, 145, 300094);
-	GameObjectPointer west = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2958, 4318, 145, 300094);
-	GameObjectPointer south = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2817, 4337, 145, 300094);
+	GameObject * north = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(3216, 4045, 145, 300094);
+	GameObject * east = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2766, 3865, 145, 300094);
+	GameObject * west = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2958, 4318, 145, 300094);
+	GameObject * south = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(2817, 4337, 145, 300094);
 
 	if(north != NULL)
 	{
@@ -702,9 +702,9 @@
 	return true;
 }
 
-bool YennikuRelease(uint32 i, SpellPointer pSpell)
+bool YennikuRelease(uint32 i, Spell * pSpell)
 {
-  	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   	if(!pPlayer)
 		return true;
 
@@ -715,7 +715,7 @@
   	if(qle == NULL)
     	return true;
   
-  	CreaturePointer yenniku = TO_CREATURE(pSpell->GetUnitTarget());
+  	Creature * yenniku = TO_CREATURE(pSpell->GetUnitTarget());
   	if(!yenniku)
 		return true;
 
@@ -726,9 +726,9 @@
   	return true;
 }
 
-bool ScrollOfMyzrael(uint32 i, SpellPointer pSpell) 
+bool ScrollOfMyzrael(uint32 i, Spell * pSpell) 
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
 	  return true;
 
@@ -741,7 +741,7 @@
 
   const float MyzraelPos[] = {-940.7374, -3111.1953, 48.9566, 3.327};
 
-  CreaturePointer myzrael = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(MyzraelPos[0], MyzraelPos[1], MyzraelPos[2], 2755);
+  Creature * myzrael = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(MyzraelPos[0], MyzraelPos[1], MyzraelPos[2], 2755);
   if(myzrael != NULL)
   {
     if(!myzrael->isAlive())
@@ -754,9 +754,9 @@
   return true;
 }
 
-bool Showdown(uint32 i, SpellPointer pSpell)
+bool Showdown(uint32 i, Spell * pSpell)
 {
-  PlayerPointer p_caster = pSpell->p_caster;
+  Player * p_caster = pSpell->p_caster;
   if(!p_caster)
 	  return true;
 
@@ -768,16 +768,16 @@
 	    return true;
   }
 
-  CreaturePointer goc = NULLCREATURE;
+  Creature * goc = NULLCREATURE;
   goc = sEAS.SpawnCreature(p_caster, 20555, 3739, 5365, -4, 3.5, 0);
   goc->Despawn(6*60*1000, 0);
  
   return true;
 }
 
-bool TheBaitforLarkorwi1(uint32 i, SpellPointer pSpell)
+bool TheBaitforLarkorwi1(uint32 i, Spell * pSpell)
 {
-  	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   	if(!pPlayer)
 	  	return true;
 
@@ -788,7 +788,7 @@
   	if(qle == NULL)
     		return true;
   
-	GameObjectPointer obj = NULLGOB;
+	GameObject * obj = NULLGOB;
 
 	obj = sEAS.SpawnGameobject(pPlayer, 169216, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 1, 0, 0, 0, 0);
      	sEAS.GameobjectDelete(obj, 1*60*1000);
@@ -796,9 +796,9 @@
   	return true;
 }
 
-bool TheBaitforLarkorwi2(uint32 i, SpellPointer pSpell)
+bool TheBaitforLarkorwi2(uint32 i, Spell * pSpell)
 {
-  	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   	if(!pPlayer)
 	  	return true;
 
@@ -809,15 +809,15 @@
   	if(qle == NULL)
     		return true;
   
-	CreaturePointer larkowi = sEAS.SpawnCreature(pPlayer, 9684, pPlayer->GetPositionX()+2, pPlayer->GetPositionY()+3, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+	Creature * larkowi = sEAS.SpawnCreature(pPlayer, 9684, pPlayer->GetPositionX()+2, pPlayer->GetPositionY()+3, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
   	larkowi->Despawn(5*60*1000, 0);
 
   	return true;
 }
 
-bool Fumping(uint32 i, SpellPointer pSpell)
+bool Fumping(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -843,7 +843,7 @@
 		break;
 	}
 
-	CreaturePointer creat = sEAS.SpawnCreature(pPlayer, entry, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 5*60*1000);
+	Creature * creat = sEAS.SpawnCreature(pPlayer, entry, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 5*60*1000);
   
 	if(entry == 22483) //Sand Gnomes ;)
 		creat->SendChatMessage(CHAT_MSG_MONSTER_SAY, LANG_UNIVERSAL, "YIEEEEEEEAA!");
@@ -851,9 +851,9 @@
 	return true;
 }
 
-bool TheBigBoneWorm(uint32 i, SpellPointer pSpell)
+bool TheBigBoneWorm(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -864,15 +864,15 @@
 	if(qle == NULL)
 		return true;
 
-	CreaturePointer exarch = sEAS.SpawnCreature(pPlayer, 22038, pPlayer->GetPositionX()+7, pPlayer->GetPositionY()+7, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+	Creature * exarch = sEAS.SpawnCreature(pPlayer, 22038, pPlayer->GetPositionX()+7, pPlayer->GetPositionY()+7, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
 	exarch->Despawn(6*60*1000, 0);
 
 	return true;
 }
 
-bool Torgos(uint32 i, SpellPointer pSpell) 
+bool Torgos(uint32 i, Spell * pSpell) 
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
 	  return true;
 
@@ -883,7 +883,7 @@
   if(qle == NULL)
     return true;
 
-  CreaturePointer torgos = sEAS.SpawnCreature(pPlayer, 18707, pPlayer->GetPositionX(), pPlayer->GetPositionY()-10, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+  Creature * torgos = sEAS.SpawnCreature(pPlayer, 18707, pPlayer->GetPositionX(), pPlayer->GetPositionY()-10, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
   if(!torgos)
 	  return true;
 
@@ -891,9 +891,9 @@
   return true;
 }
 
-bool WelcomingtheWolfSpirit(uint32 i, SpellPointer pSpell)
+bool WelcomingtheWolfSpirit(uint32 i, Spell * pSpell)
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
 	  return true;
 
@@ -904,7 +904,7 @@
   if(qle == NULL)
     return true;
   
-  CreaturePointer spiritwolf = sEAS.SpawnCreature(pPlayer, 19616, pPlayer->GetPositionX()+2, pPlayer->GetPositionY()+3, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+  Creature * spiritwolf = sEAS.SpawnCreature(pPlayer, 19616, pPlayer->GetPositionX()+2, pPlayer->GetPositionY()+3, pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
   spiritwolf->Despawn(5*60*1000, 0);
 
   if(qle->GetMobCount(0) < qle->GetQuest()->required_mobcount[0])
@@ -916,9 +916,9 @@
   return true;
 }
 
-bool NaturalRemedies(uint32 i, SpellPointer pSpell)
+bool NaturalRemedies(uint32 i, Spell * pSpell)
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
 	  return true;
   if(!pSpell->u_caster->IsPlayer())
@@ -928,21 +928,21 @@
   if(qle == NULL)
 	return true;
 
-  CreaturePointer colos = sEAS.SpawnCreature(pPlayer, 19305, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 0);
+  Creature * colos = sEAS.SpawnCreature(pPlayer, 19305, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 0);
   colos->Despawn(5*60*1000, 0);
 
   return true;
 }
 
-bool FloraoftheEcoDomes(uint32 i, SpellPointer pSpell)
+bool FloraoftheEcoDomes(uint32 i, Spell * pSpell)
 {
 	if ( !pSpell->p_caster || !pSpell->GetUnitTarget() || !pSpell->GetUnitTarget()->IsCreature() )
 		return true;
 
-	PlayerPointer pPlayer = pSpell->p_caster;
+	Player * pPlayer = pSpell->p_caster;
 
-	CreaturePointer normal = TO_CREATURE( pSpell->GetUnitTarget() );
-	CreaturePointer mutant = sEAS.SpawnCreature( pPlayer, 20983, normal->GetPositionX(), normal->GetPositionY(), normal->GetPositionZ(), 0 );
+	Creature * normal = TO_CREATURE( pSpell->GetUnitTarget() );
+	Creature * mutant = sEAS.SpawnCreature( pPlayer, 20983, normal->GetPositionX(), normal->GetPositionY(), normal->GetPositionZ(), 0 );
 
 	normal->Despawn( 1, 6*60*1000 );
 	mutant->Despawn( 5*60*1000, 0 );
@@ -964,9 +964,9 @@
 
 }
 
-bool TheCleansingMustBeStopped(uint32 i, SpellPointer pSpell)
+bool TheCleansingMustBeStopped(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 	if(!pSpell->u_caster->IsPlayer())
@@ -976,20 +976,20 @@
 	if(qle == NULL)
 		return true;
 
-	CreaturePointer draenei1 = sEAS.SpawnCreature(pPlayer, 16994, pPlayer->GetPositionX()+RandomFloat(5.0f), pPlayer->GetPositionY()+RandomFloat(5.0f), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+	Creature * draenei1 = sEAS.SpawnCreature(pPlayer, 16994, pPlayer->GetPositionX()+RandomFloat(5.0f), pPlayer->GetPositionY()+RandomFloat(5.0f), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
 	draenei1->Despawn(6*60*1000, 0);
 
-	CreaturePointer draenei2 = sEAS.SpawnCreature(pPlayer, 16994, pPlayer->GetPositionX()-RandomFloat(5.0f), pPlayer->GetPositionY()+RandomFloat(5.0f), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+	Creature * draenei2 = sEAS.SpawnCreature(pPlayer, 16994, pPlayer->GetPositionX()-RandomFloat(5.0f), pPlayer->GetPositionY()+RandomFloat(5.0f), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
 	draenei1->Despawn(6*60*1000, 0);
 
-	CreaturePointer draenei3 = sEAS.SpawnCreature(pPlayer, 16994, pPlayer->GetPositionX()+RandomFloat(5.0f), pPlayer->GetPositionY()-RandomFloat(5.0f), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
+	Creature * draenei3 = sEAS.SpawnCreature(pPlayer, 16994, pPlayer->GetPositionX()+RandomFloat(5.0f), pPlayer->GetPositionY()-RandomFloat(5.0f), pPlayer->GetPositionZ(), pPlayer->GetOrientation(), 0);
 	draenei1->Despawn(6*60*1000, 0);
 	return true;
 }
 
-bool AdministreringtheSalve(uint32 i, SpellPointer pSpell)
+bool AdministreringtheSalve(uint32 i, Spell * pSpell)
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
 	  return true;
   if(!pSpell->u_caster->IsPlayer())
@@ -999,11 +999,11 @@
   if(qle == NULL)
 	return true;
 
-  CreaturePointer sick = TO_CREATURE(pSpell->GetUnitTarget());
+  Creature * sick = TO_CREATURE(pSpell->GetUnitTarget());
   if(!sick)
 	  return true;
 
-  CreaturePointer healed = sEAS.SpawnCreature(pPlayer, 16846, sick->GetPositionX(), sick->GetPositionY(), sick->GetPositionZ(), 0);
+  Creature * healed = sEAS.SpawnCreature(pPlayer, 16846, sick->GetPositionX(), sick->GetPositionY(), sick->GetPositionZ(), 0);
   sick->Despawn(1, 6*60*1000);
   healed->Despawn(3*60*1000, 0);
 
@@ -1016,9 +1016,9 @@
   return true;
 }
 
-bool ZappedGiants(uint32 i, SpellPointer pSpell)
+bool ZappedGiants(uint32 i, Spell * pSpell)
 {
-  PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+  Player * pPlayer = TO_PLAYER(pSpell->u_caster);
   if(!pPlayer)
 	  return true;
   if(!pSpell->u_caster->IsPlayer())
@@ -1032,7 +1032,7 @@
 		  return true;
   }
 
-  CreaturePointer creat = TO_CREATURE(pSpell->GetUnitTarget());
+  Creature * creat = TO_CREATURE(pSpell->GetUnitTarget());
   if (creat == NULL)
   	return true;
 
@@ -1047,35 +1047,35 @@
   case 5360:
 	  {
 	  creat->Despawn(1000, 6*60*1000);
-	  CreaturePointer zappedcreat = sEAS.SpawnCreature(pPlayer, 14639, X, Y, Z, 0);
+	  Creature * zappedcreat = sEAS.SpawnCreature(pPlayer, 14639, X, Y, Z, 0);
 	  zappedcreat->Despawn(3*60*1000, 0);
 	  }
 	  break;
   case 5361:
 	  {
 	  creat->Despawn(1000, 6*60*1000);
-	  CreaturePointer zappedcreat = sEAS.SpawnCreature(pPlayer, 14638, X, Y, Z, 0);
+	  Creature * zappedcreat = sEAS.SpawnCreature(pPlayer, 14638, X, Y, Z, 0);
 	  zappedcreat->Despawn(3*60*1000, 0);
 	  }
 	  break;
   case 5359:
 	  {
 	  creat->Despawn(1000, 6*60*1000);
-	  CreaturePointer zappedcreat = sEAS.SpawnCreature(pPlayer, 14603, X, Y, Z, 0);
+	  Creature * zappedcreat = sEAS.SpawnCreature(pPlayer, 14603, X, Y, Z, 0);
 	  zappedcreat->Despawn(3*60*1000, 0);
 	  }
 	  break;
   case 5358:
 	  {
 	  creat->Despawn(1000, 6*60*1000);
-	  CreaturePointer zappedcreat = sEAS.SpawnCreature(pPlayer, 14640, X, Y, Z, 0);
+	  Creature * zappedcreat = sEAS.SpawnCreature(pPlayer, 14640, X, Y, Z, 0);
 	  zappedcreat->Despawn(3*60*1000, 0);
 	  }
 	  break;
   case 5357:
 	  {
 	  creat->Despawn(1000, 6*60*1000);
-	  CreaturePointer zappedcreat = sEAS.SpawnCreature(pPlayer, 14604, X, Y, Z, 0);
+	  Creature * zappedcreat = sEAS.SpawnCreature(pPlayer, 14604, X, Y, Z, 0);
 	  zappedcreat->Despawn(3*60*1000, 0);
 	  }
 	  break;
@@ -1083,19 +1083,19 @@
   return true;
 }
 
-bool BuildingAPerimeter(uint32 i, SpellPointer pSpell)
+bool BuildingAPerimeter(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->u_caster == NULL || !pSpell->u_caster->IsPlayer() )
 		return true;
     
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->u_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->u_caster );
 	QuestLogEntry *pQuest = pPlayer->GetQuestLogForEntry( 10313 );
 	if ( pQuest == NULL )
 		return true;
 
 	if ( pQuest->GetMobCount( 0 ) < pQuest->GetQuest()->required_mobcount[0] )
 	{
-		GameObjectPointer pEast = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2257.0f, 2465.0f, 101.0f, 183947 );
+		GameObject * pEast = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2257.0f, 2465.0f, 101.0f, 183947 );
 		if ( pEast != NULL && pPlayer->CalcDistance( pPlayer, pEast ) < 30 )
 		{
 			pQuest->SetMobCount( 0, pQuest->GetMobCount( 0 ) + 1 );
@@ -1106,7 +1106,7 @@
 	}
 	if ( pQuest->GetMobCount( 1 ) < pQuest->GetQuest()->required_mobcount[1] )
 	{
-		GameObjectPointer pNorth = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2375.0f, 2285.0f, 141.0f, 183947 );
+		GameObject * pNorth = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2375.0f, 2285.0f, 141.0f, 183947 );
 		if ( pNorth != NULL && pPlayer->CalcDistance( pPlayer, pNorth ) < 30 )
 		{
 			pQuest->SetMobCount( 1, pQuest->GetMobCount( 1 ) + 1 );
@@ -1117,7 +1117,7 @@
 	}
 	if ( pQuest->GetMobCount( 2 ) < pQuest->GetQuest()->required_mobcount[2] )
 	{
-		GameObjectPointer pWest = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2283.0f, 2181.0f, 95.0f, 183947 );
+		GameObject * pWest = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords( 2283.0f, 2181.0f, 95.0f, 183947 );
 		if( pWest != NULL && pPlayer->CalcDistance( pPlayer, pWest ) < 30 )
 		{
 			pQuest->SetMobCount( 2, pQuest->GetMobCount( 2 ) + 1 );
@@ -1130,9 +1130,9 @@
 	return true;
 }
 
-bool RodofPurification(uint32 i, SpellPointer pSpell)
+bool RodofPurification(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -1143,7 +1143,7 @@
 	if(qle == NULL)
 		return true;
 
-	GameObjectPointer  Darkstone = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-2512, 5418, 0, 185191);
+	GameObject *  Darkstone = pPlayer->GetMapMgr()->GetInterface()->GetGameObjectNearestCoords(-2512, 5418, 0, 185191);
 	if(Darkstone != NULL)
 	{
 		if(pPlayer->CalcDistance(pPlayer, Darkstone) < 15)
@@ -1152,9 +1152,9 @@
 	return true;
 }
 
-bool AnUnusualPatron(uint32 i, SpellPointer pSpell)
+bool AnUnusualPatron(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -1165,7 +1165,7 @@
 	if(qle == NULL)
 		return true;
 
-	CreaturePointer Naias = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17207);
+	Creature * Naias = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 17207);
 	if(Naias)
 		return true;
 
@@ -1173,9 +1173,9 @@
 	return true;
 }
 
-bool MagnetoCollector(uint32 i, SpellPointer pSpell)
+bool MagnetoCollector(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -1186,20 +1186,20 @@
 	if(qle == NULL)
 		return true;
 
-	CreaturePointer magneto = TO_CREATURE(pSpell->GetUnitTarget());
+	Creature * magneto = TO_CREATURE(pSpell->GetUnitTarget());
 	if(!magneto)
 		return true;
 
-	CreaturePointer auramagneto = sEAS.SpawnCreature(pPlayer, 21731, magneto->GetPositionX(), magneto->GetPositionY(), magneto->GetPositionZ(), magneto->GetOrientation(), 0);
+	Creature * auramagneto = sEAS.SpawnCreature(pPlayer, 21731, magneto->GetPositionX(), magneto->GetPositionY(), magneto->GetPositionZ(), magneto->GetOrientation(), 0);
 	magneto->Despawn(1, 0);
 	auramagneto->Despawn(4*60*1000, 0);
   
 	return true;
 }
 
-bool TemporalPhaseModulator(uint32 i, SpellPointer pSpell)
+bool TemporalPhaseModulator(uint32 i, Spell * pSpell)
 {
-	PlayerPointer pPlayer = TO_PLAYER(pSpell->u_caster);
+	Player * pPlayer = TO_PLAYER(pSpell->u_caster);
 	if(!pPlayer)
 		return true;
 
@@ -1214,17 +1214,17 @@
 	int random = static_cast<int>(rand()*4.33);
 	srand ( random * 23 );
 
-	CreaturePointer whelp = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 20021);
+	Creature * whelp = pPlayer->GetMapMgr()->GetInterface()->GetCreatureNearestCoords(pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 20021);
 	if(whelp)
 	{
 		if(rand()%2 == 0)
 		{
-			CreaturePointer adolescent = sEAS.SpawnCreature(pPlayer, 21817, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
+			Creature * adolescent = sEAS.SpawnCreature(pPlayer, 21817, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
 			adolescent->Despawn(5*60*1000, 0);
 		}
 		else
 		{
-			CreaturePointer proto = sEAS.SpawnCreature(pPlayer, 21821, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
+			Creature * proto = sEAS.SpawnCreature(pPlayer, 21821, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
 			proto->Despawn(5*60*1000, 0);
 		}
 		whelp->Despawn(1, 0);
@@ -1236,12 +1236,12 @@
 	{
 		if(rand()%10 < 8 )
 		{
-			CreaturePointer mature = sEAS.SpawnCreature(pPlayer, 21820, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
+			Creature * mature = sEAS.SpawnCreature(pPlayer, 21820, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
 			mature->Despawn(5*60*1000, 0);
 		}
 		else
 		{
-			CreaturePointer funnyd = sEAS.SpawnCreature(pPlayer, 21823, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
+			Creature * funnyd = sEAS.SpawnCreature(pPlayer, 21823, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
 			funnyd->Despawn(5*60*1000, 0);
 		}
 		whelp->Despawn(1, 0);
@@ -1253,12 +1253,12 @@
 	{
 		if(rand()%10 < 8 )
 		{
-			CreaturePointer mature = sEAS.SpawnCreature(pPlayer, 21820, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
+			Creature * mature = sEAS.SpawnCreature(pPlayer, 21820, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
 			mature->Despawn(5*60*1000, 0);
 		}
 		else
 		{
-			CreaturePointer funnyd = sEAS.SpawnCreature(pPlayer, 21823, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
+			Creature * funnyd = sEAS.SpawnCreature(pPlayer, 21823, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
 			funnyd->Despawn(5*60*1000, 0);
 		}
 		whelp->Despawn(1, 0);
@@ -1271,12 +1271,12 @@
 	{
 		if(rand()%2 == 0)
 		{
-			CreaturePointer adolescent = sEAS.SpawnCreature(pPlayer, 21817, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
+			Creature * adolescent = sEAS.SpawnCreature(pPlayer, 21817, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
 			adolescent->Despawn(5*60*1000, 0);
 		}
 		else
 		{
-			CreaturePointer proto = sEAS.SpawnCreature(pPlayer, 21821, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
+			Creature * proto = sEAS.SpawnCreature(pPlayer, 21821, whelp->GetPositionX(), whelp->GetPositionY(), whelp->GetPositionZ(), whelp->GetOrientation(), 0);
 			proto->Despawn(5*60*1000, 0);
 		}
 		whelp->Despawn(1, 0);
@@ -1286,12 +1286,12 @@
 	return true;
 }
 
-bool EmblazonRuneblade(uint32 i, SpellPointer pSpell)
+bool EmblazonRuneblade(uint32 i, Spell * pSpell)
 {
 	if( pSpell == NULL || pSpell->p_caster == NULL || !pSpell->p_caster->IsPlayer() )
 		return true;
 
-	PlayerPointer pPlayer = TO_PLAYER( pSpell->p_caster );
+	Player * pPlayer = TO_PLAYER( pSpell->p_caster );
 	pPlayer->SendChatMessageToPlayer( CHAT_MSG_SYSTEM, LANG_UNIVERSAL, "Player check", pPlayer );
 
 	QuestLogEntry *qle = pPlayer->GetQuestLogForEntry( 12619 );
@@ -1303,32 +1303,32 @@
 	return true;
 }
 
-bool WyrmcallersHorn(uint32 i, SpellPointer pSpell)
+bool WyrmcallersHorn(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->p_caster == NULL )
 		return true;
 	
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 	if( plr == NULL )
 		return true;
 
-	CreaturePointer pCreature = sEAS.SpawnCreature(plr, 24019, plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(),0, 0);
+	Creature * pCreature = sEAS.SpawnCreature(plr, 24019, plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(),0, 0);
 	if( pCreature == NULL )
 		return true;
 	pCreature->Despawn(5*60*1000, 0);
 	return true;
 }
 
-bool RaeloraszSpark(uint32 i, SpellPointer pSpell)
+bool RaeloraszSpark(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->p_caster == NULL )
 		return true;
 	
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 	if( plr == NULL )
 		return true;
 
-	CreaturePointer pCreature = sEAS.SpawnCreature(plr, 26237, plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(),0, 0);
+	Creature * pCreature = sEAS.SpawnCreature(plr, 26237, plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(),0, 0);
 	pCreature->Despawn(5*60*1000, 0);
 	
 	QuestLogEntry *qle = plr->GetQuestLogForEntry(11969);
@@ -1338,16 +1338,16 @@
 	return true;
 }
 
-bool RuneOfDistortion(uint32 i, SpellPointer pSpell)
+bool RuneOfDistortion(uint32 i, Spell * pSpell)
 {
 	if ( pSpell == NULL || pSpell->p_caster == NULL )
 		return true;
 	
-	PlayerPointer plr = TO_PLAYER(pSpell->u_caster);
+	Player * plr = TO_PLAYER(pSpell->u_caster);
 	if( plr == NULL )
 		return true;
 
-	CreaturePointer pCreature = sEAS.SpawnCreature(plr, 32162, plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(),0, 0);
+	Creature * pCreature = sEAS.SpawnCreature(plr, 32162, plr->GetPositionX(), plr->GetPositionY(), plr->GetPositionZ(),0, 0);
 	pCreature->Despawn(5*60*1000, 0);
 	
 	QuestLogEntry *qle = plr->GetQuestLogForEntry(13312);
Index: Trunk/src/SpellHandlers/Raid_BlackTemple.cpp
===================================================================
--- Trunk/src/SpellHandlers/Raid_BlackTemple.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/Raid_BlackTemple.cpp	(working copy)
@@ -25,12 +25,12 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(LadyMalandeCircleOfHealing);
-	LadyMalandeCircleOfHealing(SpellPointer pSpell) : SpellScript(pSpell) {}
+	LadyMalandeCircleOfHealing(Spell * pSpell) : SpellScript(pSpell) {}
 	bool IsValidTarget(Object* obj)
 	{
 		if (obj == NULL || !obj->IsCreature())
 			return false;
-		CreaturePointerc=TO_CREATURE(obj);
+		Creature *c=TO_CREATURE(obj);
 		switch (c->GetEntry())
 		{
 		case 22949:
Index: Trunk/src/SpellHandlers/RogueSpells.cpp
===================================================================
--- Trunk/src/SpellHandlers/RogueSpells.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/RogueSpells.cpp	(working copy)
@@ -18,9 +18,9 @@
 #include "StdAfx.h"
 #include "Setup.h"
 
-bool Preparation(uint32 i, SpellPointer pSpell)
+bool Preparation(uint32 i, Spell * pSpell)
 {
-    PlayerPointer playerTarget = pSpell->p_caster;
+    Player * playerTarget = pSpell->p_caster;
     if(playerTarget == 0) return true;
 
     playerTarget->ClearCooldownForSpell( 5277 );	// Evasion Rank 1
@@ -43,7 +43,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Ambush);
-	Ambush(SpellPointer pSpell) : SpellScript(pSpell) {}
+	Ambush(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
 		if (_spell->u_caster == NULL || !_spell->u_caster->InStealth())
@@ -64,7 +64,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Backstab);
-	Backstab(SpellPointer pSpell) : SpellScript(pSpell) {}
+	Backstab(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
 		if (_spell->p_caster != NULL)
@@ -82,7 +82,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Stealth);
-	Stealth(SpellPointer pSpell) : SpellScript(pSpell) {}
+	Stealth(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
 		if (_spell->u_caster == NULL || _spell->u_caster->CombatStatus.IsInCombat())
@@ -99,7 +99,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Vanish);
-	Vanish(SpellPointer pSpell) : SpellScript(pSpell) {}
+	Vanish(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
 		if (_spell->p_caster != NULL && _spell->p_caster->m_bgHasFlag)
@@ -113,8 +113,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Garrote);
-	Garrote(SpellPointer pSpell) : SpellScript(pSpell) {}
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	Garrote(Spell * pSpell) : SpellScript(pSpell) {}
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		// WoWWiki says +( 0.18 * attack power / number of ticks )
 		// Tooltip gives no specific reading, but says ", increased by your attack power.".
@@ -133,8 +133,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Rupture);
-	Rupture(SpellPointer pSpell) : SpellScript(pSpell) {}
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	Rupture(Spell * pSpell) : SpellScript(pSpell) {}
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		/* 
 		1pt = Attack Power * 0.04 + x
@@ -156,8 +156,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Envenom);
-	Envenom(SpellPointer pSpell) : SpellScript(pSpell) {}
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	Envenom(Spell * pSpell) : SpellScript(pSpell) {}
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		if( _spell->p_caster != NULL && EffectIndex == 0 )//Envenom
 		{
@@ -172,8 +172,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Eviscerate);
-	Eviscerate(SpellPointer pSpell) : SpellScript(pSpell) {}
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	Eviscerate(Spell * pSpell) : SpellScript(pSpell) {}
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		if( _spell->p_caster != NULL && EffectIndex == 0 )//Envenom
 		{
Index: Trunk/src/SpellHandlers/ShamanSpells.cpp
===================================================================
--- Trunk/src/SpellHandlers/ShamanSpells.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/ShamanSpells.cpp	(working copy)
@@ -22,7 +22,7 @@
 /* Spell Defs                                                           */
 /************************************************************************/
 
-bool RockbiterWeapon(uint32 i, SpellPointer pSpell)
+bool RockbiterWeapon(uint32 i, Spell * pSpell)
 {
     uint32 enchantment_entry = 0;
     switch(pSpell->m_spellInfo->RankNumber)
@@ -59,7 +59,7 @@
     if(!enchantment_entry || !pSpell->p_caster)
         return true;
 
-    ItemPointer item = pSpell->p_caster->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_MAINHAND);
+    Item * item = pSpell->p_caster->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_MAINHAND);
     EnchantEntry * enchant = dbcEnchant.LookupEntry(enchantment_entry);
     if(!item || !enchant)
         return true;
@@ -86,12 +86,12 @@
 {
 public:
     ADD_CREATURE_FACTORY_FUNCTION(LinkedHPElemental);
-	LinkedHPElemental(CreaturePointer pCreature) : CreatureAIScript(pCreature) { }
+	LinkedHPElemental(Creature * pCreature) : CreatureAIScript(pCreature) { }
 
 	void OnLoad()
 	{
 		//we should be in world here, lets get totem
-		UnitPointer totem=_unit->GetMapMgr()->GetUnit(_unit->GetUInt64Value(UNIT_FIELD_CREATEDBY));
+		Unit * totem=_unit->GetMapMgr()->GetUnit(_unit->GetUInt64Value(UNIT_FIELD_CREATEDBY));
 
 		if (totem == NULL) //WTF
 			return;
Index: Trunk/src/SpellHandlers/WarlockSpells.cpp
===================================================================
--- Trunk/src/SpellHandlers/WarlockSpells.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/WarlockSpells.cpp	(working copy)
@@ -24,11 +24,11 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(UnstableAffliction);
-	UnstableAffliction(SpellPointer pSpell) : SpellScript(pSpell) {}
+	UnstableAffliction(Spell * pSpell) : SpellScript(pSpell) {}
 
 	void OnDispel(Aura* pDispelledAura, Spell* pDispellingSpell)
 	{
-		UnitPointer  caster=pDispelledAura->GetUnitCaster();
+		Unit *  caster=pDispelledAura->GetUnitCaster();
 
 		if (pDispellingSpell->u_caster == NULL || caster == NULL)
 			return;
@@ -45,10 +45,10 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(CurseOfDoom);
-	CurseOfDoom(SpellPointer pSpell) : SpellScript(pSpell) {}
+	CurseOfDoom(Spell * pSpell) : SpellScript(pSpell) {}
 	SpellCastError CanCast(bool tolerate)
 	{
-		UnitPointer  u_target = _spell->GetUnitTarget();
+		Unit *  u_target = _spell->GetUnitTarget();
 		if (u_target != NULL && u_target->IsPlayer())
 			return SPELL_FAILED_TARGET_IS_PLAYER;
 
@@ -57,7 +57,7 @@
 
 	void OnExpire()
 	{
-		UnitPointer  target=_spell->GetUnitTarget();
+		Unit *  target=_spell->GetUnitTarget();
 
 		if (target == NULL || !target->isDead())
 			return;
@@ -72,9 +72,9 @@
 public:
 	ADD_SPELL_FACTORY_FUNCTION(LifeTap);
 	int32 valueforplayer;
-	LifeTap(SpellPointer pSpell) : SpellScript(pSpell) {}
+	LifeTap(Spell * pSpell) : SpellScript(pSpell) {}
 
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		if (_spell->u_caster == NULL)
 			return;
@@ -119,7 +119,7 @@
 public:
 	ADD_SPELL_FACTORY_FUNCTION(SoulLink);
 
-	SoulLink(SpellPointer pSpell) : SpellScript(pSpell) {}
+	SoulLink(Spell * pSpell) : SpellScript(pSpell) {}
 	DamageSplitTarget splitter;
 	Player* source;
 
@@ -158,11 +158,11 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(DrainLife);
-	DrainLife(SpellPointer pSpell) : SpellScript(pSpell) {}
+	DrainLife(Spell * pSpell) : SpellScript(pSpell) {}
 
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
-		UnitPointer  u_target = _spell->GetUnitTarget();
+		Unit *  u_target = _spell->GetUnitTarget();
 
 		if (_spell->u_caster == NULL || u_target == NULL)
 			return;
@@ -195,7 +195,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(WarlockPetScaling01);
-	WarlockPetScaling01(SpellPointer pSpell) : SpellScript(pSpell) {}
+	WarlockPetScaling01(Spell * pSpell) : SpellScript(pSpell) {}
 
 	void OnCast()
 	{
@@ -223,8 +223,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(Conflagrate);
-	Conflagrate(SpellPointer pSpell) : SpellScript(pSpell) {}
-	UnitPointer  u_target;
+	Conflagrate(Spell * pSpell) : SpellScript(pSpell) {}
+	Unit *  u_target;
 	SpellCastError CanCast(bool tolerate)
 	{
 		u_target = _spell->GetUnitTarget();
@@ -244,7 +244,7 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(SoulShatter);
-	SoulShatter(SpellPointer pSpell) : SpellScript(pSpell) {}
+	SoulShatter(Spell * pSpell) : SpellScript(pSpell) {}
 
 	void DummyEffect(uint32 EffectIndex)
 	{
@@ -260,14 +260,14 @@
 public:
 	ADD_SPELL_FACTORY_FUNCTION(DemonicKnowledge);
 	int32 amountadded;
-	DemonicKnowledge(SpellPointer pSpell) : SpellScript(pSpell) { amountadded=0; }
+	DemonicKnowledge(Spell * pSpell) : SpellScript(pSpell) { amountadded=0; }
 
 
 	void DummyAura(bool apply, Aura* aura)
 	{
 		if ( aura->GetTarget()->IsPet() )
 		{
-			UnitPointer  PetOwner;
+			Unit *  PetOwner;
 			if ( static_cast< Pet* >( aura->GetTarget() )->GetPetOwner() )
 			{
 				PetOwner = static_cast< Pet* >( aura->GetTarget() )->GetPetOwner();
Index: Trunk/src/SpellHandlers/WarriorSpells.cpp
===================================================================
--- Trunk/src/SpellHandlers/WarriorSpells.cpp	(revision 896)
+++ Trunk/src/SpellHandlers/WarriorSpells.cpp	(working copy)
@@ -22,7 +22,7 @@
 /* Spell Defs                                                           */
 /************************************************************************/
 
-bool Charge(uint32 i, SpellPointer pSpell)
+bool Charge(uint32 i, Spell * pSpell)
 {
     uint32 rage_to_gen;
     switch(pSpell->m_spellInfo->Id)
@@ -86,7 +86,7 @@
     return true;
 }
 
-bool Execute(uint32 i, SpellPointer pSpell)
+bool Execute(uint32 i, Spell * pSpell)
 {
     //uint32 uSpellId = pSpell->m_spellInfo->Id;
     uint32 base_dmg = pSpell->damage;
@@ -95,7 +95,7 @@
     of rage into 3 additional damage.  Only usable on enemies that have less than 20% health.
     */
 
-    UnitPointer target = pSpell->GetUnitTarget();
+    Unit * target = pSpell->GetUnitTarget();
     if(!target || !pSpell->u_caster) return true;
 
     // "Only usable on enemies that have less than 20% health."
@@ -120,7 +120,7 @@
     return true;
 }
 
-bool Bloodrage(uint32 i, SpellPointer pSpell)
+bool Bloodrage(uint32 i, Spell * pSpell)
 {
   // Put the player in Combat (gotta find when to put him ooc)
 
@@ -134,8 +134,8 @@
 {
 public:
 	ADD_SPELL_FACTORY_FUNCTION(VictoryRush);
-	VictoryRush(SpellPointer pSpell) : SpellScript(pSpell) {}
-	void CalculateEffect(uint32 EffectIndex, UnitPointer  target, int32* value)
+	VictoryRush(Spell * pSpell) : SpellScript(pSpell) {}
+	void CalculateEffect(uint32 EffectIndex, Unit *  target, int32* value)
 	{
 		if(EffectIndex == 0 && _spell->u_caster != NULL)
 			*value = (*value * _spell->u_caster->GetAP())/100;
Index: Trunk/src/WorldPvPScripts/ZoneHellfirePeninsula.cpp
===================================================================
--- Trunk/src/WorldPvPScripts/ZoneHellfirePeninsula.cpp	(revision 896)
+++ Trunk/src/WorldPvPScripts/ZoneHellfirePeninsula.cpp	(working copy)
@@ -45,7 +45,7 @@
 static const uint32 g_neutralStateFields[3] = { WORLDSTATE_HELLFIRE_STADIUM_NEUTRAL, WORLDSTATE_HELLFIRE_OVERLOOK_NEUTRAL, WORLDSTATE_HELLFIRE_BROKENHILL_NEUTRAL };
 
 // updates clients visual counter, and adds the buffs to players if needed
-HEARTHSTONE_INLINE void UpdateTowerCount(shared_ptr<MapMgr> mgr)
+HEARTHSTONE_INLINE void UpdateTowerCount(MapMgr* mgr)
 {
 	if(!mgr)
 		return;
@@ -94,9 +94,9 @@
 	uint32 m_bannerStatus;
 
 public:
-	GameObjectPointer  pBanner;
+	GameObject*  pBanner;
 
-	HellfirePeninsulaBannerAI(GameObjectPointer go) : GameObjectAIScript(go)
+	HellfirePeninsulaBannerAI(GameObject* go) : GameObjectAIScript(go)
 	{
 		m_bannerStatus = BANNER_STATUS_NEUTRAL;
 		Status = 50;
@@ -133,13 +133,13 @@
 		//   the value of the map is a timestamp of the last update, to avoid cpu time wasted
 		//   doing lookups of objects that have already been updated
 
-		unordered_set<PlayerPointer>::iterator itr = _gameobject->GetInRangePlayerSetBegin();		
-		unordered_set<PlayerPointer>::iterator itrend = _gameobject->GetInRangePlayerSetEnd();
+		unordered_set<Player*>::iterator itr = _gameobject->GetInRangePlayerSetBegin();		
+		unordered_set<Player*>::iterator itrend = _gameobject->GetInRangePlayerSetEnd();
 		map<uint32,uint32>::iterator it2, it3;
 		uint32 timeptr = (uint32)UNIXTIME;
 		bool in_range;
 		bool is_valid;
-		PlayerPointer plr = NULLPLR;
+		Player* plr = NULLPLR;
 		
 		for(; itr != itrend; ++itr)
 		{
@@ -388,7 +388,7 @@
 // Zone Hook
 //////////////////////////////////////////////////////////////////////////
 
-void ZoneHook(PlayerPointer plr, uint32 Zone, uint32 OldZone)
+void ZoneHook(Player* plr, uint32 Zone, uint32 OldZone)
 {
 	static uint32 spellids[2] = { HELLFIRE_SUPERORITY_ALLIANCE, HELLFIRE_SUPERORITY_HORDE };
 	if( Zone == ZONE_HELLFIRE_PENINSULA )
@@ -422,7 +422,7 @@
 	uint32 is_banner;
 };
 
-void SpawnObjects(shared_ptr<MapMgr> pmgr)
+void SpawnObjects(MapMgr* pmgr)
 {
 	if(!pmgr || pmgr->GetMapId() != 530)
 		return;
@@ -448,11 +448,11 @@
 		p = &godata[i];
 		p2 = &godata_banner[i];
 
-		GameObjectPointer pGo = pmgr->GetInterface()->SpawnGameObject(p->entry, p->posx, p->posy, p->posz, p->facing, false, 0, 0);
+		GameObject* pGo = pmgr->GetInterface()->SpawnGameObject(p->entry, p->posx, p->posy, p->posz, p->facing, false, 0, 0);
 		if( pGo == NULL )
 			continue;
 
-		GameObjectPointer pGo2 = pmgr->GetInterface()->SpawnGameObject(p2->entry, p2->posx, p2->posy, p2->posz, p2->facing, false, 0, 0);
+		GameObject* pGo2 = pmgr->GetInterface()->SpawnGameObject(p2->entry, p2->posx, p2->posy, p2->posz, p2->facing, false, 0, 0);
 		if( pGo2 == NULL )
 			continue;
 
@@ -481,12 +481,11 @@
 	}
 }
 
-
 void SetupPvPHellfirePeninsula(ScriptMgr *mgr)
 {
 	// register instance hooker
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_ZONE, (void *)&ZoneHook);
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_CONTINENT_CREATE, (void *)&SpawnObjects);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_ZONE, ZoneHook);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_CONTINENT_CREATE, SpawnObjects);
 
 	// load data
 	const string tstadium = WorldStateManager::GetPersistantSetting("hellfire-stadium-status", "-1");
Index: Trunk/src/WorldPvPScripts/ZoneSilithus.cpp
===================================================================
--- Trunk/src/WorldPvPScripts/ZoneSilithus.cpp	(revision 896)
+++ Trunk/src/WorldPvPScripts/ZoneSilithus.cpp	(working copy)
@@ -43,7 +43,7 @@
 int32 winners = -1;
 bool locked = false;
 
-void InitWorldStates(shared_ptr<MapMgr> pmgr)
+void InitWorldStates(MapMgr* pmgr)
 {
 	if(!pmgr)
 		return;
@@ -55,7 +55,7 @@
 	}
 }
 
-void SilithusZoneHook(PlayerPointer plr, uint32 Zone, uint32 OldZone)
+void SilithusZoneHook(Player* plr, uint32 Zone, uint32 OldZone)
 {
 	if(!plr)
 		return;
@@ -72,7 +72,7 @@
 	}
 }
 
-void AreatriggerHook(PlayerPointer pPlayer, uint32 triggerID)
+void AreatriggerHook(Player* pPlayer, uint32 triggerID)
 {
 	if(!pPlayer)
 		return;
@@ -114,10 +114,10 @@
 class SilithystPickup : public GameObjectAIScript
 {
 public:
-	SilithystPickup(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer  GO) { return new SilithystPickup(GO); }
+	SilithystPickup(GameObject* goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject*  GO) { return new SilithystPickup(GO); }
 
-	void OnActivate(PlayerPointer  pPlayer)
+	void OnActivate(Player*  pPlayer)
 	{
 		if( pPlayer && !pPlayer->HasAura( SILITHYST_SPELL ) )
 			pPlayer->CastSpell(pPlayer, SILITHYST_SPELL, true);
@@ -127,7 +127,7 @@
 	}
 };
 
-void DropFlag(PlayerPointer  pPlayer, uint32 spellID)
+void DropFlag(Player*  pPlayer, uint32 spellID)
 {
 	if( !pPlayer || spellID != SILITHYST_SPELL )
 		return;
@@ -137,7 +137,7 @@
 	if( pAreaTrigger )
 		if( pPlayer->CalcDistance(pAreaTrigger->x,pAreaTrigger->y,pAreaTrigger->z) > 10.0f )
 		{
-			GameObjectPointer pGo = pPlayer->GetMapMgr()->GetInterface()->SpawnGameObject(SILITHYST_MOUND, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 0, true, 0, 0);
+			GameObject* pGo = pPlayer->GetMapMgr()->GetInterface()->SpawnGameObject(SILITHYST_MOUND, pPlayer->GetPositionX(), pPlayer->GetPositionY(), pPlayer->GetPositionZ(), 0, true, 0, 0);
 			if( pGo == NULL )
 			{
 				pGo->Destructor();
@@ -151,10 +151,10 @@
 	mgr->register_gameobject_script(SILITHYST_GEYSER, &SilithystPickup::Create);
 	mgr->register_gameobject_script(SILITHYST_MOUND, &SilithystPickup::Create);
 	
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_CONTINENT_CREATE, (void *)&InitWorldStates);
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_ZONE, (void *)&SilithusZoneHook);
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_AREATRIGGER, (void *)&AreatriggerHook);
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_AURA_REMOVE, (void *)&DropFlag);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_CONTINENT_CREATE, InitWorldStates);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_ZONE, SilithusZoneHook);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_AREATRIGGER, AreatriggerHook);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_AURA_REMOVE, DropFlag);
 	
 	SpellEntry* sp = dbcSpell.LookupEntryForced( SILITHYST_SPELL );
 	if( sp != NULL )
Index: Trunk/src/WorldPvPScripts/ZoneTerokkarForest.cpp
===================================================================
--- Trunk/src/WorldPvPScripts/ZoneTerokkarForest.cpp	(revision 896)
+++ Trunk/src/WorldPvPScripts/ZoneTerokkarForest.cpp	(working copy)
@@ -46,7 +46,7 @@
 static const uint32 g_neutralStateFields[5]		= {	WORLDSTATE_TEROKKAR_TOWER1_NEUTRAL,	WORLDSTATE_TEROKKAR_TOWER2_NEUTRAL,	WORLDSTATE_TEROKKAR_TOWER3_NEUTRAL,	WORLDSTATE_TEROKKAR_TOWER4_NEUTRAL,	WORLDSTATE_TEROKKAR_TOWER5_NEUTRAL };
 
 // updates clients visual counter, and adds the buffs to players if needed
-HEARTHSTONE_INLINE void UpdateTowerCount(shared_ptr<MapMgr> mgr)
+HEARTHSTONE_INLINE void UpdateTowerCount(MapMgr* mgr)
 {
 	mgr->GetStateManager().UpdateWorldState(WORLDSTATE_TEROKKAR_ALLIANCE_TOWERS_CONTROLLED, TFg_allianceTowers);
 	mgr->GetStateManager().UpdateWorldState(WORLDSTATE_TEROKKAR_HORDE_TOWERS_CONTROLLED, TFg_hordeTowers);
@@ -93,7 +93,7 @@
 
 public:
 
-	TerokkarForestBannerAI(GameObjectPointer go) : GameObjectAIScript(go)
+	TerokkarForestBannerAI(GameObject* go) : GameObjectAIScript(go)
 	{
 		m_bannerStatus = BANNER_STATUS_NEUTRAL;
 		Status = 50;
@@ -140,13 +140,13 @@
 		//   the value of the map is a timestamp of the last update, to avoid cpu time wasted
 		//   doing lookups of objects that have already been updated
 
-		unordered_set<PlayerPointer>::iterator itr = _gameobject->GetInRangePlayerSetBegin();		
-		unordered_set<PlayerPointer>::iterator itrend = _gameobject->GetInRangePlayerSetEnd();
+		unordered_set<Player*>::iterator itr = _gameobject->GetInRangePlayerSetBegin();		
+		unordered_set<Player*>::iterator itrend = _gameobject->GetInRangePlayerSetEnd();
 		map<uint32,uint32>::iterator it2, it3;
 		uint32 timeptr = (uint32)UNIXTIME;
 		bool in_range;
 		bool is_valid;
-		PlayerPointer plr;
+		Player* plr;
 		
 		for(; itr != itrend; ++itr)
 		{
@@ -386,7 +386,7 @@
 // Zone Hook
 //////////////////////////////////////////////////////////////////////////
 
-void TFZoneHook(PlayerPointer plr, uint32 Zone, uint32 OldZone)
+void TFZoneHook(Player* plr, uint32 Zone, uint32 OldZone)
 {
 	if(!plr)
 		return;
@@ -422,7 +422,7 @@
 	uint32 is_banner;
 };
 
-void TFSpawnObjects(shared_ptr<MapMgr> pmgr)
+void TFSpawnObjects(MapMgr* pmgr)
 {
 	if(!pmgr || pmgr->GetMapId() != 530)
 		return;
@@ -442,7 +442,7 @@
 	{
 		p = &godata[i];
 
-		GameObjectPointer pGo = NULLGOB;
+		GameObject* pGo = NULLGOB;
 		pGo = pmgr->GetInterface()->SpawnGameObject(p->entry, p->posx, p->posy, p->posz, p->facing, false, 0, 0);
 		if( !pGo )
 			continue;
@@ -468,8 +468,8 @@
 void SetupPvPTerokkarForest(ScriptMgr *mgr)
 {
 	// register instance hooker
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_ZONE, (void *)&TFZoneHook);
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_CONTINENT_CREATE, (void *)&TFSpawnObjects);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_ZONE, TFZoneHook);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_CONTINENT_CREATE, TFSpawnObjects);
 
 	// load data
 	const string Tower1 = WorldStateManager::GetPersistantSetting("Terokkar-Tower1-status", "-1");
Index: Trunk/src/WorldPvPScripts/ZoneZangarmarsh.cpp
===================================================================
--- Trunk/src/WorldPvPScripts/ZoneZangarmarsh.cpp	(revision 896)
+++ Trunk/src/WorldPvPScripts/ZoneZangarmarsh.cpp	(working copy)
@@ -45,9 +45,9 @@
 static const uint32 g_allianceStateFields_UI[TOWER_COUNT]	= {	WORLDSTATE_ZANGARMARSH_EAST_ALLIANCE_UI,	WORLDSTATE_ZANGARMARSH_WEST_ALLIANCE_UI};
 static const uint32 g_neutralStateFields_UI[TOWER_COUNT]	= {	WORLDSTATE_ZANGARMARSH_EAST_NEUTRAL_UI,		WORLDSTATE_ZANGARMARSH_WEST_NEUTRAL_UI};
 
-void ZMSpawnBanners(shared_ptr<MapMgr> bmgr, int32 side);
+void ZMSpawnBanners(MapMgr* bmgr, int32 side);
 
-void SetGrave(shared_ptr<MapMgr> pmgr)
+void SetGrave(MapMgr* pmgr)
 {
 	if(!pmgr || pmgr->GetMapId() != 530)
 		return;
@@ -91,7 +91,7 @@
 	}
 }
 
-HEARTHSTONE_INLINE void UpdateTowerCountZM(shared_ptr<MapMgr> mgr)
+HEARTHSTONE_INLINE void UpdateTowerCountZM(MapMgr* mgr)
 {
 	if(!mgr)
 		return;
@@ -142,7 +142,7 @@
 
 public:
 
-	ZangarmarshBannerAI(GameObjectPointer go) : GameObjectAIScript(go)
+	ZangarmarshBannerAI(GameObject* go) : GameObjectAIScript(go)
 	{
 		m_bannerStatus = BANNER_STATUS_NEUTRAL;
 		Status = 50;
@@ -174,13 +174,13 @@
 		//   the value of the map is a timestamp of the last update, to avoid cpu time wasted
 		//   doing lookups of objects that have already been updated
 
-		unordered_set<PlayerPointer>::iterator itr = _gameobject->GetInRangePlayerSetBegin();		
-		unordered_set<PlayerPointer>::iterator itrend = _gameobject->GetInRangePlayerSetEnd();
+		unordered_set<Player*>::iterator itr = _gameobject->GetInRangePlayerSetBegin();		
+		unordered_set<Player*>::iterator itrend = _gameobject->GetInRangePlayerSetEnd();
 		map<uint32,uint32>::iterator it2, it3;
 		uint32 timeptr = (uint32)UNIXTIME;
 		bool in_range;
 		bool is_valid;
-		PlayerPointer plr;
+		Player* plr;
 		
 		for(; itr != itrend; ++itr)
 		{
@@ -446,7 +446,7 @@
 class SCRIPT_DECL ZMScouts : public GossipScript
 {
 public:
-	void GossipHello(ObjectPointer pObject, PlayerPointer  plr, bool AutoSend)
+	void GossipHello(Object* pObject, Player*  plr, bool AutoSend)
 	{
 		uint32 Team = plr->GetTeam();
 		if(Team > 1) Team = 1;
@@ -463,12 +463,12 @@
 			Menu->SendTo(plr);
     }
 
-    void GossipSelectOption(ObjectPointer pObject, PlayerPointer  plr, uint32 Id, uint32 IntId, const char * Code)
+    void GossipSelectOption(Object* pObject, Player*  plr, uint32 Id, uint32 IntId, const char * Code)
     {
 		if( !plr )
 			return;
 		
-		CreaturePointer  pCreature = NULLCREATURE;
+		Creature*  pCreature = NULLCREATURE;
 		pCreature = pObject->IsCreature() ? TO_CREATURE( pObject ) : NULLCREATURE;
 		if( !pCreature )
 			return;
@@ -485,20 +485,15 @@
 				pCreature->CastSpell(plr,CastSpellID,true);
 		return;
     }
-
-	void Destroy()
-	{
-		delete this;
-	};
 };
 
 class ZMCityBannerAI : public GameObjectAIScript
 {
 public:
-	ZMCityBannerAI(GameObjectPointer goinstance) : GameObjectAIScript(goinstance) {}
-	static GameObjectAIScript *Create(GameObjectPointer  GO) { return new ZMCityBannerAI(GO); }
+	ZMCityBannerAI(GameObject* goinstance) : GameObjectAIScript(goinstance) {}
+	static GameObjectAIScript *Create(GameObject*  GO) { return new ZMCityBannerAI(GO); }
 
-	void OnActivate(PlayerPointer  pPlayer)
+	void OnActivate(Player*  pPlayer)
 	{
 		if( !pPlayer )
 			return;
@@ -542,7 +537,7 @@
 // Zone Hook
 //////////////////////////////////////////////////////////////////////////
 
-void ZMZoneHook(PlayerPointer plr, uint32 Zone, uint32 OldZone)
+void ZMZoneHook(Player* plr, uint32 Zone, uint32 OldZone)
 {
 	if(!plr)
 		return;
@@ -578,7 +573,7 @@
 	uint32 is_banner;
 };
 
-void ZMSpawnBanners(shared_ptr<MapMgr> bmgr, int32 side)
+void ZMSpawnBanners(MapMgr* bmgr, int32 side)
 {
 	if(!bmgr)
 		return;
@@ -600,7 +595,7 @@
 	const sgodata *b;
 	b = &gobdata[i];
 
-	GameObjectPointer bGo = NULLGOB;
+	GameObject* bGo = NULLGOB;
 	bGo = bmgr->GetInterface()->SpawnGameObject(b->entry, b->posx, b->posy, b->posz, b->facing, false, 0, 0);
 	if( !bGo )
 		return;
@@ -617,7 +612,7 @@
 	bGo->PushToWorld(bmgr);
 }
 
-void ZMSpawnObjects(shared_ptr<MapMgr> pmgr)
+void ZMSpawnObjects(MapMgr* pmgr)
 {
 	if(!pmgr || pmgr->GetMapId() != 530)
 		return;
@@ -636,7 +631,7 @@
 	{
 		p = &godata[i];
 
-		GameObjectPointer pGo = NULLGOB;
+		GameObject* pGo = NULLGOB;
 		pGo = pmgr->GetInterface()->SpawnGameObject(p->entry, p->posx, p->posy, p->posz, p->facing, false, 0, 0);
 		if( !pGo )
 			continue;
@@ -659,7 +654,7 @@
 	}
 }
 
-void Tokens(PlayerPointer pPlayer, PlayerPointer pVictim)
+void Tokens(Player* pPlayer, Player* pVictim)
 {
 	if( !pPlayer || !pVictim )
 		return;
@@ -691,9 +686,9 @@
 	ZMg_towerOwners[TOWER_EAST] = atoi(Tower2.c_str());
 	ZMCityOwners = atoi(City.c_str());
 	mgr->register_hook(SERVER_HOOK_EVENT_ON_KILL_PLAYER, (void*)Tokens);
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_ZONE, (void *)&ZMZoneHook);
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_CONTINENT_CREATE, (void *)&ZMSpawnObjects);
-	mgr->register_hook(SERVER_HOOK_EVENT_ON_CONTINENT_CREATE, (void *)&SetGrave);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_ZONE, ZMZoneHook);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_CONTINENT_CREATE, ZMSpawnObjects);
+	mgr->register_hook(SERVER_HOOK_EVENT_ON_CONTINENT_CREATE, SetGrave);
 }
 
 
