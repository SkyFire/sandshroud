Index: AchievementInterface.cpp
===================================================================
--- AchievementInterface.cpp	(revision 397)
+++ AchievementInterface.cpp	(working copy)
@@ -45,11 +45,11 @@
 void AchievementInterface::LoadFromDB( QueryResult * pResult )
 {
 	// don't allow GMs to complete achievements
-	if( m_player->GetSession()->HasGMPermissions() )
-	{
-		CharacterDatabase.Execute("DELETE FROM achievements WHERE player = %u;", m_player->GetGUID());
-		return;
-	}
+	//if( m_player->GetSession()->HasGMPermissions() )
+	//{
+	//	CharacterDatabase.Execute("DELETE FROM achievements WHERE player = %u;", m_player->GetGUID());
+	//	return;
+	//}
 
 	if( !pResult ) // We have no achievements yet. :)
 		return;
@@ -98,8 +98,8 @@
 void AchievementInterface::SaveToDB(QueryBuffer * buffer)
 {
 	// don't allow GMs to save achievements
-	if( m_player->GetSession()->HasGMPermissions() )
-		return;
+	//if( m_player->GetSession()->HasGMPermissions() )
+	//	return;
 
 	bool NewBuffer = false;
 	if( !buffer )
@@ -297,8 +297,8 @@
 bool AchievementInterface::CanCompleteAchievement(AchievementData * ad)
 {
 	// don't allow GMs to complete achievements
-	if( m_player->GetSession()->HasGMPermissions() )
-		return false;
+	//if( m_player->GetSession()->HasGMPermissions() )
+	//	return false;
 
 	if(!m_player) // o.O bastard.
 		return false;
@@ -386,8 +386,8 @@
 			return false;
 	if(m_player->getLevel() < 10) // Blizzard says no.
 		return false;
-	if(m_player->GetSession()->HasGMPermissions())
-		return false;
+	//if(m_player->GetSession()->HasGMPermissions())
+	//	return false;
 	return true;
 }
 
@@ -472,6 +472,13 @@
 	}
 }
 
+void AchievementInterface::HandleAchievementCreature(uint32 id)
+{
+	AchievementData * ad = GetAchievementDataByAchievementID(id);
+	if( CanCompleteAchievement(ad) )
+		EventAchievementEarned(ad);
+}
+
 void AchievementInterface::HandleAchievementCriteriaKillCreature(uint32 killedMonster)
 {
 	AchievementCriteriaMap::iterator itr = objmgr.m_achievementCriteriaMap.find( ACHIEVEMENT_CRITERIA_TYPE_KILL_CREATURE );
Index: AchievementInterface.h
===================================================================
--- AchievementInterface.h	(revision 397)
+++ AchievementInterface.h	(working copy)
@@ -217,6 +217,7 @@
 
 	//----------------------------------------------------------------
 	void HandleAchievementCriteriaConditionDeath();
+	void HandleAchievementCreature(uint32 id);
 
 	// Handlers for misc events
 	//-----------------------------------------------------------------
Index: Object.cpp
===================================================================
--- Object.cpp	(revision 397)
+++ Object.cpp	(working copy)
@@ -2237,11 +2237,11 @@
 					}
 				}
 				// Achievement: on kill unit
-				if( !pVictim->IsPlayer() && IsPlayer() )
-				{
-					Player* pThis = TO_PLAYER(this);
-					pThis->GetAchievementInterface()->HandleAchievementCriteriaKillCreature( pVictim->GetUInt32Value(OBJECT_FIELD_ENTRY) );
-				}
+				//if( !pVictim->IsPlayer() && IsPlayer() )
+				//{
+				//	Player* pThis = TO_PLAYER(this);
+				//	pThis->GetAchievementInterface()->HandleAchievementCriteriaKillCreature( pVictim->GetUInt32Value(OBJECT_FIELD_ENTRY) );
+				//}
 
 				if( pVictim->GetTypeId() != TYPEID_PLAYER )
 					sQuestMgr.OnPlayerKill( TO_PLAYER(this), TO_CREATURE( pVictim ) );
